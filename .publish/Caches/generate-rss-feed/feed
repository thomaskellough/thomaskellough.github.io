{"itemCount":31,"config":{"ttlInterval":250,"maximumItemCount":100,"targetPath":"feed.rss"},"feed":"<?xml version=\"1.0\" encoding=\"UTF-8\"?><rss version=\"2.0\" xmlns:atom=\"http:\/\/www.w3.org\/2005\/Atom\" xmlns:content=\"http:\/\/purl.org\/rss\/1.0\/modules\/content\"><channel><title>The Swift Protocol<\/title><description>Swift Skill Building With Thomas Kellough<\/description><link>www.thomaskellough\/thomaskellough.github.io<\/link><language>en<\/language><lastBuildDate>Mon, 29 May 2023 19:34:51 -0500<\/lastBuildDate><pubDate>Mon, 29 May 2023 19:34:51 -0500<\/pubDate><ttl>250<\/ttl><atom:link href=\"www.thomaskellough\/thomaskellough.github.io\/feed.rss\" rel=\"self\" type=\"application\/rss+xml\"\/><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/17-how-to-use-dynamic-coding-keys<\/guid><title>Learn how to use dynamic coding keys in your app<\/title><description>Use dyanmic coding keys in your app<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/17-how-to-use-dynamic-coding-keys<\/link><pubDate>Mon, 29 May 2023 12:05:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Learn how to use dynamic coding keys in your app<\/h1><div class=\"post-tags\" markdown=\"1\">\n    <a class=\"post-category post-category-feature\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/feature\">Feature<\/a>\n    <a class=\"post-category post-category-swiftui\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/swiftui\">SwiftUI<\/a>\n    <a class=\"post-category post-category-codable\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/appicon\">Codable<\/a>\n<\/div><h3>Introduction<\/h3><p>In mobile development, one common task is fetching data from a server and displaying it in your app. In iOS development using Swift, this often involves decoding JSON data and presenting it to users. While it's relatively straightforward to decode JSON and display the data, there are scenarios where the code can become less scalable and more difficult to maintain. This tutorial will address one such scenario by introducing dynamic coding keys, which provide a flexible approach to handling JSON data with varying keys. By leveraging dynamic coding keys, you can make your code more readable and adaptable to changes in the backend data.<\/p><h3>Getting Started<\/h3><p>To follow along with this tutorial, you can download the starter project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-SwiftUI\/tree\/main\/How-To-Use-Dynamic-Coding-Keys-Starter\">here<\/a>.<\/p><h3>Problem<\/h3><p>The starter project is a simple app that decodes a list of homes for sale and displays some data about the homes to the user. Let's take a look at an example home from the <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-SwiftUI\/blob\/main\/How-To-Use-Dynamic-Coding-Keys-Starter\/How-To-Use-Dynamic-Coding-Keys\/homesData.json\">JSON<\/a> data:<\/p><pre><code>{\n    <span class=\"string\">\"id\"<\/span>: <span class=\"number\">1<\/span>,\n    <span class=\"string\">\"address\"<\/span>: <span class=\"string\">\"123 Main St\"<\/span>,\n    <span class=\"string\">\"city\"<\/span>: <span class=\"string\">\"Exampleville\"<\/span>,\n    <span class=\"string\">\"state\"<\/span>: <span class=\"string\">\"Exampshire\"<\/span>,\n    <span class=\"string\">\"zip\"<\/span>: <span class=\"string\">\"12345\"<\/span>,\n    <span class=\"string\">\"price\"<\/span>: <span class=\"number\">250000<\/span>,\n    <span class=\"string\">\"bedrooms\"<\/span>: <span class=\"number\">3<\/span>,\n    <span class=\"string\">\"bathrooms\"<\/span>: <span class=\"number\">2<\/span>,\n    <span class=\"string\">\"description\"<\/span>: <span class=\"string\">\"This beautiful home features a spacious living room, modern kitchen, and a backyard garden.\"<\/span>,\n    <span class=\"string\">\"amenity1\"<\/span>: <span class=\"string\">\"Swimming Pool\"<\/span>,\n    <span class=\"string\">\"amenity2\"<\/span>: <span class=\"string\">\"Fireplace\"<\/span>,\n    <span class=\"string\">\"amenity3\"<\/span>: <span class=\"string\">\"Garage\"<\/span>,\n    <span class=\"string\">\"amenity4\"<\/span>: <span class=\"string\">\"Garden\"<\/span>,\n    <span class=\"string\">\"amenity5\"<\/span>: <span class=\"string\">\"\"<\/span>,\n    <span class=\"string\">\"amenity6\"<\/span>: <span class=\"string\">\"\"<\/span>,\n    <span class=\"string\">\"amenity7\"<\/span>: <span class=\"string\">\"\"<\/span>,\n    <span class=\"string\">\"amenity8\"<\/span>: <span class=\"string\">\"\"<\/span>,\n    <span class=\"string\">\"amenity9\"<\/span>: <span class=\"string\">\"\"<\/span>,\n    <span class=\"string\">\"amenity10\"<\/span>: <span class=\"string\">\"\"<\/span>,\n    <span class=\"string\">\"photos\"<\/span>: [\n        <span class=\"string\">\"https:\/\/example.com\/photos\/1.jpg\"<\/span>,\n        <span class=\"string\">\"https:\/\/example.com\/photos\/2.jpg\"<\/span>,\n        <span class=\"string\">\"https:\/\/example.com\/photos\/3.jpg\"<\/span>\n    ]\n}\n<\/code><\/pre><p>At first glance, this JSON seems straightforward. You might be tempted to write code to fetch and decode this data, and display it to the user. However, there is a problem with the way this JSON is formatted. Notice the amenities section with keys like \"amenity1\", \"amenity2\", and so on. This solution requires hard-coding each amenity as a separate property in the Home struct. But what happens when new amenities are added? We would need to update our code and release a new version of the app. This is not ideal, as it introduces more room for errors and makes our code less adaptable to changes in the backend data. A naive solution may look something like this:<\/p><pre><code><span class=\"keyword\">struct<\/span> Home: <span class=\"type\">Codable<\/span> {\n    <span class=\"keyword\">let<\/span> id: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> address: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> city: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> state: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> zip: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> price: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> bedrooms: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> bathrooms: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> description: <span class=\"type\">String<\/span>\n    \n    <span class=\"keyword\">private let<\/span> amenity1: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity2: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity3: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity4: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity5: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity6: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity7: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity8: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity9: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">private let<\/span> amenity10: <span class=\"type\">String<\/span>\n    \n    <span class=\"keyword\">init<\/span>(id: <span class=\"type\">Int<\/span>, address: <span class=\"type\">String<\/span>, city: <span class=\"type\">String<\/span>, state: <span class=\"type\">String<\/span>, zip: <span class=\"type\">String<\/span>, price: <span class=\"type\">Int<\/span>, bedrooms: <span class=\"type\">Int<\/span>, bathrooms: <span class=\"type\">Int<\/span>, description: <span class=\"type\">String<\/span>, photos: [<span class=\"type\">String<\/span>], amenity1: <span class=\"type\">String<\/span>, amenity2: <span class=\"type\">String<\/span>, amenity3: <span class=\"type\">String<\/span>, amenity4: <span class=\"type\">String<\/span>, amenity5: <span class=\"type\">String<\/span>, amenity6: <span class=\"type\">String<\/span>, amenity7: <span class=\"type\">String<\/span>, amenity8: <span class=\"type\">String<\/span>, amenity9: <span class=\"type\">String<\/span>, amenity10: <span class=\"type\">String<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">id<\/span> = id\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">address<\/span> = address\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">city<\/span> = city\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">state<\/span> = state\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">zip<\/span> = zip\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">price<\/span> = price\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">bedrooms<\/span> = bedrooms\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">bathrooms<\/span> = bathrooms\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">description<\/span> = description\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity1<\/span> = amenity1\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity2<\/span> = amenity2\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity3<\/span> = amenity3\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity4<\/span> = amenity4\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity5<\/span> = amenity5\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity6<\/span> = amenity6\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity7<\/span> = amenity7\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity8<\/span> = amenity8\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity9<\/span> = amenity9\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenity10<\/span> = amenity10\n    }\n    \n    <span class=\"keyword\">func<\/span> getAmenities() -&gt; [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">return<\/span> [amenity1, amenity2, amenity3, amenity4, amenity5, amenity6, amenity7, amenity8, amenity9, amenity10].<span class=\"call\">filter<\/span> { !$0.<span class=\"property\">isEmpty<\/span> }\n    }\n}\n<\/code><\/pre><h3>Solution Approach<\/h3><p>To address the limitations of the current solution, we will leverage dynamic coding keys. Dynamic coding keys allow us to handle varying keys in the JSON data without the need for hard-coding each property. With this approach, our code can gracefully handle new amenities being added without requiring manual updates and releases.<\/p><h4>Step 1: Refining the Data Model<\/h4><p>First, we will enhance the data model to effectively handle the dynamic nature of amenities. We'll introduce a new property, amenities, as a list to store all the amenities associated with a home. This modification allows for seamless expansion of amenity options without the need to modify the codebase. Here's an updated version of the Home struct:<\/p><pre><code><span class=\"keyword\">struct<\/span> Home: <span class=\"type\">Codable<\/span> {\n    <span class=\"keyword\">let<\/span> id: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> address: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> city: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> state: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> zip: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> price: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> bedrooms: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> bathrooms: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> description: <span class=\"type\">String<\/span>\n\n    <span class=\"keyword\">private var<\/span> amenities: [<span class=\"type\">String<\/span>] = []\n\n    <span class=\"keyword\">func<\/span> getAmenities() -&gt; [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">return<\/span> amenities\n    }\n}\n<\/code><\/pre><h4>Step 2: Implementing Dynamic Coding Keys<\/h4><p>To support dynamic decoding, we will introduce a new <code>DynamicKey<\/code> struct that conforms to the CodingKey protocol. This struct enables us to handle the variable nature of the keys in the JSON data. Here's an example implementation:<\/p><pre><code><span class=\"keyword\">struct<\/span> DynamicKey: <span class=\"type\">CodingKey<\/span> {\n    <span class=\"keyword\">var<\/span> stringValue: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">var<\/span> intValue: <span class=\"type\">Int<\/span>?\n\n    <span class=\"keyword\">init<\/span>?(stringValue: <span class=\"type\">String<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">stringValue<\/span> = stringValue\n    }\n\n    <span class=\"keyword\">init<\/span>?(intValue: <span class=\"type\">Int<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">stringValue<\/span> = <span class=\"string\">\"<\/span>\\(intValue)<span class=\"string\">\"<\/span>\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">intValue<\/span> = intValue\n    }\n}\n<\/code><\/pre><h4>Step 3: Updating the Decoding Process<\/h4><p>Next, we will update the decoding process to utilize dynamic coding keys instead of the default coding keys. This change ensures that our code can adapt to varying key names in the JSON data. Here's the updated decoding logic:<\/p><pre><code><span class=\"keyword\">struct<\/span> Home: <span class=\"type\">Codable<\/span> {\n    <span class=\"comment\">\/\/ ...<\/span>\n\n    <span class=\"keyword\">init<\/span>(from decoder: <span class=\"type\">Decoder<\/span>) <span class=\"keyword\">throws<\/span> {\n        <span class=\"keyword\">let<\/span> container = <span class=\"keyword\">try<\/span> decoder.<span class=\"call\">container<\/span>(keyedBy: <span class=\"type\">DynamicKey<\/span>.<span class=\"keyword\">self<\/span>)\n\n        <span class=\"comment\">\/\/ Handle decoding for each property<\/span>\n        <span class=\"keyword\">if let<\/span> idKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"id\"<\/span>), <span class=\"keyword\">let<\/span> id = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, forKey: idKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">id<\/span> = id\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"id\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'id' is missing\"<\/span>))\n        }\n\n        <span class=\"comment\">\/\/ Repeat the above decoding process for other properties\n\n        \/\/ Handling amenities decoding dynamically<\/span>\n        <span class=\"keyword\">var<\/span> amenitiesArr: [<span class=\"type\">String<\/span>] = []\n        <span class=\"keyword\">for<\/span> key <span class=\"keyword\">in<\/span> container.<span class=\"property\">allKeys<\/span> {\n            <span class=\"keyword\">if<\/span> key.<span class=\"property\">stringValue<\/span>.<span class=\"call\">hasPrefix<\/span>(<span class=\"string\">\"amenity\"<\/span>), <span class=\"keyword\">let<\/span> amenity = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: key) {\n                <span class=\"keyword\">if<\/span> amenity.<span class=\"property\">isEmpty<\/span> { <span class=\"keyword\">continue<\/span> }\n                amenitiesArr.<span class=\"call\">append<\/span>(amenity)\n            }\n        }\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenities<\/span> = amenitiesArr\n    }\n\n    <span class=\"comment\">\/\/ ...<\/span>\n}\n\n<\/code><\/pre><p>That means, after updating everything, you should see something very similar to this.<\/p><pre><code><span class=\"keyword\">struct<\/span> DynamicKey: <span class=\"type\">CodingKey<\/span> {\n    <span class=\"keyword\">var<\/span> stringValue: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">var<\/span> intValue: <span class=\"type\">Int<\/span>?\n\n    <span class=\"keyword\">init<\/span>?(stringValue: <span class=\"type\">String<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">stringValue<\/span> = stringValue\n    }\n\n    <span class=\"keyword\">init<\/span>?(intValue: <span class=\"type\">Int<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">stringValue<\/span> = <span class=\"string\">\"<\/span>\\(intValue)<span class=\"string\">\"<\/span>\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">intValue<\/span> = intValue\n    }\n}\n\n<span class=\"keyword\">struct<\/span> Home: <span class=\"type\">Codable<\/span> {\n    <span class=\"keyword\">let<\/span> id: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> address: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> city: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> state: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> zip: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> price: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> bedrooms: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> bathrooms: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> description: <span class=\"type\">String<\/span>\n\n    <span class=\"keyword\">private var<\/span> amenities: [<span class=\"type\">String<\/span>] = []\n\n    <span class=\"keyword\">init<\/span>(from decoder: <span class=\"type\">Decoder<\/span>) <span class=\"keyword\">throws<\/span> {\n        <span class=\"keyword\">let<\/span> container = <span class=\"keyword\">try<\/span> decoder.<span class=\"call\">container<\/span>(keyedBy: <span class=\"type\">DynamicKey<\/span>.<span class=\"keyword\">self<\/span>)\n\n        <span class=\"keyword\">if let<\/span> idKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"id\"<\/span>), <span class=\"keyword\">let<\/span> id = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, forKey: idKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">id<\/span> = id\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"id\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'id' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> addressKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"address\"<\/span>), <span class=\"keyword\">let<\/span> address = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: addressKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">address<\/span> = address\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"address\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'address' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> cityKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"city\"<\/span>), <span class=\"keyword\">let<\/span> city = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: cityKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">city<\/span> = city\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"city\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'city' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> stateKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"state\"<\/span>), <span class=\"keyword\">let<\/span> state = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: stateKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">state<\/span> = state\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"state\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'state' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> zipKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"zip\"<\/span>), <span class=\"keyword\">let<\/span> zip = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: zipKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">zip<\/span> = zip\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"zip\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'zip' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> priceKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"price\"<\/span>), <span class=\"keyword\">let<\/span> price = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, forKey: priceKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">price<\/span> = price\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"price\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'price' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> bedroomsKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"bedrooms\"<\/span>), <span class=\"keyword\">let<\/span> bedrooms = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, forKey: bedroomsKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">bedrooms<\/span> = bedrooms\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"bedrooms\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'bedrooms' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> bathroomsKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"bathrooms\"<\/span>), <span class=\"keyword\">let<\/span> bathrooms = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, forKey: bathroomsKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">bathrooms<\/span> = bathrooms\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"bathrooms\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'bathrooms' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">if let<\/span> descriptionKey = <span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"description\"<\/span>), <span class=\"keyword\">let<\/span> description = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: descriptionKey) {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">description<\/span> = description\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(<span class=\"type\">DynamicKey<\/span>(stringValue: <span class=\"string\">\"bathrooms\"<\/span>)!, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property 'bathrooms' is missing\"<\/span>))\n        }\n\n        <span class=\"keyword\">var<\/span> amenitiesArr: [<span class=\"type\">String<\/span>] = []\n        <span class=\"keyword\">for<\/span> key <span class=\"keyword\">in<\/span> container.<span class=\"property\">allKeys<\/span> {\n            <span class=\"keyword\">if<\/span> key.<span class=\"property\">stringValue<\/span>.<span class=\"call\">hasPrefix<\/span>(<span class=\"string\">\"amenity\"<\/span>), <span class=\"keyword\">let<\/span> amenity = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: key) {\n                <span class=\"keyword\">if<\/span> amenity.<span class=\"property\">isEmpty<\/span> { <span class=\"keyword\">continue<\/span> }\n                amenitiesArr.<span class=\"call\">append<\/span>(amenity)\n            }\n        }\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenities<\/span> = amenitiesArr\n    }\n\n    <span class=\"keyword\">func<\/span> getAmenities() -&gt; [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">return<\/span> amenities\n    }\n}\n<\/code><\/pre><p>With this updated decoding logic, we can successfully decode all the properties, including the dynamically named amenities.<\/p><p>By incorporating dynamic coding keys, we have improved the flexibility and adaptability of our codebase. The updated solution gracefully handles varying keys in the JSON data, allowing for the addition of new amenities without manual code modifications. This approach ensures a robust and future-proof implementation, enabling smooth integration with the evolving data structure.<\/p><p>One more thing to note here. You may be thinking that the JSON is formatted poorly and it should be updated to just have a list of amenities instead of listing them one-by-one. Honestly, you're right. However, you may not have the power to change this depending on where you work. So it's important that you understand how to handle whatever is thrown at you, just in case your recommendations go unnoticed.<\/p><h4>Final Solution<\/h4><p>This is already a great solution, but let's make it even better by improving the code readability and reducing redundancy.<\/p><p>Currently, each required property is individually decoded and checked for presence. We can simplify this process by creating a helper function that handles the decoding and error throwing for us.<\/p><p>We'll add a private function called <code>decodeRequiredWithKey<\/code> that takes the type of the property, the key name, and the decoding container. This function will attempt to decode the value for the given key and throw an error if the value is missing.<\/p><pre><code><span class=\"keyword\">private func<\/span> decodeRequiredWithKey&lt;T: <span class=\"type\">Decodable<\/span>&gt;(<span class=\"keyword\">_<\/span> type: <span class=\"type\">T<\/span>.<span class=\"type\">Type<\/span>, key: <span class=\"type\">String<\/span>, container: <span class=\"type\">KeyedDecodingContainer<\/span>&lt;<span class=\"type\">DynamicKey<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">T<\/span> {\n    <span class=\"keyword\">guard let<\/span> dynamicKey = <span class=\"type\">DynamicKey<\/span>(stringValue: key) <span class=\"keyword\">else<\/span> {\n        <span class=\"keyword\">throw<\/span> <span class=\"type\">DynamicKeyError<\/span>.<span class=\"property\">dynamicKeyNotFound<\/span>\n    }\n    \n    <span class=\"keyword\">do<\/span> {\n        <span class=\"keyword\">return try<\/span> container.<span class=\"call\">decode<\/span>(type, forKey: dynamicKey)\n    } <span class=\"keyword\">catch<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span> {\n        <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(dynamicKey, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property '<\/span>\\(key)<span class=\"string\">' is missing\"<\/span>))\n    } <span class=\"keyword\">catch<\/span> {\n        <span class=\"keyword\">throw<\/span> <span class=\"type\">DynamicKeyError<\/span>.<span class=\"property\">valueNotFound<\/span>\n    }\n}\n<\/code><\/pre><p>Now, instead of individually decoding and checking each property, we can use the decodeRequiredWithKey function for each required property. This makes the code more concise and improves maintainability.<\/p><pre><code><span class=\"keyword\">self<\/span>.<span class=\"property\">id<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"id\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">address<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"address\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">city<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"city\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">state<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"state\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">zip<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"zip\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">price<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"price\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">bedrooms<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"bedrooms\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">bathrooms<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"bathrooms\"<\/span>, container: container)\n<span class=\"keyword\">self<\/span>.<span class=\"property\">description<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"description\"<\/span>, container: container)\n<\/code><\/pre><p>This means you'll neeed to set some default values for all properites of your code, but I still think it makes it cleaner. The final solution is:<\/p><pre><code><span class=\"keyword\">struct<\/span> DynamicKey: <span class=\"type\">CodingKey<\/span> {\n    <span class=\"keyword\">var<\/span> stringValue: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">var<\/span> intValue: <span class=\"type\">Int<\/span>?\n\n    <span class=\"keyword\">init<\/span>?(stringValue: <span class=\"type\">String<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">stringValue<\/span> = stringValue\n    }\n\n    <span class=\"keyword\">init<\/span>?(intValue: <span class=\"type\">Int<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">stringValue<\/span> = <span class=\"string\">\"<\/span>\\(intValue)<span class=\"string\">\"<\/span>\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">intValue<\/span> = intValue\n    }\n}\n\n<span class=\"keyword\">enum<\/span> DynamicKeyError: <span class=\"type\">Error<\/span> {\n    <span class=\"keyword\">case<\/span> dynamicKeyNotFound\n    <span class=\"keyword\">case<\/span> valueNotFound\n}\n\n<span class=\"keyword\">struct<\/span> Home: <span class=\"type\">Codable<\/span> {\n    <span class=\"keyword\">var<\/span> id: <span class=\"type\">Int<\/span> = <span class=\"number\">0<\/span>\n    <span class=\"keyword\">var<\/span> address: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n    <span class=\"keyword\">var<\/span> city: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n    <span class=\"keyword\">var<\/span> state: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n    <span class=\"keyword\">var<\/span> zip: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n    <span class=\"keyword\">var<\/span> price: <span class=\"type\">Int<\/span> = <span class=\"number\">0<\/span>\n    <span class=\"keyword\">var<\/span> bedrooms: <span class=\"type\">Int<\/span> = <span class=\"number\">0<\/span>\n    <span class=\"keyword\">var<\/span> bathrooms: <span class=\"type\">Int<\/span> = <span class=\"number\">0<\/span>\n    <span class=\"keyword\">var<\/span> description: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n\n    <span class=\"keyword\">private var<\/span> amenities: [<span class=\"type\">String<\/span>] = []\n    \n    <span class=\"keyword\">private func<\/span> decodeRequiredWithKey&lt;T: <span class=\"type\">Decodable<\/span>&gt;(<span class=\"keyword\">_<\/span> type: <span class=\"type\">T<\/span>.<span class=\"type\">Type<\/span>, key: <span class=\"type\">String<\/span>, container: <span class=\"type\">KeyedDecodingContainer<\/span>&lt;<span class=\"type\">DynamicKey<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">T<\/span> {\n        <span class=\"keyword\">guard let<\/span> dynamicKey = <span class=\"type\">DynamicKey<\/span>(stringValue: key) <span class=\"keyword\">else<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DynamicKeyError<\/span>.<span class=\"property\">dynamicKeyNotFound<\/span>\n        }\n        \n        <span class=\"keyword\">do<\/span> {\n            <span class=\"keyword\">return try<\/span> container.<span class=\"call\">decode<\/span>(type, forKey: dynamicKey)\n        } <span class=\"keyword\">catch<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DecodingError<\/span>.<span class=\"call\">keyNotFound<\/span>(dynamicKey, <span class=\"type\">DecodingError<\/span>.<span class=\"type\">Context<\/span>(codingPath: [], debugDescription: <span class=\"string\">\"Required property '<\/span>\\(key)<span class=\"string\">' is missing\"<\/span>))\n        } <span class=\"keyword\">catch<\/span> {\n            <span class=\"keyword\">throw<\/span> <span class=\"type\">DynamicKeyError<\/span>.<span class=\"property\">valueNotFound<\/span>\n        }\n    }\n\n    <span class=\"keyword\">init<\/span>(from decoder: <span class=\"type\">Decoder<\/span>) <span class=\"keyword\">throws<\/span> {\n        <span class=\"keyword\">let<\/span> container = <span class=\"keyword\">try<\/span> decoder.<span class=\"call\">container<\/span>(keyedBy: <span class=\"type\">DynamicKey<\/span>.<span class=\"keyword\">self<\/span>)\n        \n        <span class=\"keyword\">self<\/span>.<span class=\"property\">id<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"id\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">address<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"address\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">city<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"city\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">state<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"state\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">zip<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"zip\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">price<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"price\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">bedrooms<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"bedrooms\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">bathrooms<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">Int<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"bathrooms\"<\/span>, container: container)\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">description<\/span> = <span class=\"keyword\">try<\/span> <span class=\"call\">decodeRequiredWithKey<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, key: <span class=\"string\">\"description\"<\/span>, container: container)\n        \n        <span class=\"keyword\">var<\/span> amenitiesArr: [<span class=\"type\">String<\/span>] = []\n        <span class=\"keyword\">for<\/span> key <span class=\"keyword\">in<\/span> container.<span class=\"property\">allKeys<\/span> {\n            <span class=\"keyword\">if<\/span> key.<span class=\"property\">stringValue<\/span>.<span class=\"call\">hasPrefix<\/span>(<span class=\"string\">\"amenity\"<\/span>), <span class=\"keyword\">let<\/span> amenity = <span class=\"keyword\">try<\/span> container.<span class=\"call\">decodeIfPresent<\/span>(<span class=\"type\">String<\/span>.<span class=\"keyword\">self<\/span>, forKey: key) {\n                <span class=\"keyword\">if<\/span> amenity.<span class=\"property\">isEmpty<\/span> { <span class=\"keyword\">continue<\/span> }\n                amenitiesArr.<span class=\"call\">append<\/span>(amenity)\n            }\n        }\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">amenities<\/span> = amenitiesArr\n    }\n\n    <span class=\"keyword\">func<\/span> getAmenities() -&gt; [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">return<\/span> amenities\n    }\n}\n<\/code><\/pre><h3>Conclusion<\/h3><p>I hope all your decoding is clean and easy, but if not, I hope you're a bit more prepard on how to tackle whatever is thrown your way. If you'd like to find the source code for this project you can do so <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-SwiftUI\">here<\/a>.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/16-leetcode-majority-element-169<\/guid><title>Majority Element<\/title><description>Majority Element.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/16-leetcode-majority-element-169<\/link><pubDate>Sun, 21 May 2023 14:30:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Majority Element<\/h1><div class=\"post-tags\" markdown=\"1\">\n    <a class=\"post-category post-category-leetcodeeasy\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/leetcodeeasy\">Leetcode Easy<\/a>\n<\/div><h3>Problem<\/h3><p><a href=\"https:\/\/leetcode.com\/problems\/majority-element\/\">Majority Element<\/a> is an easy-tagged leetcode problem. It's problem statement is:<\/p><div class=\"problem-container\">Given an array nums of size n, return the majority element.\n\nThe majority element is the element that appears more than ⌊n \/ 2⌋ times. You may assume that the majority element always exists in the array.\n<\/div><h3>Thought Process<\/h3><p>A couple of things to note....<\/p><ol><li>We <em>must<\/em> return a number. There is no option to to return nil here.<\/li><li>According to the problem, the majority element will always exist. This means we <em>must<\/em> have at least one element in the array. If there is only one element in the array, we can return that element. To take this a step further, if there are two elements in the array, they must be the same because we cannot have a tie in this problem.<\/li><\/ol><p>That being side, let's handle our edge cases here. We can actually handle both these with one line using Swift.<\/p><pre><code><span class=\"keyword\">func<\/span> majorityElement(<span class=\"keyword\">_<\/span> nums: [<span class=\"type\">Int<\/span>]) -&gt; <span class=\"type\">Int<\/span> {\n    <span class=\"keyword\">guard<\/span> nums.<span class=\"property\">count<\/span> &gt; <span class=\"number\">2<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> nums.<span class=\"property\">first<\/span>! }\n}\n<\/code><\/pre><p>This is leetcode, not a real-world production problem. It is okay to force unwrap here because of our problem statement, but I would mention why you are doing this to your interviewer and discuss safer ways to handle this in real scenarios.<\/p><p>Next, we can move onto how to solve this if we have more than three elements in the array. Let's take and example array.<\/p><pre><code>[<span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">3<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">3<\/span>, <span class=\"number\">1<\/span>]\n<\/code><\/pre><p>The first thought may be to start looping through the array and counting each number. It's not a bad idea and we should give it a try. The best way to count each element is to store each value in a dictionary. We can start by looping through the array and incrementing each element by one when we run into it.<\/p><pre><code><span class=\"keyword\">var<\/span> dict = [<span class=\"type\">Int<\/span>: <span class=\"type\">Int<\/span>]()\n\n<span class=\"keyword\">for<\/span> num <span class=\"keyword\">in<\/span> nums {\n    <span class=\"keyword\">if let<\/span> _ = dict[num] {\n        dict[num]! += <span class=\"number\">1<\/span>\n    }  <span class=\"keyword\">else<\/span> {\n        dict[num] = <span class=\"number\">1<\/span>\n    }\n}\n<\/code><\/pre><p>Then we can loop over the dictionary, compare it's value to [n \/ 2], then return the key to that value.<\/p><pre><code><span class=\"keyword\">for<\/span> (key, value) <span class=\"keyword\">in<\/span> dict {\n    <span class=\"keyword\">if<\/span> value &gt; nums.<span class=\"property\">count<\/span> \/ <span class=\"number\">2<\/span> {\n        <span class=\"keyword\">return<\/span> key\n    }\n}\n\n<span class=\"keyword\">return<\/span> -<span class=\"number\">1<\/span>\n<\/code><\/pre><h3>Solution 1<\/h3><p>The full solution is:<\/p><pre><code><span class=\"keyword\">func<\/span> majorityElement(<span class=\"keyword\">_<\/span> nums: [<span class=\"type\">Int<\/span>]) -&gt; <span class=\"type\">Int<\/span> {\n    <span class=\"keyword\">guard<\/span> nums.<span class=\"property\">count<\/span> &gt; <span class=\"number\">2<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> nums.<span class=\"property\">first<\/span>! }\n\n    <span class=\"keyword\">var<\/span> dict = [<span class=\"type\">Int<\/span>: <span class=\"type\">Int<\/span>]()\n\n    <span class=\"keyword\">for<\/span> num <span class=\"keyword\">in<\/span> nums {\n        <span class=\"keyword\">if let<\/span> _ = dict[num] {\n            dict[num]! += <span class=\"number\">1<\/span>\n        }  <span class=\"keyword\">else<\/span> {\n            dict[num] = <span class=\"number\">1<\/span>\n        }\n    }\n\n    <span class=\"keyword\">for<\/span> (key, value) <span class=\"keyword\">in<\/span> dict {\n        <span class=\"keyword\">if<\/span> value &gt; nums.<span class=\"property\">count<\/span> \/ <span class=\"number\">2<\/span> {\n            <span class=\"keyword\">return<\/span> key\n        }\n    }\n\n    <span class=\"keyword\">return<\/span> -<span class=\"number\">1<\/span>\n}\n<\/code><\/pre><p>Runtime - 105 ms Memory - 15.9 MB<\/p><p>This is a perfectly valid solution. It's fast and uses little memory. Since we only need to loop through the array once and then the dictionary once we have a time complexity of O(n). Since we store data in a hashmap we also have a space complexity of O(n). For most jobs interviews, this solution is probably sufficient. However, let's discuss a couple of ways to make this a bit better.<\/p><p>The first way is a way to show you your Swift knowledge. Swift's dictionary has a built-in way to increment a current value OR create a new key\/value pair if it does not exist.<\/p><p>This means we can update our looping of our array to the following:<\/p><pre><code><span class=\"keyword\">for<\/span> num <span class=\"keyword\">in<\/span> nums {\n    dict[num, default: <span class=\"number\">0<\/span>] += <span class=\"number\">1<\/span>\n}\n<\/code><\/pre><h3>Solution 2<\/h3><p>To take this one step further, we can make this method a bit quicker by checking the value each time after updating our array. This saves us from looping through the dictionary after the fact.<\/p><pre><code><span class=\"keyword\">func<\/span> majorityElement(<span class=\"keyword\">_<\/span> nums: [<span class=\"type\">Int<\/span>]) -&gt; <span class=\"type\">Int<\/span> {\n    <span class=\"keyword\">guard<\/span> nums.<span class=\"property\">count<\/span> &gt; <span class=\"number\">2<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> nums.<span class=\"property\">first<\/span>! }\n\n    <span class=\"keyword\">var<\/span> dict = [<span class=\"type\">Int<\/span>: <span class=\"type\">Int<\/span>]()\n\n    <span class=\"keyword\">for<\/span> num <span class=\"keyword\">in<\/span> nums {\n        dict[num, default: <span class=\"number\">0<\/span>] += <span class=\"number\">1<\/span>\n\n        <span class=\"keyword\">if<\/span> dict[num]! &gt; nums.<span class=\"property\">count<\/span> \/ <span class=\"number\">2<\/span> {\n            <span class=\"keyword\">return<\/span> num\n        }\n    }\n\n    <span class=\"keyword\">return<\/span> -<span class=\"number\">1<\/span>\n}\n<\/code><\/pre><p>It's safe to force unwrap here because we are ensuring that we have a value in the line literally above it.<\/p><p>Runtime - 105 ms Memory - 15.9 MB<\/p><p>Note that the runtime and memory are very similar to solution 1. In fact, even though this can be faster, it still has a time and space complexity of O(n). When calculating for time and space complexity we always do it with worst case scenario. In this example, as n increases so does both our time and space.<\/p><p><em>Tip: if you want to further use Swift syntatic sugar, look into <code><\/code><code>forEach<\/code><code><\/code><\/em><\/p><h3>Solution 3<\/h3><p>I still think both above solutions are great solutions, but we can actually improve both our space and complexity if we desire. The caveat is that it involves sorting. Depending on your interviewer, you may be allowed to use built-in sort methods, but some will prefer you not to. I doubt it would be in issue with this problem because that's not the goal, so be sure to discuss with them what you want to do and see if they are okay with it.<\/p><p>Let's take the following array:<\/p><pre><code>[<span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">3<\/span>, <span class=\"number\">3<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">3<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">1<\/span>]\n<\/code><\/pre><p>If we were to sort this array we would get<\/p><pre><code>[<span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">1<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">2<\/span>, <span class=\"number\">3<\/span>, <span class=\"number\">3<\/span>, <span class=\"number\">3<\/span>]\n<\/code><\/pre><p>If we look at the middle element we get 1. For this problem, after sorting the array we will <em>always<\/em> get the majority element.<\/p><p>This means we can solve this problem in literally one line of Swift code.<\/p><pre><code><span class=\"keyword\">func<\/span> majorityElement(<span class=\"keyword\">_<\/span> nums: [<span class=\"type\">Int<\/span>]) -&gt; <span class=\"type\">Int<\/span> {\n    <span class=\"keyword\">return<\/span> nums.<span class=\"call\">sorted<\/span>()[nums.<span class=\"property\">count<\/span> \/ <span class=\"number\">2<\/span>]\n}\n<\/code><\/pre><p>Runtime - 99 ms Memory - 15.6 MB<\/p><p>Much faster and uses less memory. This is because <a href=\"https:\/\/github.com\/apple\/swift\/blob\/main\/stdlib\/public\/core\/Sort.swift\">Swift's sort method<\/a> has a time complexity of O(nlogn). The space complexity for this problem is O(1) since we do not use any additional space.<\/p><p>If you were to get this problem in an interview, I would recommend discussing this method and one of the previous methods where you loop yourself. This one is obviously the better solution, but the interviewer may be sure you understand coding basics such as dictionaries and looping.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/15-how-to-change-your-app-icon<\/guid><title>Learn how to change your app icon dynamically<\/title><description>Allow users to change their app icon for your app.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/15-how-to-change-your-app-icon<\/link><pubDate>Sat, 17 Apr 2021 12:05:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Learn how to change your app icon dynamically<\/h1><div class=\"post-tags\" markdown=\"1\">\n    <a class=\"post-category post-category-swiftui\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/swiftui\">swiftui<\/a>\n    <a class=\"post-category post-category-appicon\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/appicon\">App Icon<\/a>\n<\/div><h3>Introduction<\/h3><p>App Icons are the very first thing users will see before opening your app. Most apps do not allow you to edit your app icon, but it's such a simple feature that doesn't take much work at all to give your user an extra experience to help make your app more unique to them. This tutorial will show you how to let users change the app icon based on the images that you have provided.<\/p><h3>Getting Started<\/h3><p>Go ahead and start a new SwiftUI project. This app will be very simple and the only thing we will be doing is adding some images, editing the plist, adding ONE function, then adding a Picker. You can reuse either all of this or parts of it for your own projects. If you just want to look at the full solution you can do so <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-SwiftUI\">here<\/a>.<\/p><h4>Adding Images<\/h4><p>If you're used to adding your app icon inside the Assets.xcassets folder then forget it now. When dealing with multiple app icons you can't just simply add various ones and expect that to work. You'll need to add every icon you want inside the project navigator. I find it easier to create a new folder called <code>AppIcons<\/code> and drop all the images in there to keep it organized. You'll also want to add @2x and @3x version for each icon. The sizes for this project are 160x160 and 180x180 for @2x and @3x respectively. Feel free to snag my images I created from GitHub or find your own. My images were just some triangles smashed together in Figma with different colors, nothing fancy.<\/p><h4>Editing your plist file<\/h4><p>Now that you've added the images to your project, it's time to edit your plist to read those images. You can do this using the default property list view, but we deal with some nested dictionaries that can get quite confusing. It may be easier if you right-click <code>Info.plist<\/code> and <code>Open as Source Code<\/code>. I'm going to break it down step-by-step to make it easier to understand, but you can also scroll down to see the final solution if you prefer.<\/p><p>When you first open your plist as source code you'll see something like this:<\/p><pre><code>&lt;?xml version=<span class=\"string\">\"1.0\"<\/span> encoding=<span class=\"string\">\"UTF-8\"<\/span>?&gt;\n&lt;!<span class=\"type\">DOCTYPE<\/span> plist <span class=\"type\">PUBLIC<\/span> <span class=\"string\">\"-\/\/Apple<\/span><span class=\"comment\">\/\/DTD PLIST 1.0\/\/EN\" \"http:\/\/www.apple.com\/DTDs\/PropertyList-1.0.dtd\"&gt;<\/span>\n&lt;plist version=<span class=\"string\">\"1.0\"<\/span>&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleDevelopmentRegion<\/span>&lt;\/key&gt;\n    &lt;string&gt;$(<span class=\"type\">DEVELOPMENT_LANGUAGE<\/span>)&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleExecutable<\/span>&lt;\/key&gt;\n    &lt;string&gt;$(<span class=\"type\">EXECUTABLE_NAME<\/span>)&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleIdentifier<\/span>&lt;\/key&gt;\n    &lt;string&gt;$(<span class=\"type\">PRODUCT_BUNDLE_IDENTIFIER<\/span>)&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleInfoDictionaryVersion<\/span>&lt;\/key&gt;\n    &lt;string&gt;<span class=\"number\">6.0<\/span>&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleName<\/span>&lt;\/key&gt;\n    &lt;string&gt;$(<span class=\"type\">PRODUCT_NAME<\/span>)&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePackageType<\/span>&lt;\/key&gt;\n    &lt;string&gt;$(<span class=\"type\">PRODUCT_BUNDLE_PACKAGE_TYPE<\/span>)&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleShortVersionString<\/span>&lt;\/key&gt;\n    &lt;string&gt;<span class=\"number\">1.0<\/span>&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleVersion<\/span>&lt;\/key&gt;\n    &lt;string&gt;<span class=\"number\">1<\/span>&lt;\/string&gt;\n    &lt;key&gt;<span class=\"type\">LSRequiresIPhoneOS<\/span>&lt;\/key&gt;\n    &lt;<span class=\"keyword\">true<\/span>\/&gt;\n    &lt;key&gt;<span class=\"type\">UIApplicationSceneManifest<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">UIApplicationSupportsMultipleScenes<\/span>&lt;\/key&gt;\n        &lt;<span class=\"keyword\">true<\/span>\/&gt;\n    &lt;\/dict&gt;\n    &lt;key&gt;<span class=\"type\">UIApplicationSupportsIndirectInputEvents<\/span>&lt;\/key&gt;\n    &lt;<span class=\"keyword\">true<\/span>\/&gt;\n    &lt;key&gt;<span class=\"type\">UILaunchScreen<\/span>&lt;\/key&gt;\n    &lt;dict\/&gt;\n    &lt;key&gt;<span class=\"type\">UIRequiredDeviceCapabilities<\/span>&lt;\/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;armv7&lt;\/string&gt;\n    &lt;\/array&gt;\n    &lt;key&gt;<span class=\"type\">UISupportedInterfaceOrientations<\/span>&lt;\/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;<span class=\"type\">UIInterfaceOrientationPortrait<\/span>&lt;\/string&gt;\n        &lt;string&gt;<span class=\"type\">UIInterfaceOrientationLandscapeLeft<\/span>&lt;\/string&gt;\n        &lt;string&gt;<span class=\"type\">UIInterfaceOrientationLandscapeRight<\/span>&lt;\/string&gt;\n    &lt;\/array&gt;\n    &lt;key&gt;<span class=\"type\">UISupportedInterfaceOrientations<\/span>~ipad&lt;\/key&gt;\n    &lt;array&gt;\n        &lt;string&gt;<span class=\"type\">UIInterfaceOrientationPortrait<\/span>&lt;\/string&gt;\n        &lt;string&gt;<span class=\"type\">UIInterfaceOrientationPortraitUpsideDown<\/span>&lt;\/string&gt;\n        &lt;string&gt;<span class=\"type\">UIInterfaceOrientationLandscapeLeft<\/span>&lt;\/string&gt;\n        &lt;string&gt;<span class=\"type\">UIInterfaceOrientationLandscapeRight<\/span>&lt;\/string&gt;\n    &lt;\/array&gt;\n&lt;\/dict&gt;\n&lt;\/plist&gt;\n<\/code><\/pre><p>We will star by adding a new dictionary right below the array of UIInterfaceOrientation options. Every time you add a new object you'll also need to give it a key since it's wrapped in a larger dictionary. This key will be named <code>CFBundleIcons<\/code>. Add the following code.<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>Inside the dictionary you just created we are going to add our primary icon. Once again, it's a dictionary so we need a key\/value. Our value for this will be <em>another<\/em> dictionary (see, it can get confusing).<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePrimaryIcon<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n    &lt;\/dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>Inside of our innermost dictionary, we will add two more key\/values. One will be a key\/array, and the other will be a key\/boolean.<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePrimaryIcon<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n        &lt;array&gt;\n        &lt;\/array&gt;\n        &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n        &lt;<span class=\"keyword\">false<\/span>\/&gt;\n    &lt;\/dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>You'll notice the key\/value for <code>UIPrerenderedIcon<\/code>. This is unfortunately a very old setting that has to do with a gloss effect that isn't used anymore, but we need to keep it here.<\/p><p>Inside our array that we created, we will add just ONE string. This string value needs to be the name of your image without the @2\/3x.png extension. My images are named:<\/p><pre><code>redBlack\nyellowPink\nmultiColor\nblackGreen\n<\/code><\/pre><p>This will also be our default icon when the user first launches the app. In my example, I'll be using <code>redBlack<\/code> as the default.<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePrimaryIcon<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;redBlack&lt;\/string&gt;\n        &lt;\/array&gt;\n        &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n        &lt;<span class=\"keyword\">false<\/span>\/&gt;\n    &lt;\/dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>At this point, you should be able to run your app and have an app icon on your device. Next, we will add our alternate icons.<\/p><p>When we first started editing the plist we added a dictionary with a key of <code>CFbundleIcons<\/code>. Inside that, we added another dictionary with a key of <code>CFBundlePrimaryIcon<\/code>. We are going to add a second dictionary (outside of the <code>CFBundlePrimaryIcon<\/code> dictionary) with a key of <code>CFBundleAlternateIcons<\/code>.<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePrimaryIcon<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;redBlack&lt;\/string&gt;\n        &lt;\/array&gt;\n        &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n        &lt;<span class=\"keyword\">false<\/span>\/&gt;\n    &lt;\/dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleAlternateIcons<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n    &lt;\/dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>Inside our <code>CFBundleAlternateIcons<\/code> dictionary let's create another key\/dictionary. However, this time the key can be whatever you want. I use a good name for what my icon is, but it does not have to be the exact name of your image. For example, my png for my red and black icon is <code>redBlack@3x.png<\/code>, but I'm going to use a key of <code>Red and Black<\/code>.<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePrimaryIcon<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;redBlack&lt;\/string&gt;\n        &lt;\/array&gt;\n        &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n        &lt;<span class=\"keyword\">false<\/span>\/&gt;\n    &lt;\/dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleAlternateIcons<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">Red<\/span> and <span class=\"type\">Black<\/span>&lt;\/key&gt;\n        &lt;dict&gt;\n        &lt;\/dict&gt;\n    &lt;\/dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>Inside our new dictionary, we are going to do the same thing we did with our <code>CFBundlePrimaryIcon<\/code> dictionary. Add a <code>CFBundleIconFiles<\/code> string array and <code>UIPrerenderedIcon<\/code> boolean. The <code>UIPrerenderedIcon<\/code> boolean will once again be false, and the and <code>CFBundleIconFiles<\/code> string array will contain one string with a value of your alternate icon.<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePrimaryIcon<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;redBlack&lt;\/string&gt;\n        &lt;\/array&gt;\n        &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n        &lt;<span class=\"keyword\">false<\/span>\/&gt;\n    &lt;\/dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleAlternateIcons<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">Red<\/span> and <span class=\"type\">Black<\/span>&lt;\/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n            &lt;array&gt;\n                &lt;string&gt;redBlack&lt;\/string&gt;\n            &lt;\/array&gt;\n            &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n            &lt;<span class=\"keyword\">false<\/span>\/&gt;\n        &lt;\/dict&gt;\n    &lt;\/dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>Now we can repeat our steps and add as many alternate app icons as we want. I'm going to add three more. Feel free to copy and paste what you did and edit the key value for the inner dictionary and the string value for each image name you are using.<\/p><pre><code>&lt;key&gt;<span class=\"type\">CFBundleIcons<\/span>&lt;\/key&gt;\n&lt;dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundlePrimaryIcon<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n        &lt;array&gt;\n            &lt;string&gt;redBlack&lt;\/string&gt;\n        &lt;\/array&gt;\n        &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n        &lt;<span class=\"keyword\">false<\/span>\/&gt;\n    &lt;\/dict&gt;\n    &lt;key&gt;<span class=\"type\">CFBundleAlternateIcons<\/span>&lt;\/key&gt;\n    &lt;dict&gt;\n        &lt;key&gt;<span class=\"type\">Red<\/span> and <span class=\"type\">Black<\/span>&lt;\/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n            &lt;array&gt;\n                &lt;string&gt;redBlack&lt;\/string&gt;\n            &lt;\/array&gt;\n            &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n            &lt;<span class=\"keyword\">false<\/span>\/&gt;\n        &lt;\/dict&gt;\n        &lt;key&gt;<span class=\"type\">Black<\/span> and <span class=\"type\">Green<\/span>&lt;\/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n            &lt;array&gt;\n                &lt;string&gt;blackGreen&lt;\/string&gt;\n            &lt;\/array&gt;\n            &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n            &lt;<span class=\"keyword\">false<\/span>\/&gt;\n        &lt;\/dict&gt;\n        &lt;key&gt;<span class=\"type\">Multi<\/span>-<span class=\"type\">Color<\/span>&lt;\/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n            &lt;array&gt;\n                &lt;string&gt;multiColor&lt;\/string&gt;\n            &lt;\/array&gt;\n            &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n            &lt;<span class=\"keyword\">false<\/span>\/&gt;\n        &lt;\/dict&gt;\n        &lt;key&gt;<span class=\"type\">Yellow And Pink<\/span>&lt;\/key&gt;\n        &lt;dict&gt;\n            &lt;key&gt;<span class=\"type\">CFBundleIconFiles<\/span>&lt;\/key&gt;\n            &lt;array&gt;\n                &lt;string&gt;yellowPink&lt;\/string&gt;\n            &lt;\/array&gt;\n            &lt;key&gt;<span class=\"type\">UIPrerenderedIcon<\/span>&lt;\/key&gt;\n            &lt;<span class=\"keyword\">false<\/span>\/&gt;\n        &lt;\/dict&gt;\n    &lt;\/dict&gt;\n&lt;\/dict&gt;\n<\/code><\/pre><p>You'll notice that I added my primary icon twice, once as the <code>CFBundlePrimaryIcon<\/code> and once as a <code>CFBundleAlternateIcon<\/code>. I did this for a reason that you'll find out soon enough, but it's not necessary. I find it easier to search just for alternate icons during my function that gathers all available icons. Feel free to edit this piece of code as you see fit.<\/p><p>As you can see, all the dictionaries can get messy so it's much easier to add each icon in source code instead of the property list. However, when you are finished your expanded property list should look something like this.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/15\/15-01.png\" alt=\"Final property list with icons added\" width=\"800\"\/><p>Go ahead and run your code and make sure it compiles. You should see the default icon as your app icon currently.<\/p><h4>Getting available icons<\/h4><p>We aren't going to make a beautiful UI or anything here, just a simple picker that shows a list of icons that the user can choose from. Let's start by creating the following.<\/p><ol><li>A string array that holds the name of our app icons. Default will be just our primary icon<\/li><\/ol><ol start=\"2\"><li>A string variable that holds our selected icon. Default will be our primary icon.<\/li><\/ol><ol start=\"3\"><li>A VStack that contains a Picker that shows us our string array and string variable of available\/selected icon.<\/li><\/ol><p>Edit your content view to look like this:<\/p><pre><code><span class=\"keyword\">struct<\/span> ContentView: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">@State private var<\/span> appIcons = [<span class=\"string\">\"redBlack\"<\/span>]\n    <span class=\"keyword\">@State private var<\/span> selectedIcon = <span class=\"string\">\"redBlack\"<\/span>\n    \n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">VStack<\/span> {\n            <span class=\"type\">Picker<\/span>(<span class=\"string\">\"Choose your app icon\"<\/span>, selection: $selectedIcon) {\n                <span class=\"type\">ForEach<\/span>(appIcons, id: \\.<span class=\"keyword\">self<\/span>) {\n                    <span class=\"type\">Text<\/span>($0)\n                }\n            }\n        }\n    }\n}\n<\/code><\/pre><p>Now, this does nothing interesting yet because we haven't actually done anything to see our available icons. You can add your icons to the array above if you'd like, but then if you ever add\/remove an icon from your plist you have to edit this array, too. When writing code you want to only ever have to edit things in one place. Let's create an extension on our bundle that returns an array of possible choices we can use.<\/p><p>You can do this however you'd like with either a function or variable, but I'm going to go with the route of creating a static variable. It will never be null because I'll set an empty array to return and only append any app icons that we can find. Let's get started by adding the following code:<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Bundle<\/span> {\n    <span class=\"keyword\">static var<\/span> appIcons: [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">var<\/span> availableIcons = [<span class=\"type\">String<\/span>]()\n        \n        <span class=\"keyword\">return<\/span> availableIcons\n    }\n}\n<\/code><\/pre><p>Searching through a bunch of dictionaries can get complicated, but I've tried to make it as easy as possible. Some people may disagree with my methods because I don't always check that an image exists. But my thought is since it's bundled in your source code and identified from the property list, there is no way that can be bad once your app is shipped. If it is, you've messed up enough where it's probably not even a good idea to have your app available to download. Since they are static files you can create tests that prevent you from deploying if they fail.<\/p><p>The first thing we will do is get a full dictionary of our info.plist. If we can't get that, throw an error because something is horribly wrong.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Bundle<\/span> {\n    <span class=\"keyword\">static var<\/span> appIcons: [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">var<\/span> availableIcons = [<span class=\"type\">String<\/span>]()\n        \n        <span class=\"keyword\">guard let<\/span> dictionary = <span class=\"type\">Bundle<\/span>.<span class=\"property\">main<\/span>.<span class=\"property\">infoDictionary<\/span> <span class=\"keyword\">else<\/span> {\n            <span class=\"call\">fatalError<\/span>(<span class=\"string\">\"Could not get dictionary!\"<\/span>)\n        }\n        <span class=\"keyword\">return<\/span> availableIcons\n    }\n}\n<\/code><\/pre><p>Then we will grab all of our icons from that dictionary. Remember, we wrapped them all in a dictionary of their own with a key of <code>CFBundleIcons<\/code>.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Bundle<\/span> {\n    <span class=\"keyword\">static var<\/span> appIcons: [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">var<\/span> availableIcons = [<span class=\"type\">String<\/span>]()\n        \n        <span class=\"keyword\">guard let<\/span> dictionary = <span class=\"type\">Bundle<\/span>.<span class=\"property\">main<\/span>.<span class=\"property\">infoDictionary<\/span> <span class=\"keyword\">else<\/span> {\n            <span class=\"call\">fatalError<\/span>(<span class=\"string\">\"Could not get dictionary!\"<\/span>)\n        }\n        \n        <span class=\"keyword\">if let<\/span> icons = dictionary[<span class=\"string\">\"CFBundleIcons\"<\/span>] <span class=\"keyword\">as<\/span>? [<span class=\"type\">String<\/span>: <span class=\"type\">Any<\/span>] {\n            \n        }\n        \n        <span class=\"keyword\">return<\/span> availableIcons\n    }\n}\n<\/code><\/pre><p>Here's what I do. Instead of trying to append the primary icon and also the alternate icons, I just look for the alternate icons and add all of those. This is the reason I add my primary icon as an alternate icon as well.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Bundle<\/span> {\n    <span class=\"keyword\">static var<\/span> appIcons: [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">var<\/span> availableIcons = [<span class=\"type\">String<\/span>]()\n        \n        <span class=\"keyword\">guard let<\/span> dictionary = <span class=\"type\">Bundle<\/span>.<span class=\"property\">main<\/span>.<span class=\"property\">infoDictionary<\/span> <span class=\"keyword\">else<\/span> {\n            <span class=\"call\">fatalError<\/span>(<span class=\"string\">\"Could not get dictionary!\"<\/span>)\n        }\n        \n        <span class=\"keyword\">if let<\/span> icons = dictionary[<span class=\"string\">\"CFBundleIcons\"<\/span>] <span class=\"keyword\">as<\/span>? [<span class=\"type\">String<\/span>: <span class=\"type\">Any<\/span>] {\n            <span class=\"keyword\">if let<\/span> alternateIcons = icons[<span class=\"string\">\"CFBundleAlternateIcons\"<\/span>] <span class=\"keyword\">as<\/span>? [<span class=\"type\">String<\/span>: <span class=\"type\">Any<\/span>] {\n                \n            }\n        }\n        \n        <span class=\"keyword\">return<\/span> availableIcons\n    }\n}\n<\/code><\/pre><p>And here is the part that some people may not agree with it. If we get <code>alternateIcons<\/code> then I just go ahead and add the key to our <code>availableIcons<\/code> array. Yes, it's possible that our images are not in our list, but once again, these items should <em>never<\/em> change once the app is shipped. If you write excellent XCTests to cover each icon then you'll be safe once the app is on the app store.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Bundle<\/span> {\n    <span class=\"keyword\">static var<\/span> appIcons: [<span class=\"type\">String<\/span>] {\n        <span class=\"keyword\">var<\/span> availableIcons = [<span class=\"type\">String<\/span>]()\n        \n        <span class=\"keyword\">guard let<\/span> dictionary = <span class=\"type\">Bundle<\/span>.<span class=\"property\">main<\/span>.<span class=\"property\">infoDictionary<\/span> <span class=\"keyword\">else<\/span> {\n            <span class=\"call\">fatalError<\/span>(<span class=\"string\">\"Could not get dictionary!\"<\/span>)\n        }\n        \n        <span class=\"keyword\">if let<\/span> icons = dictionary[<span class=\"string\">\"CFBundleIcons\"<\/span>] <span class=\"keyword\">as<\/span>? [<span class=\"type\">String<\/span>: <span class=\"type\">Any<\/span>] {\n            <span class=\"keyword\">if let<\/span> alternateIcons = icons[<span class=\"string\">\"CFBundleAlternateIcons\"<\/span>] <span class=\"keyword\">as<\/span>? [<span class=\"type\">String<\/span>: <span class=\"type\">Any<\/span>] {\n                <span class=\"keyword\">for<\/span> (key, <span class=\"keyword\">_<\/span>) <span class=\"keyword\">in<\/span> alternateIcons {\n                    availableIcons.<span class=\"call\">append<\/span>(key)\n                }\n            }\n        }\n        \n        <span class=\"keyword\">return<\/span> availableIcons\n    }\n}\n<\/code><\/pre><p>Let's now head back up to our <code>ContentView<\/code> and add an <code>.onAppear()<\/code> method to our <code>VStack<\/code>. We will use our bundle extension to set our app icons from our plist as soon as the screen appears.<\/p><pre><code><span class=\"keyword\">struct<\/span> ContentView: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">@State private var<\/span> appIcons = [<span class=\"string\">\"redBlack\"<\/span>]\n    <span class=\"keyword\">@State private var<\/span> selectedIcon = <span class=\"string\">\"redBlack\"<\/span>\n    \n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">VStack<\/span> {\n            <span class=\"type\">Picker<\/span>(<span class=\"string\">\"Choose your app icon\"<\/span>, selection: $selectedIcon) {\n                <span class=\"type\">ForEach<\/span>(appIcons, id: \\.<span class=\"keyword\">self<\/span>) {\n                    <span class=\"type\">Text<\/span>($0)\n                }\n            }\n        }.<span class=\"call\">onAppear<\/span>(perform: {\n            appIcons = <span class=\"type\">Bundle<\/span>.<span class=\"property\">appIcons<\/span>\n        })\n    }\n}\n<\/code><\/pre><p>Go ahead and test your app, you should be able to add and remove icons from your plist without editing anything else in your code.<\/p><h4>Changing your app icon on selection<\/h4><p>We are nearly finished now. You can launch your app and see the list of available icons. Now we just need to do something when the user changes the picker value. This is as easy as adding an <code>.onReceive<\/code> method to the end of your picker. Our publisher will be our selected icon variable and our closure will attempt to set the app icon using <code>UIApplication.shared.setAlternateIconName()<\/code>. We will attempt to catch an error and react accordingly. Edit your <code>ContentView<\/code> to look like this:<\/p><pre><code><span class=\"keyword\">struct<\/span> ContentView: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">@State private var<\/span> appIcons = [<span class=\"string\">\"redBlack\"<\/span>]\n    <span class=\"keyword\">@State private var<\/span> selectedIcon = <span class=\"string\">\"redBlack\"<\/span>\n    \n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">VStack<\/span> {\n            <span class=\"type\">Picker<\/span>(<span class=\"string\">\"Choose your app icon\"<\/span>, selection: $selectedIcon) {\n                <span class=\"type\">ForEach<\/span>(appIcons, id: \\.<span class=\"keyword\">self<\/span>) {\n                    <span class=\"type\">Text<\/span>($0)\n                }\n            }.<span class=\"call\">onReceive<\/span>([<span class=\"keyword\">self<\/span>.<span class=\"property\">selectedIcon<\/span>].publisher.<span class=\"call\">first<\/span>()) { (value) <span class=\"keyword\">in<\/span>\n                <span class=\"type\">UIApplication<\/span>.<span class=\"property\">shared<\/span>.<span class=\"call\">setAlternateIconName<\/span>(selectedIcon) { error <span class=\"keyword\">in\n                    if let<\/span> error = error {\n                        <span class=\"call\">print<\/span>(<span class=\"string\">\"Error setting icon!<\/span> \\(error.<span class=\"property\">localizedDescription<\/span>)<span class=\"string\">\"<\/span>)\n                    } <span class=\"keyword\">else<\/span> {\n                        <span class=\"call\">print<\/span>(<span class=\"string\">\"Successfully set icon\"<\/span>)\n                    }\n                }\n            }\n        }.<span class=\"call\">onAppear<\/span>(perform: {\n            appIcons = <span class=\"type\">Bundle<\/span>.<span class=\"property\">appIcons<\/span>\n        })\n    }\n}\n<\/code><\/pre><p>Go ahead and run your app! You should be able to scroll through the picker and see a message that you set your new icon.<\/p><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/15\/15-02.png\" alt=\"New icon selected message\" width=\"800\"\/><h3>Conclusion<\/h3><p>I hope I helped you learn something new today with Swift and iOS development. Giving the user ability to change your app icon may seem small, but many people LOVE being able to organize their home screen by colors. App icons are also a way to implement in-app purchases that may earn you a few extra bucks.<\/p><p>There are many ways you can improve on this. One way is by adding tests to ensure your app icons are always available before you deploy your app. If you don't want to add tests, I suggest finding a place to look for your image and make sure it exists before trying to allow users to change the icon in your app. You can also display your options to the user differently. Right now, it's just a Picker view with some text. It may be better to show an HStack or VStack of images so the user can see them prior to selecting them.<\/p><p>If you'd like to find the source code for this project you can do so <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-SwiftUI\">here<\/a>.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/14-how-to-use-core-location<\/guid><title>Getting started with Core Location<\/title><description>Learn how to implement Core Location in your app<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/14-how-to-use-core-location<\/link><pubDate>Fri, 2 Apr 2021 12:05:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Getting started with Core Location<\/h1><div class=\"post-tags\" markdown=\"1\">\n    <a class=\"post-category post-category-swiftui\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/swiftui\">swiftui<\/a>\n    <a class=\"post-category post-category-corelocation\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/corelocation\">Core Location<\/a>\n    <a class=\"post-category post-category-closures\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/closures\">Closures<\/a>\n<\/div><h3>Introduction<\/h3><p><a href=\"https:\/\/developer.apple.com\/documentation\/corelocation\/\">Core Location<\/a> is a very useful framework that Apple provides for us that is fairly easy to use in your own apps. Core Location allows you to program the device to determine the user's location. As you can imagine, this can be a privacy issue and Apple takes privacy very seriously so you will need to let the user know why you are tracking their location and they must accept it. You need to be thinking about this when you write your code because you can't expect every single one of your users to allow themselves to be tracked. This means you need to write your code to handle what happens when a user declines.<\/p><h3>Getting Started<\/h3><p>We are going to write a very simple app using SwiftUI that tells us our location with a button tap. Start a new SwiftUI project now. We will create a few properties to get us started. One property will be a bool to determine if our location is successfully retrieved or not. The second property will be an empty string that will hold our coordinates.<\/p><pre><code><span class=\"keyword\">@State private var<\/span> locationRetrieved = <span class=\"keyword\">false\n@State private var<\/span> coordinates: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n<\/code><\/pre><p>Then we can create a button that allows the user to tap to determine their location as well as a Text() that will display location if it's been retrieved. Go ahead and wrap this in a VStack.<\/p><pre><code><span class=\"type\">VStack<\/span>(spacing: <span class=\"number\">10<\/span>) {\n    <span class=\"type\">Button<\/span>(<span class=\"string\">\"Show location\"<\/span>) {\n        <span class=\"comment\">\/\/ get location<\/span>\n    }\n    \n    <span class=\"keyword\">if<\/span> locationRetrieved {\n        <span class=\"type\">Text<\/span>(<span class=\"string\">\"Your coordinates are:<\/span> \\(coordinates)<span class=\"string\">\"<\/span>)\n    }\n}\n<\/code><\/pre><p>When you're finished <code>ContentView<\/code> will look like this:<\/p><pre><code><span class=\"keyword\">struct<\/span> ContentView: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">@State private var<\/span> locationRetrieved = <span class=\"keyword\">false\n    @State private var<\/span> coordinates: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n    \n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">VStack<\/span>(spacing: <span class=\"number\">10<\/span>) {\n            <span class=\"type\">Button<\/span>(<span class=\"string\">\"Show location\"<\/span>) {\n                <span class=\"comment\">\/\/ get location<\/span>\n            }\n            \n            <span class=\"keyword\">if<\/span> locationRetrieved {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Your coordinates are:<\/span> \\(coordinates)<span class=\"string\">\"<\/span>)\n            }\n        }\n    }\n}\n<\/code><\/pre><p>Right now you can run your app and tap the button, but nothing interesting happens yet. Create a new Swift file called <code>CoreLocationManager<\/code> that will handle everything involving Core Location for us. To get started import the CoreLocation framework and make a <code>CoreLocationManager<\/code> class that inherits from <code>NSObject<\/code> and <code>CLLocationManagerDelegate<\/code>:<\/p><pre><code><span class=\"keyword\">import<\/span> CoreLocation\n\n<span class=\"keyword\">class<\/span> CoreLocationManager: <span class=\"type\">NSObject<\/span>, <span class=\"type\">CLLocationManagerDelegate<\/span> {    \n\n}\n<\/code><\/pre><p>This class needs to hold a property of <code>CLLocationManager()<\/code> that will be used for nearly everything related to Core Location. Add the following as a class variable.<\/p><pre><code><span class=\"keyword\">private var<\/span> locationManager = <span class=\"type\">CLLocationManager<\/span>()\n<\/code><\/pre><p>And now it's time for our first function. The first function we will write will set our <code>locationManager<\/code> delegate, set our desired accuracy, then allow the location manager to start determining the user's location. Add this function to your class.<\/p><pre><code><span class=\"keyword\">func<\/span> determineCurrentLocation() {\n    locationManager.<span class=\"property\">delegate<\/span> = <span class=\"keyword\">self<\/span>\n    locationManager.<span class=\"property\">desiredAccuracy<\/span> = kCLLocationAccuracyBest\n    locationManager.<span class=\"call\">requestWhenInUseAuthorization<\/span>()\n    \n    <span class=\"keyword\">if<\/span> <span class=\"type\">CLLocationManager<\/span>.<span class=\"call\">locationServicesEnabled<\/span>() {\n        locationManager.<span class=\"call\">startUpdatingLocation<\/span>()\n    }\n}\n<\/code><\/pre><p>For reference, your <code>CoreLocationManager<\/code> should look like this:<\/p><pre><code><span class=\"keyword\">import<\/span> CoreLocation\n\n<span class=\"keyword\">class<\/span> CoreLocationManager: <span class=\"type\">NSObject<\/span>, <span class=\"type\">CLLocationManagerDelegate<\/span> {\n    <span class=\"keyword\">private var<\/span> locationManager = <span class=\"type\">CLLocationManager<\/span>()\n    \n    <span class=\"keyword\">func<\/span> determineCurrentLocation() {\n        locationManager.<span class=\"property\">delegate<\/span> = <span class=\"keyword\">self<\/span>\n        locationManager.<span class=\"property\">desiredAccuracy<\/span> = kCLLocationAccuracyBest\n        locationManager.<span class=\"call\">requestWhenInUseAuthorization<\/span>()\n        \n        <span class=\"keyword\">if<\/span> <span class=\"type\">CLLocationManager<\/span>.<span class=\"call\">locationServicesEnabled<\/span>() {\n            locationManager.<span class=\"call\">startUpdatingLocation<\/span>()\n        }\n    }\n}\n<\/code><\/pre><p>Perfect! Now we can go back to our ContentView and allow the button to determine our location. First, add a reference to our new class.<\/p><pre><code><span class=\"keyword\">private let<\/span> coreLocationManager = <span class=\"type\">CoreLocationManager<\/span>()\n<\/code><\/pre><p>Then, replace <code>\/\/ get location<\/code> with <code>coreLocationManager.determineCurrentLocation<\/code>. Go ahead and run your app and tap the button to determine your location.<\/p><p>Uh oh, it didn't work? Remember how I said that Apple takes privacy seriously? This is one of the ways this happens. You haven't yet told the user why you want to access their location. You can even see a warning in the console that looks like this:<\/p><pre><code><span class=\"number\">2021<\/span>-<span class=\"number\">04<\/span>-<span class=\"number\">02 18<\/span>:<span class=\"number\">16<\/span>:<span class=\"number\">42.421676<\/span>-<span class=\"number\">0600<\/span> <span class=\"type\">How<\/span>-<span class=\"type\">To<\/span>-<span class=\"type\">Use<\/span>-<span class=\"type\">Core<\/span>-<span class=\"type\">Location<\/span>[<span class=\"number\">4182<\/span>:<span class=\"number\">132602<\/span>] <span class=\"type\">This<\/span> app has attempted to access privacy-sensitive data without a usage description. <span class=\"type\">The<\/span> app's <span class=\"type\">Info<\/span>.<span class=\"property\">plist<\/span> must contain an “<span class=\"type\">NSLocationWhenInUseUsageDescription<\/span>” key with a string value explaining to the user how the app uses this data\n<\/code><\/pre><p>This is easily handled in the <code>.plist<\/code> file of your project. Add the following key-value.<\/p><pre><code><span class=\"type\">Key<\/span>: <span class=\"type\">Privacy<\/span> - <span class=\"type\">Location When In Use Usage Description\nValue<\/span>: <span class=\"type\">Please<\/span> give us authorization to access your location so we can tell you your location\n<\/code><\/pre><p>The value can say anything you want, but if it's not descriptive enough then Apple will reject your app from the app store.<\/p><p>Great, now you can run your app, tap the button, and see apple's built-in alert that will attempt to obtain confirmation from the user.<\/p><p>Next, you'll see that your <code>Text<\/code> isn't updated. The first reason is that we never toggled the boolean to allow it to show. The second reason is that we've only asked the app to update the location, but we never actually <em>get<\/em> that location. Let's head back over to <code>CoreLocationManager<\/code> and create a new function to return a coordinate. It's possible that we aren't able to get the user's location, so we need to make sure the return value is optional. Create the following function:<\/p><pre><code><span class=\"keyword\">func<\/span> getCurrentLocation() -&gt; <span class=\"type\">CLLocationCoordinate2D<\/span>? {\n    <span class=\"call\">determineCurrentLocation<\/span>()\n    \n    <span class=\"keyword\">return<\/span> locationManager.<span class=\"property\">location<\/span>?.<span class=\"property\">coordinate<\/span>\n}\n<\/code><\/pre><p>This will allow the device to use the previous function we created, then return the coordinate if it can be found. Head back over to <code>ContentView.swift<\/code> and edit what your button does to this:<\/p><pre><code><span class=\"call\">determineLocation<\/span>()\n<\/code><\/pre><p>Now we need to create this function (still in <code>ContentView.swift<\/code>) which will do a few things. First, it will use our core location manager to get our current location. If we get a nil value, let's bail out and set our <code>locationRetrieved<\/code> variable to false. If we succeed let's break apart our longitude and latitude, update our coordinates text, then toggle our <code>locationRetrieved<\/code> variable to true.<\/p><pre><code><span class=\"keyword\">func<\/span> determineLocation() {\n    <span class=\"keyword\">guard let<\/span> location = coreLocationManager.<span class=\"call\">getCurrentLocation<\/span>() <span class=\"keyword\">else<\/span> {\n        locationRetrieved = <span class=\"keyword\">false\n        return<\/span>\n    }\n    <span class=\"keyword\">let<\/span> latitude = location.<span class=\"property\">latitude<\/span>\n    <span class=\"keyword\">let<\/span> longitude = location.<span class=\"property\">longitude<\/span>\n    coordinates = <span class=\"string\">\"<\/span>\\(latitude)<span class=\"string\">,<\/span> \\(longitude)<span class=\"string\">\"<\/span>\n    locationRetrieved = <span class=\"keyword\">true<\/span>\n}\n<\/code><\/pre><p>Voila! You should now see your location appear in your app. Note that if you are using a simulator then you'll need to ensure there is a location enabled. This can be done by going to Features -&gt; Location, and selecting one of the locations that is on the list. Simulators always default to none, so there's a high chance you'll need to do this.<\/p><h3>Extending past coordinates<\/h3><p>Core location is very powerful. It can do more than just determine your exact coordinates (which is a bit creepy), but it can even tell you the city, state, and address of where you. Let's create a new function inside <code>CoreLocationManager.swift<\/code>.<\/p><p>We are going to do the same thing as we did before by adding a bool, address string, new function to get address from <code>ContentView.swift<\/code> and a new function to get your address in <code>CoreLocationManager.swift<\/code>. Edit your <code>ContentView<\/code> to this:<\/p><pre><code><span class=\"keyword\">struct<\/span> ContentView: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">@State private var<\/span> locationRetrieved = <span class=\"keyword\">false\n    @State private var<\/span> addressRetrieved = <span class=\"keyword\">false\n    @State private var<\/span> coordinates: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n    <span class=\"keyword\">@State private var<\/span> address: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n    <span class=\"keyword\">private let<\/span> coreLocationManager = <span class=\"type\">CoreLocationManager<\/span>()\n    \n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">VStack<\/span>(spacing: <span class=\"number\">10<\/span>) {\n            <span class=\"type\">Button<\/span>(<span class=\"string\">\"Show location\"<\/span>) {\n                <span class=\"call\">determineLocation<\/span>()\n            }\n            \n            <span class=\"keyword\">if<\/span> locationRetrieved {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Your coordinates are:<\/span> \\(coordinates)<span class=\"string\">\"<\/span>)\n            }\n            \n            <span class=\"type\">Button<\/span>(<span class=\"string\">\"Show address\"<\/span>) {\n                <span class=\"call\">showAddress<\/span>()\n            }\n            \n            <span class=\"keyword\">if<\/span> addressRetrieved {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Your address is:<\/span> \\(address)<span class=\"string\">\"<\/span>)\n            }\n        }\n    }\n    \n    <span class=\"keyword\">func<\/span> determineLocation() {\n        <span class=\"keyword\">guard let<\/span> location = coreLocationManager.<span class=\"call\">getCurrentLocation<\/span>() <span class=\"keyword\">else<\/span> {\n            locationRetrieved = <span class=\"keyword\">false\n            return<\/span>\n        }\n        <span class=\"keyword\">let<\/span> latitude = location.<span class=\"property\">latitude<\/span>\n        <span class=\"keyword\">let<\/span> longitude = location.<span class=\"property\">longitude<\/span>\n        coordinates = <span class=\"string\">\"<\/span>\\(latitude)<span class=\"string\">,<\/span> \\(longitude)<span class=\"string\">\"<\/span>\n        locationRetrieved = <span class=\"keyword\">true<\/span>\n    }\n    \n    <span class=\"keyword\">func<\/span> showAddress() {\n        coreLocationManager.<span class=\"call\">getAddress<\/span> { returnedAddress <span class=\"keyword\">in\n            guard let<\/span> unwrappedAddress = returnedAddress <span class=\"keyword\">else<\/span> {\n                addressRetrieved = <span class=\"keyword\">false\n                return<\/span>\n            }\n\n            address = unwrappedAddress\n            addressRetrieved = <span class=\"keyword\">true<\/span>\n            \n        }\n        \n    }\n    \n}\n<\/code><\/pre><p>You'll notice something different with our <code>showAddress<\/code> function. When we use Core Location to get our address it will run in the background and return our information in a closure. So we need a completion handler to handle this for us. Not too difficult if you're familiar with closures, but it's a bit strange if you're not used to it. We also need to write our <code>coreLocationManager<\/code> function to return an escaping completion handler, because it may take a while to get the information back. When I say it may take a while, I mean in computer terms. It will be near-instantaneous from your perspective.<\/p><p>Let's write our <code>getAddress<\/code> function now in <code>CoreLocationManager.swift<\/code>. We need to first get our user's coordinates (which we already made a function for), then create a <code>CLLocation<\/code> object out of it. Then we need to create an instance of <code>CLGeocoder<\/code> and use reverse geocoding in order to get obtain something called <em>placemarks<\/em>. We can get an error here, so we first need to check if an error exists. If it does, just return your completion as nil. If not, check if placemarks exist (they should, but it's always good to be safe and prevent app crashes). If placemarks exist, we need to make sure we actually have some. It is possible to get more than one, but in this case, we just want to take the first one. I use a lot of <code>guard<\/code> statements, but feel free to unwrap however it makes you happy. Each placemark has different values that mean different things that may not make sense to you if you've never done this. The street address is called <em>name<\/em>, the city is called <em>locality<\/em>, and the state is called <em>administrative area<\/em>. Unwrap all of these, append it into one string, then return that string as your completion.<\/p><pre><code><span class=\"keyword\">func<\/span> getAddress(completion: <span class=\"keyword\">@escaping<\/span> (<span class=\"type\">String<\/span>?) -&gt; <span class=\"type\">Void<\/span>) {\n    <span class=\"keyword\">guard let<\/span> coordinates = <span class=\"call\">getCurrentLocation<\/span>() <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n    <span class=\"keyword\">let<\/span> location = <span class=\"type\">CLLocation<\/span>(latitude: coordinates.<span class=\"property\">latitude<\/span>, longitude: coordinates.<span class=\"property\">longitude<\/span>)\n    \n    <span class=\"keyword\">let<\/span> geocoder = <span class=\"type\">CLGeocoder<\/span>()\n    geocoder.<span class=\"call\">reverseGeocodeLocation<\/span>(location) { placemarks, error <span class=\"keyword\">in\n        if<\/span> error != <span class=\"keyword\">nil<\/span> {\n            <span class=\"call\">print<\/span>(<span class=\"string\">\"Error:<\/span> \\(error)<span class=\"string\">\"<\/span>)\n            <span class=\"call\">completion<\/span>(<span class=\"keyword\">nil<\/span>)\n        }\n        \n        <span class=\"keyword\">if<\/span> placemarks != <span class=\"keyword\">nil<\/span> {\n            <span class=\"keyword\">guard let<\/span> first = placemarks?.<span class=\"property\">first<\/span> <span class=\"keyword\">else<\/span> {\n                <span class=\"call\">completion<\/span>(<span class=\"keyword\">nil<\/span>)\n                <span class=\"keyword\">return<\/span>\n            }\n            \n            <span class=\"keyword\">guard let<\/span> street = first.<span class=\"property\">name<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n            <span class=\"keyword\">guard let<\/span> city = first.<span class=\"property\">locality<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n            <span class=\"keyword\">guard let<\/span> state = first.<span class=\"property\">administrativeArea<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n            \n            <span class=\"call\">completion<\/span>(<span class=\"string\">\"<\/span>\\(street) \\(city)<span class=\"string\">,<\/span> \\(state)<span class=\"string\">\"<\/span>)\n        }\n    }\n}\n<\/code><\/pre><p>Give your app a go! You'd be surprised at how accurate it is.<\/p><p>I hope I helped you learn something new today with Swift and iOS development. It's great being able to implement something that is as powerful as Core Location. Try exploring other things that Core Location offers as we barely touched the surface. Or, use the basics and create your own weather app that can determine the weather near you. If you'd like to find the source code for this project you can do so <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-SwiftUI\/tree\/main\/How-To-Use-Core-Location\">here<\/a>.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-05<\/guid><title>Create a unique Valentine's Day app for your loved one - Part 5<\/title><description>This section wraps everything up as well as gives you some ideas on how you can improve your app.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-05<\/link><pubDate>Sun, 24 Jan 2021 12:09:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Create a unique Valentine's Day app for your loved one - Part 5<\/h1><div class=\"post-tags\" markdown=\"1\">\n  <a class=\"post-category post-category-labeledstatements\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/labeledstatements\">LabeledStatements<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-04\" style=\"text-decoration: none\">&larr; Adding local notifications<\/a><\/th>\n    <\/tr>\n<\/table><h3>Conclusion<\/h3><p>And there you have it. A personalized app that you can give to someone. Of course, you won't be able to put this on the app store (you could try TestFlight, but I can't guarantee that it will get approved). The easiest way is to just borrow their phone and install it directly from Xcode.<\/p><p>This is an app you can do all kinds of things with and I encourage you to add to it. Here are some suggestions:<\/p><ol><li>Go back to <a href=\"https:\/\/iosexample.com\/\">https:\/\/iosexample.com\/<\/a> and see what other cool features you want to add. There are some good label packages that can make your text different colors and flash that may be fun to try.<\/li><\/ol><ol start=\"2\"><li>Add more animations! I gave you two, but it's so easy to add more then adjust your random animation function. Try doing a slide-from-(left\/right\/top\/bottom), big-to-small, or if you're feeling crazy, a nice spin animation! Remember, once you write them you can easily use them in the rest of your projects.<\/li><\/ol><ol start=\"3\"><li>If you haven't noticed, there are a few things that could be improved and written better. One thing that that comes to mind is hardcoding the UserDefault strings. See if you can figure out a way to create a variable to use across all classes. You can make static variables, create custom structs, or create some type of extension. It's really up to you.<\/li><\/ol><ol start=\"4\"><li>You may want to also clean up your view controller and separate your table view into multiple files. If you're interested in that and don't know I have an article on that <a href=\"https:\/\/theswiftprotocol.com\/posts\/11-how-to-seprate-tableview-views-and-datasource\/\">here<\/a>.<\/li><\/ol><ol start=\"5\"><li>Something you really should do is add an app icon. I used one of the images I used in my compliments, but feel free to get creative with it.<\/li><\/ol><ol start=\"6\"><li>Build on this app to create something entirely different. Maybe you have a kid that likes to read at night, but you don't want them staying up super late. Many avid readers know how easy it is to get sucked into a good story. You could create a story and release a \"chapter\" a night. This can help promote reading while also keeping a healthy sleep schedule.<\/li><\/ol><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-04\" style=\"text-decoration: none\">&larr; Adding local notifications<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-04<\/guid><title>Create a unique Valentine's Day app for your loved one - Part 4<\/title><description>This section adds local notifications to your app.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-04<\/link><pubDate>Sun, 24 Jan 2021 12:08:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Create a unique Valentine's Day app for your loved one - Part 4<\/h1><div class=\"post-tags\" markdown=\"1\">\n  <a class=\"post-category post-category-localnotifications\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/localnotifications\">LocalNotifications<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-03\" style=\"text-decoration: none\">&larr; Animations and UserDefaults<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-05\" style=\"text-decoration: none\">Conclusion &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Adding local notifications<\/h3><p>Now that we have our app configured how we want, we need to add local notifications. This means every day the user will get a reminder to open the app and see the next thing you love about them.<\/p><p>I think it's best to separate your local notification in one class by itself. So, create a new swift file called <code>NotificationManager.swift<\/code>. UserNotifications can be complicated, so I'll just paste the entire file and comment out what's happening in each step:<\/p><pre><code><span class=\"keyword\">import<\/span> Foundation\n<span class=\"keyword\">import<\/span> UserNotifications\n\n<span class=\"keyword\">class<\/span> NotificationManager {\n    \n    <span class=\"comment\">\/\/ This will be the function we call in order to register local notifications for the user<\/span>\n    <span class=\"keyword\">func<\/span> registerLocal() {\n        <span class=\"keyword\">let<\/span> center = <span class=\"type\">UNUserNotificationCenter<\/span>.<span class=\"call\">current<\/span>()\n        \n        <span class=\"comment\">\/\/ If we are at the end of the list, stop scheduling notifications<\/span>\n        <span class=\"keyword\">let<\/span> maxDay = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">integer<\/span>(forKey: <span class=\"string\">\"maxDay\"<\/span>)\n        <span class=\"keyword\">let<\/span> totalCompliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>.<span class=\"property\">count<\/span> - <span class=\"number\">1<\/span>\n\n        <span class=\"comment\">\/\/ If we are at the maximum number of compliments, stop sending notifications!<\/span>\n        <span class=\"keyword\">if<\/span> maxDay == totalCompliments {\n            center.<span class=\"call\">removeAllPendingNotificationRequests<\/span>()\n            <span class=\"keyword\">return<\/span>\n        }\n        \n        <span class=\"comment\">\/\/ If we made it here then we still have more compliments to go. Ask the user for permission and if they grant, schedule the notifications.<\/span>\n        center.<span class=\"call\">requestAuthorization<\/span>(options: [.<span class=\"dotAccess\">alert<\/span>, .<span class=\"dotAccess\">badge<\/span>, .<span class=\"dotAccess\">sound<\/span>]) {\n            granted, error <span class=\"keyword\">in\n            if<\/span> granted {\n                <span class=\"keyword\">self<\/span>.<span class=\"call\">scheduleLocal<\/span>()\n            } <span class=\"keyword\">else<\/span> {\n                <span class=\"call\">print<\/span>(<span class=\"string\">\"User denied permission!\"<\/span>)\n            }\n        }\n        \n        <span class=\"call\">registerCateories<\/span>()\n    }\n    \n    <span class=\"comment\">\/\/ This function is what shows then the user gets the notification and swipes down.<\/span>\n    <span class=\"keyword\">func<\/span> registerCateories() {\n        <span class=\"keyword\">let<\/span> center = <span class=\"type\">UNUserNotificationCenter<\/span>.<span class=\"call\">current<\/span>()\n\n        <span class=\"keyword\">let<\/span> show = <span class=\"type\">UNNotificationAction<\/span>(identifier: <span class=\"string\">\"show\"<\/span>, title: <span class=\"string\">\"Okay, tell me!\"<\/span>, options: .<span class=\"dotAccess\">foreground<\/span>)\n        <span class=\"keyword\">let<\/span> category = <span class=\"type\">UNNotificationCategory<\/span>(identifier: <span class=\"string\">\"alarm\"<\/span>, actions: [show], intentIdentifiers: [], options: [])\n        center.<span class=\"call\">setNotificationCategories<\/span>([category])\n    }\n    \n    <span class=\"comment\">\/\/ This is what the notification will say to the user<\/span>\n    <span class=\"keyword\">func<\/span> scheduleLocal() {\n        <span class=\"call\">registerCateories<\/span>()\n        <span class=\"keyword\">let<\/span> center = <span class=\"type\">UNUserNotificationCenter<\/span>.<span class=\"call\">current<\/span>()\n        <span class=\"comment\">\/\/ It's a good idea to remove any pending notifications before we schedule more.<\/span>\n        center.<span class=\"call\">removeAllPendingNotificationRequests<\/span>()\n        \n        <span class=\"keyword\">let<\/span> content = <span class=\"type\">UNMutableNotificationContent<\/span>()\n        content.<span class=\"property\">title<\/span> = <span class=\"string\">\"I love you!\"<\/span>\n        content.<span class=\"property\">body<\/span> = <span class=\"string\">\"Come see the next thing I love about you!\"<\/span>\n        content.<span class=\"property\">categoryIdentifier<\/span> = <span class=\"string\">\"alarm\"<\/span>\n        content.<span class=\"property\">sound<\/span> = .<span class=\"dotAccess\">default<\/span>\n        \n        <span class=\"comment\">\/\/ When do you want to show it. This will notify the user at 8:00 am every morning.<\/span> \n        <span class=\"keyword\">var<\/span> dateComponents = <span class=\"type\">DateComponents<\/span>()\n        dateComponents.<span class=\"property\">hour<\/span> = <span class=\"number\">8<\/span>\n        dateComponents.<span class=\"property\">minute<\/span> = <span class=\"number\">0<\/span>\n        <span class=\"keyword\">let<\/span> trigger = <span class=\"type\">UNCalendarNotificationTrigger<\/span>(dateMatching: dateComponents, repeats: <span class=\"keyword\">true<\/span>)\n        <span class=\"keyword\">let<\/span> requests = <span class=\"type\">UNNotificationRequest<\/span>(identifier: <span class=\"type\">UUID<\/span>().<span class=\"property\">uuidString<\/span>, content: content, trigger: trigger)\n        center.<span class=\"call\">add<\/span>(requests)\n    }\n}\n<\/code><\/pre><p>Then, in <code>viewDidLoad<\/code> of <code>ComplimentViewController.swift<\/code> add the following line at the end:<\/p><pre><code><span class=\"type\">NotificationManager<\/span>().<span class=\"call\">registerLocal<\/span>()\n<\/code><\/pre><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-03\" style=\"text-decoration: none\">&larr; Animations and UserDefaults<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-05\" style=\"text-decoration: none\">Conclusion &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-03<\/guid><title>Create a unique Valentine's Day app for your loved one - Part 3<\/title><description>This section focuses on adding animations and limiting the number of compliments that can be viewed on any given day.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-03<\/link><pubDate>Sun, 24 Jan 2021 12:07:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Create a unique Valentine's Day app for your loved one - Part 3<\/h1><div class=\"post-tags\" markdown=\"1\">\n  <a class=\"post-category post-category-animations\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/animations\">Animations<\/a>\n  <a class=\"post-category post-category-dates\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/dates\">Dates<\/a>\n  <a class=\"post-category post-category-userdefaults\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/userdefaults\">UserDefaults<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-02\" style=\"text-decoration: none\">&larr; Displaying Data and User Interaction<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-04\" style=\"text-decoration: none\">Adding local notifications &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Adding animations<\/h3><p>Many people would agree that animations make apps more appealing. Let's figure out how we can do that here. Let's start by creating a new animation factory class so it's reusable for your other apps. Create a new swift file called <code>AnimationFactory.swift<\/code>. Let's create a function to animate our alpha component. The function will take three parameters, one for the uiview to animate, the duration of the animation, and the delay. You can hardcode these values if you want, but as I said before, this helps you reuse this class in other projects. Change your <code>AnimationFactory.Swift<\/code> to this:<\/p><pre><code><span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">struct<\/span> AnimationFactory {\n    <span class=\"keyword\">func<\/span> animateAlphaComponent(<span class=\"keyword\">_<\/span> label: <span class=\"type\">UIView<\/span>, duration: <span class=\"type\">Double<\/span>, delay: <span class=\"type\">Double<\/span>) {\n        label.<span class=\"property\">alpha<\/span> = <span class=\"number\">0<\/span>\n        \n        <span class=\"type\">UIView<\/span>.<span class=\"call\">animate<\/span>(\n            withDuration: duration,\n            delay: delay,\n            options: .<span class=\"dotAccess\">curveEaseInOut<\/span>,\n            animations: {\n                label.<span class=\"property\">alpha<\/span> = <span class=\"number\">1<\/span>\n            })\n    }\n}\n<\/code><\/pre><p>To test it out add the following variable to your class variables in <code>ComplimentViewController.swift<\/code>:<\/p><pre><code><span class=\"keyword\">var<\/span> animationFactory: <span class=\"type\">AnimationFactory<\/span>?\n<\/code><\/pre><p>Then in <code>viewDidLoad<\/code> before you call <code>configureView()<\/code> add:<\/p><pre><code>animationFactory = <span class=\"type\">AnimationFactory<\/span>()\n<\/code><\/pre><p>Finally, at the end of <code>configureLabel()<\/code> add the following line:<\/p><pre><code>animationFactory?.<span class=\"call\">animateAlphaComponent<\/span>(label, duration: <span class=\"number\">1<\/span>, delay: <span class=\"number\">0<\/span>)\n<\/code><\/pre><p>Awesome! You have a cool animation! By why stop there....<\/p><p>Let's add an animation for our image view. Back in animation factory add the folowing code:<\/p><pre><code><span class=\"keyword\">func<\/span> animateViewSmallToBig(<span class=\"keyword\">_<\/span> view: <span class=\"type\">UIView<\/span>, duration: <span class=\"type\">Double<\/span>, delay: <span class=\"type\">Double<\/span>) {\n    view.<span class=\"property\">transform<\/span> = <span class=\"type\">CGAffineTransform<\/span>(scaleX: <span class=\"number\">0<\/span>\/<span class=\"number\">01<\/span>, y: <span class=\"number\">0.01<\/span>)\n    \n    <span class=\"type\">UIView<\/span>.<span class=\"call\">animate<\/span>(\n        withDuration: duration,\n        delay: delay,\n        options: .<span class=\"dotAccess\">curveEaseInOut<\/span>,\n        animations: {\n            view.<span class=\"property\">transform<\/span> = .<span class=\"dotAccess\">identity<\/span>\n        })\n}\n<\/code><\/pre><p>Then, at the end of <code>configureImageView<\/code> add the following line:<\/p><pre><code>animationFactory?.<span class=\"call\">animateViewSmallToBig<\/span>(imageView, duration: <span class=\"number\">1<\/span>, delay: <span class=\"number\">0<\/span>)\n<\/code><\/pre><p>Now, this is cool and all, but it can be difficult to choose which animation you want to use. I have a solution for that. Why don't we create a way to randomize which animation you want to use! Create the following function in <code>AnimationFactory.swift<\/code>:<\/p><pre><code><span class=\"keyword\">func<\/span> randomAnimation(<span class=\"keyword\">_<\/span> view: <span class=\"type\">UIView<\/span>, duration: <span class=\"type\">Double<\/span>, delay: <span class=\"type\">Double<\/span>) {\n    <span class=\"keyword\">let<\/span> random = <span class=\"type\">Int<\/span>.<span class=\"call\">random<\/span>(in: <span class=\"number\">0<\/span>...<span class=\"number\">1<\/span>)\n    \n    <span class=\"keyword\">switch<\/span> random {\n    <span class=\"keyword\">case<\/span> <span class=\"number\">0<\/span>:\n        <span class=\"call\">animateAlphaComponent<\/span>(view, duration: duration, delay: delay)\n    <span class=\"keyword\">case<\/span> <span class=\"number\">1<\/span>:\n        <span class=\"call\">animateViewSmallToBig<\/span>(view, duration: duration, delay: delay)\n    <span class=\"keyword\">default<\/span>:\n        <span class=\"call\">animateAlphaComponent<\/span>(view, duration: duration, delay: delay)\n    }\n}\n<\/code><\/pre><p>Then instead of calling each animation specifically, we can use<\/p><pre><code>animationFactory?.<span class=\"call\">randomAnimation<\/span>(label, duration: <span class=\"number\">1<\/span>, delay: <span class=\"number\">0<\/span>)\n<\/code><\/pre><p>Now when we cycle through and the animation is different every time. You can add as many animations as you'd like this way!<\/p><h3>Only showing a certain number of compliments<\/h3><p>I admit, when I originally made this app it was for my wife. Every year on her birthday she always tell me \"Okay, now tell me X number of things you love about me\" with X being her age. Of course, that means it's never more than 25....<\/p><p>I figured an app would be a great way to tell her, but my first thought was what would happen after she cycled through all the pictures right after she opened it? Most likely she would stop using it right away. Maybe she'd look at it from time to time, but how could I get her to look at it 25 separate days.<\/p><p>Luckily, Apple has a solution for us. Using local notifications. Now using the notifications isn't enough, because she could easily just swipe up and ignore it since she knows what it is. But what if we limited the number of compliments she could see and only increased them each day? Once again, Apple has a solution for us. Since this is such a small app we can easily get away with using UserDefaults for our persistence. Let's start by configuring our app to only show the first compliment, then the next day show the first two, then the next day the first three, and so on.<\/p><p>Remember how we named our variable that held the index of which compliment to show in our array of compliments <code>currentDay<\/code>? This is the reason for that name. That index will be the current day that the user has opened and looked at the app. It will only increment up to the maximum number of days that the app has been opened. Let's start by setting our <code>currentDay<\/code> variable to a UserDefault value with a specific key.<\/p><div class=\"optional-container\">\nTip: when you try to extract an integer from UserDefault and it does not exist, it returns 0. This is important to know because instead of your app crashing you could get unwanted results. However, this is useful for us in this scenario because we want our default value to be 0 then we can increment it every day.\n<\/div><p>Inside <code>viewDidLoad<\/code> of <code>ComplimentViewController<\/code> add the following line prior to <code>configureView()<\/code>:<\/p><pre><code>currentDay = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">integer<\/span>(forKey: currentDayKey)\n<\/code><\/pre><p>Then as a class constant add:<\/p><pre><code><span class=\"keyword\">let<\/span> currentDayKey = <span class=\"string\">\"currentDayKey\"<\/span>\n<\/code><\/pre><p>However, we will also need to store the date that the app was last opened, then compare it to the date the next time the app is open, determine if there is a difference of at least one day, then if so, increase our <code>currentDay<\/code> variable by 1. This will be handled in a series of steps.<\/p><ol><li>Create a function to determine if the last saved date is the same as today. I'll write that below with a description of each step. We will also add a dateFormatter variable in the class variables section and a new last saved date key for UserDefaults:<\/li><\/ol><pre><code><span class=\"comment\">\/\/ Add this right under var currentDayKey = \"currentDay\"<\/span>\n<span class=\"keyword\">var<\/span> lastSavedDateKey = <span class=\"string\">\"lastSavedDate\"<\/span>\n<span class=\"keyword\">let<\/span> dateFormatter: <span class=\"type\">DateFormatter<\/span> = {\n    <span class=\"keyword\">let<\/span> formatter = <span class=\"type\">DateFormatter<\/span>()\n    formatter.<span class=\"property\">dateFormat<\/span> = <span class=\"string\">\"yyyy\/MM\/dd H:m:ss\"<\/span>\n    formatter.<span class=\"property\">timeZone<\/span> = .<span class=\"dotAccess\">current<\/span>\n    <span class=\"keyword\">return<\/span> formatter\n}()\n\n<span class=\"comment\">\/\/ Add this with all your other functions<\/span>\n<span class=\"keyword\">func<\/span> isSameDay() -&gt; <span class=\"type\">Bool<\/span> {\n    <span class=\"comment\">\/\/ Get today's date using the formatter so we are in the same timezone<\/span>\n    <span class=\"keyword\">let<\/span> todayPreFormat = <span class=\"type\">Date<\/span>()\n    <span class=\"keyword\">let<\/span> todayString = dateFormatter.<span class=\"call\">string<\/span>(from: todayPreFormat)\n    <span class=\"keyword\">let<\/span> today = dateFormatter.<span class=\"call\">date<\/span>(from: todayString) ?? <span class=\"type\">Date<\/span>()\n    <span class=\"comment\">\/\/ Get the last saved date from user defaults, if it does not exist, get today's date<\/span>\n    <span class=\"keyword\">let<\/span> lastSavedDateString = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">string<\/span>(forKey: lastSavedDateKey) ?? todayString\n    <span class=\"comment\">\/\/ Using your date formatter from above, create a date from the last saved date string in user defaults<\/span>\n    <span class=\"keyword\">let<\/span> lastSavedDate = dateFormatter.<span class=\"call\">date<\/span>(from: lastSavedDateString) ?? today\n    \n    <span class=\"comment\">\/\/ Use the calendar function to determine if the dates are in the same day or not - then return the value<\/span>\n    <span class=\"keyword\">return<\/span> <span class=\"type\">Calendar<\/span>.<span class=\"property\">current<\/span>.<span class=\"call\">isDate<\/span>(today, inSameDayAs: lastSavedDate)\n}\n<\/code><\/pre><ol start=\"2\"><li>In <code>viewDidLoad<\/code> compare the date our app is launched to the last saved date. If we are in the same day, continue like normal. However, if not we need to increment our current day only if it won't extend past the total number of compliments we have:<\/li><\/ol><pre><code><span class=\"comment\">\/\/ Check if we are in the same day<\/span>\n<span class=\"keyword\">if<\/span> !<span class=\"call\">isSameDay<\/span>() {\n    <span class=\"comment\">\/\/ We are not in the same day, so increment current day IF it will be less than the total number of compliments - 1. If we don't do this check, our app will continue to increment and eventually crash<\/span>\n    <span class=\"keyword\">if<\/span> currentDay &lt; compliments.<span class=\"property\">count<\/span> - <span class=\"number\">1<\/span> {\n        currentDay += <span class=\"number\">1<\/span>\n        <span class=\"comment\">\/\/ Set our new user default last saved date to today<\/span>\n        <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(dateFormatter.<span class=\"call\">string<\/span>(from: <span class=\"type\">Date<\/span>()), forKey: lastSavedDateKey)\n    }\n}\n<\/code><\/pre><ol start=\"3\"><li>We need to create two more UserDefault keys and set them. One for the current date in which we will set our <code>currentDay<\/code> variable based on that, as well as a max date key and value. Every time we load this app, currentDate and maxDay will be equal. However, <code>currentDay<\/code> will be able to change so the user can navigate back and forth, but <code>maxDate<\/code> will stay the same so they can't cycle through all compliments on the first day of opening the app. Create your key and set both values right under where we set <code>lastSavedDateKey<\/code> just above:<\/li><\/ol><pre><code><span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(currentDay, forKey: currentDayKey)\n<span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(currentDay, forKey: maxDaymaxDayKey)\n<\/code><\/pre><ol start=\"4\"><li>Then, in the same place we hide our \"next button\", we need to also hide it if current day equals max day. This way each day we can see the next compliment and everything before it. Change <code>configureButtons()<\/code> to this:<\/li><\/ol><pre><code><span class=\"keyword\">func<\/span> configureButtons() {\n    <span class=\"keyword\">let<\/span> numberOfCompliments = compliments.<span class=\"property\">count<\/span> - <span class=\"number\">1<\/span>\n    <span class=\"keyword\">let<\/span> maxDay = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">integer<\/span>(forKey: maxDayKey)\n    nextButton.<span class=\"property\">isHidden<\/span> = currentDay == numberOfCompliments || currentDay ==  maxDay ? true : <span class=\"keyword\">false<\/span>\n    previousButton.<span class=\"property\">isHidden<\/span> = currentDay == <span class=\"number\">0<\/span> ? true : <span class=\"keyword\">false<\/span>\n}\n<\/code><\/pre><ol start=\"5\"><li>We are almost done with this section. There is a problem here. If you run your app and change the date manually to the next day you'll see that we still can't move past that first screen. This is because of UserDefaults. Remember how when we don't have a value for integer we get back 0 which is a value? That's not the case with our <code>lastSavedDate<\/code> user default value. Since we don't have a good value to save, our nil coalescing in step 1 returns the string date of today. This means it <code>isSameDay<\/code> will always return true. This is an easy fix, however. We just need to check for a value when our app first launches, if it doesn't exist, set the value. Add this at the top of <code>viewDidLoad<\/code>:<\/li><\/ol><pre><code><span class=\"comment\">\/\/ When app opens, set the last saved date to current date and time if needed - first run only<\/span>\n<span class=\"keyword\">if<\/span> <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">value<\/span>(forKey: lastSavedDateKey) == <span class=\"keyword\">nil<\/span> {\n    <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(dateFormatter.<span class=\"call\">string<\/span>(from: <span class=\"type\">Date<\/span>()), forKey: lastSavedDateKey)\n}\n<\/code><\/pre><p>You should now be able to launch the app the first time, only be able to view the first compliment, manually change the date on your phone, then you can view the next compliment, so on. So if you have 25 compliments, it will take 25 days before the user can see everything, unless of course they manually change the date.<\/p><p>That was a lot of code. Hopefully your app is working like it should. If not, please check your code with the following:<\/p><pre><code><span class=\"keyword\">class<\/span> ComplimentViewController: <span class=\"type\">UIViewController<\/span> {\n\n    <span class=\"keyword\">@IBOutlet weak var<\/span> imageView: <span class=\"type\">UIImageView<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> label: <span class=\"type\">UILabel<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> previousButton: <span class=\"type\">UIButton<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> nextButton: <span class=\"type\">UIButton<\/span>!\n    \n    <span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n    <span class=\"keyword\">var<\/span> currentDay = <span class=\"number\">0<\/span>\n    <span class=\"keyword\">var<\/span> selectedDay: <span class=\"type\">Int<\/span>?\n    \n    <span class=\"keyword\">var<\/span> animationFactory: <span class=\"type\">AnimationFactory<\/span>?\n    \n    <span class=\"keyword\">var<\/span> currentDayKey = <span class=\"string\">\"currentDay\"<\/span>\n    <span class=\"keyword\">var<\/span> lastSavedDateKey = <span class=\"string\">\"lastSavedDate\"<\/span>\n    <span class=\"keyword\">var<\/span> maxDayKey = <span class=\"string\">\"maxDay\"<\/span>\n    \n    <span class=\"keyword\">let<\/span> dateFormatter: <span class=\"type\">DateFormatter<\/span> = {\n        <span class=\"keyword\">let<\/span> formatter = <span class=\"type\">DateFormatter<\/span>()\n        formatter.<span class=\"property\">dateFormat<\/span> = <span class=\"string\">\"yyyy\/MM\/dd H:m:ss\"<\/span>\n        formatter.<span class=\"property\">timeZone<\/span> = .<span class=\"dotAccess\">current<\/span>\n        <span class=\"keyword\">return<\/span> formatter\n    }()\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        animationFactory = <span class=\"type\">AnimationFactory<\/span>()\n        \n        <span class=\"comment\">\/\/ When app opens, set the last saved date to current date and time if needed - first run only<\/span>\n        <span class=\"keyword\">if<\/span> <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">value<\/span>(forKey: lastSavedDateKey) == <span class=\"keyword\">nil<\/span> {\n            <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(dateFormatter.<span class=\"call\">string<\/span>(from: <span class=\"type\">Date<\/span>()), forKey: lastSavedDateKey)\n        }\n        \n        currentDay = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">integer<\/span>(forKey: currentDayKey)\n        <span class=\"comment\">\/\/ Check if we are in the same day<\/span>\n        <span class=\"keyword\">if<\/span> !<span class=\"call\">isSameDay<\/span>() {\n            <span class=\"comment\">\/\/ We are not in the same day, so increment current day IF it will be less than the total number of compliments - 1. If we don't do this check, our app will continue to increment and eventually crash<\/span>\n            <span class=\"keyword\">if<\/span> currentDay &lt; compliments.<span class=\"property\">count<\/span> - <span class=\"number\">1<\/span> {\n                currentDay += <span class=\"number\">1<\/span>\n                <span class=\"comment\">\/\/ Set our new user default last saved date to today<\/span>\n                <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(dateFormatter.<span class=\"call\">string<\/span>(from: <span class=\"type\">Date<\/span>()), forKey: lastSavedDateKey)\n                <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(currentDay, forKey: currentDayKey)\n                <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">setValue<\/span>(currentDay, forKey: maxDayKey)\n            }\n        }\n        \n        <span class=\"call\">configureView<\/span>()\n    }\n    \n    <span class=\"keyword\">func<\/span> configureView() {\n        <span class=\"call\">configureLabel<\/span>()\n        <span class=\"call\">configureImageView<\/span>()\n        <span class=\"call\">configureButtons<\/span>()\n    }\n    \n    <span class=\"keyword\">func<\/span> configureLabel() {\n        currentDay = selectedDay != <span class=\"keyword\">nil<\/span> ? selectedDay! : currentDay\n        selectedDay = <span class=\"keyword\">nil<\/span>\n        \n        label.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">largeTitle<\/span>)\n        label.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n        label.<span class=\"property\">textColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Primary<\/span>\n        label.<span class=\"property\">textAlignment<\/span> = .<span class=\"dotAccess\">center<\/span>\n        label.<span class=\"property\">text<\/span> = compliments[currentDay].dialogue\n        \n        animationFactory?.<span class=\"call\">randomAnimation<\/span>(label, duration: <span class=\"number\">1<\/span>, delay: <span class=\"number\">0<\/span>)\n    }\n\n    <span class=\"keyword\">func<\/span> configureImageView() {\n        currentDay = selectedDay != <span class=\"keyword\">nil<\/span> ? selectedDay! : currentDay\n        \n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderWidth<\/span> = <span class=\"number\">8<\/span>\n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Secondary<\/span>.<span class=\"property\">cgColor<\/span>\n        imageView.<span class=\"property\">contentMode<\/span> = .<span class=\"dotAccess\">scaleAspectFill<\/span>\n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">cornerRadius<\/span> = <span class=\"number\">5<\/span>\n\n        <span class=\"keyword\">let<\/span> image = <span class=\"type\">UIImage<\/span>(named: compliments[currentDay].image)\n        imageView.<span class=\"property\">image<\/span> = image\n        \n        animationFactory?.<span class=\"call\">randomAnimation<\/span>(imageView, duration: <span class=\"number\">1<\/span>, delay: <span class=\"number\">0<\/span>)\n    }\n    \n    <span class=\"keyword\">func<\/span> configureButtons() {\n        <span class=\"keyword\">let<\/span> numberOfCompliments = compliments.<span class=\"property\">count<\/span> - <span class=\"number\">1<\/span>\n        <span class=\"keyword\">let<\/span> maxDay = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">integer<\/span>(forKey: maxDayKey)\n        nextButton.<span class=\"property\">isHidden<\/span> = currentDay == numberOfCompliments || currentDay ==  maxDay ? true : <span class=\"keyword\">false<\/span>\n        previousButton.<span class=\"property\">isHidden<\/span> = currentDay == <span class=\"number\">0<\/span> ? true : <span class=\"keyword\">false<\/span>\n    }\n    <span class=\"keyword\">func<\/span> isSameDay() -&gt; <span class=\"type\">Bool<\/span> {\n        <span class=\"comment\">\/\/ Get today's date using the formatter so we are in the same timezone<\/span>\n        <span class=\"keyword\">let<\/span> todayPreFormat = <span class=\"type\">Date<\/span>()\n        <span class=\"keyword\">let<\/span> todayString = dateFormatter.<span class=\"call\">string<\/span>(from: todayPreFormat)\n        <span class=\"keyword\">let<\/span> today = dateFormatter.<span class=\"call\">date<\/span>(from: todayString) ?? <span class=\"type\">Date<\/span>()\n        <span class=\"comment\">\/\/ Get the last saved date from user defaults, if it does not exist, get today's date<\/span>\n        <span class=\"keyword\">let<\/span> lastSavedDateString = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">string<\/span>(forKey: lastSavedDateKey) ?? todayString\n        <span class=\"comment\">\/\/ Using your date formatter from above, create a date from the last saved date string in user defaults<\/span>\n        <span class=\"keyword\">let<\/span> lastSavedDate = dateFormatter.<span class=\"call\">date<\/span>(from: lastSavedDateString) ?? today\n        \n        <span class=\"comment\">\/\/ Use the calendar function to determine if the dates are in the same day or not - then return the value<\/span>\n        <span class=\"keyword\">return<\/span> <span class=\"type\">Calendar<\/span>.<span class=\"property\">current<\/span>.<span class=\"call\">isDate<\/span>(today, inSameDayAs: lastSavedDate)\n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> previousButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        currentDay -= <span class=\"number\">1<\/span>\n        <span class=\"call\">configureView<\/span>()\n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> nextButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        currentDay += <span class=\"number\">1<\/span>\n        <span class=\"call\">configureView<\/span>()\n    }\n    \n}\n<\/code><\/pre><h3>Fixing our tableview<\/h3><p>Now that our main view shows only how many compliments we want, we need to make it so our tableview limits the number of compliments it shows. This isn't nearly as difficult as what we just did. We just need to edit our compliments array to return from index 0 to the max number of days. Find this line in <code>ComplimentsTableViewController.swift<\/code>:<\/p><pre><code><span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n<\/code><\/pre><p>And change it to this:<\/p><pre><code><span class=\"keyword\">var<\/span> compliments: [<span class=\"type\">Compliment<\/span>] {\n    <span class=\"keyword\">let<\/span> days = <span class=\"type\">UserDefaults<\/span>.<span class=\"property\">standard<\/span>.<span class=\"call\">integer<\/span>(forKey: <span class=\"string\">\"maxDay\"<\/span>)\n    <span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n    \n    <span class=\"keyword\">return<\/span> <span class=\"type\">Array<\/span>(compliments[<span class=\"number\">0<\/span>...days])\n}\n<\/code><\/pre><p>You'll note that we hardcoded the \"maxDay\" key here. This isn't best practice, but this is a small app that's not in production for thousands of users so I'm not too worried about it. Ideally, you could use a static variable for this key or even create a struct that contains all your user default keys (my preferred method). However, you can launch your app now and see that your tableview limits the number of compliments the user can navigate to.<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-02\" style=\"text-decoration: none\">&larr; Displaying Data and User Interaction<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-04\" style=\"text-decoration: none\">Adding local notifications &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-02<\/guid><title>Create a unique Valentine's Day app for your loved one - Part 2<\/title><description>This section focuses on displaying data and interacting with your app.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-02<\/link><pubDate>Sun, 24 Jan 2021 12:06:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Create a unique Valentine's Day app for your loved one - Part 2<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-uitableview\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uitableview\">UITableView<\/a>\n        <a class=\"post-category post-category-optionals\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/optionals\">Optionals<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-03\" style=\"text-decoration: none\">Animations and UserDefaults &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Editing your main view<\/h3><p>You can get creative with this, but for the purpose of this article, we will keep it simple. Inside Storyboard, add an image view, label, and two buttons on the screen. I gave the following constraints for each object:<\/p><ol><li>UIImageView - top-to-safe-area 40, leading-to-safe-area-20, trailing-to-safe-area 20, height 330<\/li><\/ol><ol start=\"2\"><li>Label - top-to-image-view 20, leading-to-safe-area-20, trailing-to-safe-area 20<\/li><\/ol><ol start=\"3\"><li>Button 1 - leading-to-safe-area 20, bottom-to-safe-area-20<\/li><\/ol><ol start=\"4\"><li>Button 2 - trailing-to-safe-area 20, bottom-to-safe-area-20<\/li><\/ol><p>Delete both button titles and replace button 1 image with arrowshape.turn.up.left.fill and button 2 image with arrowshape.turn.up.right.fill. When you're finished you should have something that looks like this:<\/p><img class=\"post-image img-lg\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/13\/13-02.png\" width=\"800\"\/><p>Last, we will need to create some outlets for each object as well as an IBAction for each button. While you're here, create a constant and a variable for all of our compliments and the current day. When you're done your your <code>ComplimentViewController.swift<\/code> should look like this:<\/p><pre><code><span class=\"keyword\">class<\/span> ComplimentViewController: <span class=\"type\">UIViewController<\/span> {\n\n    <span class=\"keyword\">@IBOutlet weak var<\/span> imageView: <span class=\"type\">UIImageView<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> label: <span class=\"type\">UILabel<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> previousButton: <span class=\"type\">UIButton<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> nextButton: <span class=\"type\">UIButton<\/span>!\n    \n    <span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n    <span class=\"keyword\">var<\/span> currentDay = <span class=\"number\">0<\/span>\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n\n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> previousButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        \n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> nextButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        \n    }\n    \n}\n<\/code><\/pre><h3>Displaying Model Data<\/h3><p>You've got your main view and you've got your model data. Let's begin showing it on the screen now. We want to also give our label and image view a bit of style, something else you can edit as your own. Add the following two functions:<\/p><pre><code><span class=\"keyword\">func<\/span> configureLabel() {\n    label.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">largeTitle<\/span>)\n    label.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n    label.<span class=\"property\">textColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Primary<\/span>\n    label.<span class=\"property\">textAlignment<\/span> = .<span class=\"dotAccess\">center<\/span>\n    label.<span class=\"property\">text<\/span> = compliments[currentDay].dialogue\n}\n\n<span class=\"keyword\">func<\/span> configureImageView() {\n    imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderWidth<\/span> = <span class=\"number\">8<\/span>\n    imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Secondary<\/span>.<span class=\"property\">cgColor<\/span>\n    imageView.<span class=\"property\">contentMode<\/span> = .<span class=\"dotAccess\">scaleAspectFill<\/span>\n    imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">cornerRadius<\/span> = <span class=\"number\">5<\/span>\n\n    <span class=\"keyword\">let<\/span> image = <span class=\"type\">UIImage<\/span>(named: compliments[currentDay].image)\n    imageView.<span class=\"property\">image<\/span> = image\n}\n<\/code><\/pre><p>Then to make the call easier for every edit add this function and call it in <code>viewDidLoad<\/code><\/p><pre><code><span class=\"keyword\">func<\/span> configureView() {\n    <span class=\"call\">configureLabel<\/span>()\n    <span class=\"call\">configureImageView<\/span>()\n}\n<\/code><\/pre><p>Run your app now and you should see something like this:<\/p><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/13\/13-03.png\" width=\"800\"\/><p>Awesome. Our app is finally starting to come together!<\/p><h3>Cycling through images<\/h3><p>You'll notice that every time you run your app it shows the same image and same compliment. That's because we never change our <code>currentDay<\/code> variable. (If the variable name of currentDay sounds confusing right now, it will make sense later on!)<\/p><p>We need to edit both outlets to increase\/decrease the current day and call the <code>configureView()<\/code> after each increment\/decrement. This is as easy as changing both those stubs to this:<\/p><pre><code><span class=\"keyword\">@IBAction func<\/span> previousButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n    currentDay -= <span class=\"number\">1<\/span>\n    <span class=\"call\">configureView<\/span>()\n}\n\n<span class=\"keyword\">@IBAction func<\/span> nextButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n    currentDay += <span class=\"number\">1<\/span>\n    <span class=\"call\">configureView<\/span>()\n}\n<\/code><\/pre><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/13\/13-04.gif\" width=\"800\"\/><p>Cycling through compliments is easy now, but you'll notice if you try to tap back from the first compliment or next at the last one your app will crash. You could put some try\/catch blocks, or use if else's, or nil coalescing, or whatever your favorite way of error handling is, but I think it's better to just hide those buttons if they aren't useable. We will hide our <code>previous button<\/code> if the current day is equal to 0 and our <code>next button<\/code> if our current day is equal to the number of compliments minus 1. Then we will call this function in <code>configureView<\/code>. After adding the function for this your updated <code>ComplimentViewController.swift<\/code> should look like this.<\/p><pre><code><span class=\"keyword\">class<\/span> ComplimentViewController: <span class=\"type\">UIViewController<\/span> {\n\n    <span class=\"keyword\">@IBOutlet weak var<\/span> imageView: <span class=\"type\">UIImageView<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> label: <span class=\"type\">UILabel<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> previousButton: <span class=\"type\">UIButton<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> nextButton: <span class=\"type\">UIButton<\/span>!\n    \n    <span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n    <span class=\"keyword\">var<\/span> currentDay = <span class=\"number\">0<\/span>\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        <span class=\"call\">configureView<\/span>()\n    }\n    \n    <span class=\"keyword\">func<\/span> configureView() {\n        <span class=\"call\">configureLabel<\/span>()\n        <span class=\"call\">configureImageView<\/span>()\n        <span class=\"call\">configureButtons<\/span>()\n    }\n    \n    <span class=\"keyword\">func<\/span> configureLabel() {\n        label.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">largeTitle<\/span>)\n        label.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n        label.<span class=\"property\">textColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Primary<\/span>\n        label.<span class=\"property\">textAlignment<\/span> = .<span class=\"dotAccess\">center<\/span>\n        label.<span class=\"property\">text<\/span> = compliments[currentDay].dialogue\n    }\n    \n    <span class=\"keyword\">func<\/span> configureImageView() {\n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderWidth<\/span> = <span class=\"number\">8<\/span>\n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Secondary<\/span>.<span class=\"property\">cgColor<\/span>\n        imageView.<span class=\"property\">contentMode<\/span> = .<span class=\"dotAccess\">scaleAspectFill<\/span>\n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">cornerRadius<\/span> = <span class=\"number\">5<\/span>\n    \n        <span class=\"keyword\">let<\/span> image = <span class=\"type\">UIImage<\/span>(named: compliments[currentDay].image)\n        imageView.<span class=\"property\">image<\/span> = image\n    }\n    \n    <span class=\"keyword\">func<\/span> configureButtons() {\n        <span class=\"keyword\">let<\/span> numberOfCompliments = compliments.<span class=\"property\">count<\/span> - <span class=\"number\">1<\/span>\n        nextButton.<span class=\"property\">isHidden<\/span> = currentDay == numberOfCompliments ? true : <span class=\"keyword\">false<\/span>\n        previousButton.<span class=\"property\">isHidden<\/span> = currentDay == <span class=\"number\">0<\/span> ? true : <span class=\"keyword\">false<\/span>\n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> previousButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        currentDay -= <span class=\"number\">1<\/span>\n        <span class=\"call\">configureView<\/span>()\n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> nextButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        currentDay += <span class=\"number\">1<\/span>\n        <span class=\"call\">configureView<\/span>()\n    }\n    \n}\n<\/code><\/pre><h3>Editing your TableViewController<\/h3><p>We have our main view working, but if end up having a ton of compliments (which you should....) then it may be easier to look through a tableview to find the one you want instead of hitting \"next\" over and over. Let's configure that now. If you haven't already, give your tableviewcell a reuse identifier of \"cell\" inside Storyboard. We need to do a few things...<\/p><ol><li>Create a reference to our compliments<\/li><\/ol><ol start=\"2\"><li>Return the number of rows as the number of compliments we have<\/li><\/ol><ol start=\"3\"><li>Edit the row size to be a bit bigger so we can use our images inside the tableview cell<\/li><\/ol><ol start=\"4\"><li>Configure each cell to show the picture and the title of your compliment<\/li><\/ol><ol start=\"5\"><li>Configure the picture to be the same size in every row<\/li><\/ol><ol start=\"6\"><li>Navigate back to the view when tapping a cell<\/li><\/ol><p>Creating a reference is as trivial as adding the following line as a property to our <code>ComplimentsViewController<\/code> class:<\/p><pre><code><span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n<\/code><\/pre><p>The next two things are easy enough:<\/p><pre><code><span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, numberOfRowsInSection section: <span class=\"type\">Int<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n    compliments.<span class=\"property\">count<\/span>\n}\n\n<span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, heightForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">CGFloat<\/span> {\n    <span class=\"number\">75<\/span>\n}\n<\/code><\/pre><p>Configuring each cell to show the title and image is also fairly simple:<\/p><pre><code><span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n    <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"cell\"<\/span>, for: indexPath)\n    \n    <span class=\"keyword\">let<\/span> compliment = compliments[indexPath.<span class=\"property\">row<\/span>]\n    \n    <span class=\"keyword\">let<\/span> image = <span class=\"type\">UIImage<\/span>(named: compliment.<span class=\"property\">image<\/span>)\n    cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span> = image\n    cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">contentMode<\/span> = .<span class=\"dotAccess\">scaleAspectFill<\/span>\n    \n    cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">text<\/span> = compliment.<span class=\"property\">title<\/span>\n    \n    <span class=\"keyword\">return<\/span> cell\n}\n<\/code><\/pre><p>But you'll notice that the images look a bit messed up. That's where step number five comes in. It's not a lot of code, but it isn't super intuitive either. I love UIKit, but there are many things that I think could make it better. We need to use an image context to draw the exact size that we want. With that being said, let's fix the pictures by adding the following code inside our <code>cellForRowAt<\/code> method right before we return the cell.<\/p><pre><code><span class=\"keyword\">let<\/span> itemSize = <span class=\"type\">CGSize<\/span>.<span class=\"keyword\">init<\/span>(width: <span class=\"number\">75<\/span>, height: <span class=\"number\">75<\/span>)\n<span class=\"type\">UIGraphicsBeginImageContextWithOptions<\/span>(itemSize, <span class=\"keyword\">false<\/span>, <span class=\"type\">UIScreen<\/span>.<span class=\"property\">main<\/span>.<span class=\"property\">scale<\/span>);\n<span class=\"keyword\">let<\/span> imageRect = <span class=\"type\">CGRect<\/span>.<span class=\"keyword\">init<\/span>(origin: <span class=\"type\">CGPoint<\/span>.<span class=\"property\">zero<\/span>, size: itemSize)\ncell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span>!.<span class=\"call\">draw<\/span>(in: imageRect)\ncell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span>! = <span class=\"type\">UIGraphicsGetImageFromCurrentImageContext<\/span>()!;\n<span class=\"type\">UIGraphicsEndImageContext<\/span>();\n<\/code><\/pre><p>Great, now our cells look good, but nothing happens when we tap them. For the final step, we need to break it down into a few small steps:<\/p><ol><li>Embed our main view controller (the one with the tabs!) inside a navigation controller - which is done by going to Storyboard, selecting View Controller, the going to Editor &gt; Embed In &gt; Navigation Controller<\/li><\/ol><ol start=\"2\"><li>Creating a <em>optional<\/em> variable called <code>selectedDay<\/code> inside <code>ComplimentViewController.swift'<\/code> with <em>no<\/em> default value<\/li><\/ol><ol start=\"3\"><li>Giving our <code>currentDay<\/code> variable in <code>ComplimentViewController.swift<\/code> the value of <code>selectedDay<\/code> if it exists<\/li><\/ol><ol start=\"4\"><li>Giving that variable in the above step a value when we navigate to it from our <code>ComplimentsTableViewController.swift<\/code><\/li><\/ol><p>Step two is done with adding this line in <code>ComplimentViewController.swift<\/code> under your other class variables:<\/p><pre><code><span class=\"keyword\">var<\/span> selectedDay: <span class=\"type\">Int<\/span>?\n<\/code><\/pre><p>The next step can be edited inside <code>configureLabel()<\/code> and <code>configureImageView()<\/code> by adding the following ternary operator at the top of each method:<\/p><pre><code>currentDay = selectedDay != <span class=\"keyword\">nil<\/span> ? selectedDay! : currentDay\n<\/code><\/pre><p>And step four is done by adding the following <code>didSelectRowAt<\/code> method in <code>ComplimentsTableViewController.swift<\/code>:<\/p><pre><code><span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, didSelectRowAt indexPath: <span class=\"type\">IndexPath<\/span>) {\n    <span class=\"keyword\">if let<\/span> vc = storyboard?.<span class=\"call\">instantiateViewController<\/span>(withIdentifier: <span class=\"string\">\"ComplimentViewController\"<\/span>) <span class=\"keyword\">as<\/span>? <span class=\"type\">ComplimentViewController<\/span> {\n        vc.<span class=\"property\">selectedDay<\/span> = indexPath.<span class=\"property\">row<\/span>\n        navigationController?.<span class=\"call\">pushViewController<\/span>(vc, animated: <span class=\"keyword\">true<\/span>)\n    }\n}\n<\/code><\/pre><p>You'll notice that you can now navigate from the tableview to the main view and it shows the correct picture, but your arrow buttons do not work correctly anymore. This is because <code>selectedDay<\/code> does not change and it's not nil anymore. There are many ways we can handle this, but we are just going to go the easy route here. Right after the line of code we added in step three, add the following:<\/p><pre><code>selectedDay = <span class=\"keyword\">nil<\/span>\n<\/code><\/pre><p>This means as soon as we navigate from the tableview and configure the view, we also set it back to nil so when we call <code>configureView<\/code> again the current day doesn't get set to <code>selectedDay<\/code>. Note that you only need to add this line in either <code>configureImageView<\/code> or <code>configureLabel<\/code> and not both places, however, it doesn't hurt if you do.<\/p><p>Just to recap what both files should look like take a look here:<\/p><pre><code><span class=\"keyword\">class<\/span> ComplimentViewController: <span class=\"type\">UIViewController<\/span> {\n\n    <span class=\"keyword\">@IBOutlet weak var<\/span> imageView: <span class=\"type\">UIImageView<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> label: <span class=\"type\">UILabel<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> previousButton: <span class=\"type\">UIButton<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> nextButton: <span class=\"type\">UIButton<\/span>!\n    \n    <span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n    <span class=\"keyword\">var<\/span> currentDay = <span class=\"number\">0<\/span>\n    <span class=\"keyword\">var<\/span> selectedDay: <span class=\"type\">Int<\/span>?\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        <span class=\"call\">configureView<\/span>()\n    }\n    \n    <span class=\"keyword\">func<\/span> configureView() {\n        <span class=\"call\">configureLabel<\/span>()\n        <span class=\"call\">configureImageView<\/span>()\n        <span class=\"call\">configureButtons<\/span>()\n    }\n    \n    <span class=\"keyword\">func<\/span> configureLabel() {\n        currentDay = selectedDay != <span class=\"keyword\">nil<\/span> ? selectedDay! : currentDay\n        selectedDay = <span class=\"keyword\">nil<\/span>\n        \n        label.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">largeTitle<\/span>)\n        label.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n        label.<span class=\"property\">textColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Primary<\/span>\n        label.<span class=\"property\">textAlignment<\/span> = .<span class=\"dotAccess\">center<\/span>\n        label.<span class=\"property\">text<\/span> = compliments[currentDay].dialogue\n    }\n    \n    <span class=\"keyword\">func<\/span> configureImageView() {\n        currentDay = selectedDay != <span class=\"keyword\">nil<\/span> ? selectedDay! : currentDay\n        \n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderWidth<\/span> = <span class=\"number\">8<\/span>\n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">borderColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Secondary<\/span>.<span class=\"property\">cgColor<\/span>\n        imageView.<span class=\"property\">contentMode<\/span> = .<span class=\"dotAccess\">scaleAspectFill<\/span>\n        imageView.<span class=\"property\">layer<\/span>.<span class=\"property\">cornerRadius<\/span> = <span class=\"number\">5<\/span>\n    \n        <span class=\"keyword\">let<\/span> image = <span class=\"type\">UIImage<\/span>(named: compliments[currentDay].image)\n        imageView.<span class=\"property\">image<\/span> = image\n    }\n    \n    <span class=\"keyword\">func<\/span> configureButtons() {\n        <span class=\"keyword\">let<\/span> numberOfCompliments = compliments.<span class=\"property\">count<\/span> - <span class=\"number\">1<\/span>\n        nextButton.<span class=\"property\">isHidden<\/span> = currentDay == numberOfCompliments ? true : <span class=\"keyword\">false<\/span>\n        previousButton.<span class=\"property\">isHidden<\/span> = currentDay == <span class=\"number\">0<\/span> ? true : <span class=\"keyword\">false<\/span>\n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> previousButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        currentDay -= <span class=\"number\">1<\/span>\n        <span class=\"call\">configureView<\/span>()\n    }\n    \n    <span class=\"keyword\">@IBAction func<\/span> nextButtonTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">UIButton<\/span>) {\n        currentDay += <span class=\"number\">1<\/span>\n        <span class=\"call\">configureView<\/span>()\n    }\n    \n}\n<\/code><\/pre><pre><code><span class=\"keyword\">class<\/span> ComplimentsTableViewController: <span class=\"type\">UITableViewController<\/span> {\n\n    <span class=\"keyword\">let<\/span> compliments = <span class=\"type\">AllCompliments<\/span>().<span class=\"property\">compliments<\/span>\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n    }\n\n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, numberOfRowsInSection section: <span class=\"type\">Int<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n        compliments.<span class=\"property\">count<\/span>\n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n        <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"cell\"<\/span>, for: indexPath)\n        \n        <span class=\"keyword\">let<\/span> compliment = compliments[indexPath.<span class=\"property\">row<\/span>]\n        \n        <span class=\"keyword\">let<\/span> image = <span class=\"type\">UIImage<\/span>(named: compliment.<span class=\"property\">image<\/span>)\n        cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span> = image\n        cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">contentMode<\/span> = .<span class=\"dotAccess\">scaleAspectFill<\/span>\n        \n        cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">text<\/span> = compliment.<span class=\"property\">title<\/span>\n        \n        <span class=\"keyword\">let<\/span> itemSize = <span class=\"type\">CGSize<\/span>.<span class=\"keyword\">init<\/span>(width: <span class=\"number\">75<\/span>, height: <span class=\"number\">75<\/span>)\n        <span class=\"type\">UIGraphicsBeginImageContextWithOptions<\/span>(itemSize, <span class=\"keyword\">false<\/span>, <span class=\"type\">UIScreen<\/span>.<span class=\"property\">main<\/span>.<span class=\"property\">scale<\/span>);\n        <span class=\"keyword\">let<\/span> imageRect = <span class=\"type\">CGRect<\/span>.<span class=\"keyword\">init<\/span>(origin: <span class=\"type\">CGPoint<\/span>.<span class=\"property\">zero<\/span>, size: itemSize)\n        cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span>!.<span class=\"call\">draw<\/span>(in: imageRect)\n        cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span>! = <span class=\"type\">UIGraphicsGetImageFromCurrentImageContext<\/span>()!;\n        <span class=\"type\">UIGraphicsEndImageContext<\/span>();\n        \n        <span class=\"keyword\">return<\/span> cell\n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, didSelectRowAt indexPath: <span class=\"type\">IndexPath<\/span>) {\n        <span class=\"keyword\">if let<\/span> vc = storyboard?.<span class=\"call\">instantiateViewController<\/span>(withIdentifier: <span class=\"string\">\"ComplimentViewController\"<\/span>) <span class=\"keyword\">as<\/span>? <span class=\"type\">ComplimentViewController<\/span> {\n            vc.<span class=\"property\">selectedDay<\/span> = indexPath.<span class=\"property\">row<\/span>\n            navigationController?.<span class=\"call\">pushViewController<\/span>(vc, animated: <span class=\"keyword\">true<\/span>)\n        }\n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, heightForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">CGFloat<\/span> {\n        <span class=\"number\">75<\/span>\n    }\n}\n<\/code><\/pre><p>And honestly, if you want to stop here, write some compliments out for whoever you are making this app for, and give it to them, then by all means go for it! Buuuuut, if you stay a bit longer, we can spice it up a bit more.<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-03\" style=\"text-decoration: none\">Animations and UserDefaults &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-01<\/guid><title>Create a unique Valentine's Day app for your loved one - Part 1<\/title><description>This section focuses on getting your app set up.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-01<\/link><pubDate>Sun, 24 Jan 2021 12:05:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Create a unique Valentine's Day app for your loved one - Part 1<\/h1><div class=\"post-tags\" markdown=\"1\">\n    <a class=\"post-category post-category-cocoapods\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/cocoapods\">Cocoapods<\/a>\n    <a class=\"post-category post-category-tabbar\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/tabbar\">Tabbar<\/a>\n    <a class=\"post-category post-category-structs\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/structs\">Structs<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-02\" style=\"text-decoration: none\">Displaying Data and User Interaction &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Prerequisites<\/h3><p>Requirements:<\/p><ul><li>Swift 5.2 (or later)<\/li><\/ul><ul><li>macOS Catalina 10.15 (or later)<\/li><\/ul><ul><li>Some experience in Swift<\/li><\/ul><ul><li>Experience with UIKIt. There are some sections that are glossed over rather quickly. You can download the example app <a href=\"https:\/\/github.com\/thomaskellough\/X-Things-I-Love-About-You\">here<\/a> if you need to see how I did something.<\/li><\/ul><h3>Introduction<\/h3><p>Valentine's Day is a very popular holiday where you can express your love for someone else. Although you should be doing this 365 days out of the year, the day is extra special to some people. If you want to give your loved one a unique gift this year why not make them an app? This guide will show you how to do just that and you'll learn a lot of great code and techniques along the way.<\/p><p>If you're in a rush and don't want to follow the entire tutorial, you can download the app directly from github <a href=\"https:\/\/github.com\/thomaskellough\/X-Things-I-Love-About-You\">here<\/a>.<\/p><div class=\"column\">\n        <img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/13\/13-05.gif\" width=\"800\"\/>\n        <img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/13\/13-06.gif\" width=\"800\"\/>\n<\/div><h3>Getting Started<\/h3><p>This app will focus on using Swift and UIKit. Go ahead and create a new iOS App project called X-Things-I-Love-About-You with Swift as the language and Storyboard as the interface.<\/p><div class=\"optional-container\">\nOptional: If you want to use cocoapods to make the app look a bit nicer there are some good Tabbar examples that you can use. Feel free to skip this section if you do not like using dependencies and want to create your own tabbar.\n<\/div><h3>Adding a Custom Tabbar using Cocoapods<\/h3><p><a href=\"https:\/\/iosexample.com\/\">iOS Eample<\/a> gives us a lot of great examples we can use in our project. It lists different packages to enhance our apps without doing too much work on our end. I'll be using <a href=\"https:\/\/iosexample.com\/light-way-to-add-fancy-bottom-bar\/\">SO Tabbar<\/a>, but feel free to pick a different one or use the default tab bar in UIKit.<\/p><p>To install using Cocoapods close your app and open terminal. Navigate to your project directory and type in:<\/p><pre><code>pod <span class=\"keyword\">init\nopen<\/span> podfile\n<\/code><\/pre><p>Edit your podfile to:<\/p><pre><code># <span class=\"type\">Uncomment<\/span> the next line to define a global platform <span class=\"keyword\">for<\/span> your project\nplatform :ios, '<span class=\"number\">11.0<\/span>'\n\ntarget '<span class=\"type\">X<\/span>-<span class=\"type\">Things<\/span>-<span class=\"type\">I<\/span>-<span class=\"type\">Love<\/span>-<span class=\"type\">About<\/span>-<span class=\"type\">You<\/span>' <span class=\"keyword\">do<\/span>\n  # <span class=\"type\">Comment<\/span> the next line <span class=\"keyword\">if<\/span> you don't want to use <span class=\"keyword\">dynamic<\/span> frameworks\n  use_frameworks!\n\n  # <span class=\"type\">Pods<\/span> <span class=\"keyword\">for<\/span> <span class=\"type\">X<\/span>-<span class=\"type\">Things<\/span>-<span class=\"type\">I<\/span>-<span class=\"type\">Love<\/span>-<span class=\"type\">About<\/span>-<span class=\"type\">You<\/span>\n  pod '<span class=\"type\">SOTabBar<\/span>'\nend\n<\/code><\/pre><p>Close our your podfile. Then inside terminal type in:<\/p><pre><code>pod install\n<\/code><\/pre><p>Now that you have a pod installed you must use the xcworkspace as opposed to the xcodeproj. You can open your app directly from terminal with:<\/p><pre><code><span class=\"keyword\">open<\/span> <span class=\"type\">X<\/span>-<span class=\"type\">Things<\/span>-<span class=\"type\">I<\/span>-<span class=\"type\">Love<\/span>-<span class=\"type\">About<\/span>-<span class=\"type\">You<\/span>.<span class=\"property\">xcworkspace<\/span>\n<\/code><\/pre><h4>Creating your SO Tabs<\/h4><p>We are going to have two tabs for this app so we will need to go into storyboard and add the respective views. The first view controller you will add will be the \"Compliment View Controller\". Drag a regular view controller out into storyboard and give it the Storyboard ID of <code>ComplimentViewController<\/code>. Right after that, drag a table view controller out and provide it with a Storyboard ID of <code>ComplimentTableViewController<\/code>.<\/p><p>Now we need to create some classes to attach these view controllers to. Inside your project navigator create two new swift files.<\/p><ol><li>ComplimentViewController.swift as a CocoaTouch Class inherited from UIViewController<\/li><\/ol><ol start=\"2\"><li>ComplimentTableViewController.swift as a CocoaTouch Class inherited from UITableViewController<\/li><\/ol><p>Then back inside your storyboard, make each view controller a custom class of the view controllers you created above.<\/p><p>Now we can set up our tabs. You can read the settings for SO TabController if you want, or copy what I have here. Navigate to ViewController.swift. and edit your file to look like this:<\/p><pre><code><span class=\"keyword\">import<\/span> UIKit\n<span class=\"keyword\">import<\/span> SOTabBar\n\n<span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">SOTabBarController<\/span> {\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        <span class=\"keyword\">let<\/span> firstVC = <span class=\"type\">UIStoryboard<\/span>(name: <span class=\"string\">\"Main\"<\/span>, bundle: <span class=\"keyword\">nil<\/span>).<span class=\"call\">instantiateViewController<\/span>(withIdentifier: <span class=\"string\">\"ComplimentViewController\"<\/span>)\n        <span class=\"keyword\">let<\/span> secondVC = <span class=\"type\">UIStoryboard<\/span>(name: <span class=\"string\">\"Main\"<\/span>, bundle: <span class=\"keyword\">nil<\/span>).<span class=\"call\">instantiateViewController<\/span>(withIdentifier: <span class=\"string\">\"ComplimentTableViewController\"<\/span>)\n        \n        <span class=\"keyword\">let<\/span> firstTabImage = <span class=\"type\">UIImage<\/span>(systemName: <span class=\"string\">\"bolt.heart.fill\"<\/span>)?.<span class=\"call\">withTintColor<\/span>(<span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Secondary<\/span>, renderingMode: .<span class=\"dotAccess\">alwaysOriginal<\/span>)\n        <span class=\"keyword\">let<\/span> firstTabImageSelected = <span class=\"type\">UIImage<\/span>(systemName: <span class=\"string\">\"bolt.heart.fill\"<\/span>)?.<span class=\"call\">withTintColor<\/span>(.<span class=\"dotAccess\">white<\/span>, renderingMode: .<span class=\"dotAccess\">alwaysOriginal<\/span>)\n        firstVC.<span class=\"property\">tabBarItem<\/span> = <span class=\"type\">UITabBarItem<\/span>(\n            title: <span class=\"string\">\"&lt;3\"<\/span>,\n            image: firstTabImage,\n            selectedImage: firstTabImageSelected\n        )\n        \n        <span class=\"keyword\">let<\/span> secondTabImage = <span class=\"type\">UIImage<\/span>(systemName: <span class=\"string\">\"heart.text.square.fill\"<\/span>)?.<span class=\"call\">withTintColor<\/span>(<span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Secondary<\/span>, renderingMode: .<span class=\"dotAccess\">alwaysOriginal<\/span>)\n        <span class=\"keyword\">let<\/span> secondTabImageSelected = <span class=\"type\">UIImage<\/span>(systemName: <span class=\"string\">\"heart.text.square.fill\"<\/span>)?.<span class=\"call\">withTintColor<\/span>(.<span class=\"dotAccess\">white<\/span>, renderingMode: .<span class=\"dotAccess\">alwaysOriginal<\/span>)\n        secondVC.<span class=\"property\">tabBarItem<\/span> = <span class=\"type\">UITabBarItem<\/span>(\n            title: <span class=\"string\">\"&lt;3&lt;3&lt;3\"<\/span>,\n            image: secondTabImage,\n            selectedImage: secondTabImageSelected\n        )\n        \n        viewControllers = [firstVC, secondVC]\n    }\n    \n    \n    <span class=\"keyword\">override func<\/span> loadView() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">loadView<\/span>()\n        \n        <span class=\"type\">SOTabBarSetting<\/span>.<span class=\"property\">tabBarTintColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Secondary\n        SOTabBarSetting<\/span>.<span class=\"property\">tabBarBackground<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"type\">App<\/span>.<span class=\"type\">Primary\n        SOTabBarSetting<\/span>.<span class=\"property\">tabBarSizeImage<\/span> = <span class=\"number\">40.0<\/span>\n        <span class=\"type\">SOTabBarSetting<\/span>.<span class=\"property\">tabBarCircleSize<\/span> = <span class=\"type\">CGSize<\/span>(width: <span class=\"number\">65<\/span>, height: <span class=\"number\">65<\/span>)\n        <span class=\"type\">SOTabBarSetting<\/span>.<span class=\"property\">tabBarHeight<\/span> = <span class=\"number\">60<\/span>\n    }\n}\n<\/code><\/pre><p>Take a look through this code and edit it with what you see fit. You must be using iOS 13 or higher to take advantage of the system images so if you want to support older versions you'll need to find your own images. I used the heart with a lightning bolt because my wife is a nurse and I thought it was fitting when I made this app for her, but this is your app to do with as you please so play around with it! You'll probably also want to edit the titles since I just used some placeholder hearts for mine.<\/p><p>If you try to run your code right now it won't work. That's because of the handful of <code>UIColor.App.Primary<\/code> and <code>UIColor.App.Secondary<\/code> pieces of code we have layered in. This is something I like to do with all my apps and I think it's a great way to organize app-specific attributes. Let's make this code compile and explain what's going on.<\/p><p>Create a new swift file called <code>UIColor+Extension.swift<\/code>. Then edit the file to look like this:<\/p><pre><code><span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">UIColor<\/span> {\n    <span class=\"keyword\">enum<\/span> App {\n        <span class=\"keyword\">static var<\/span> <span class=\"type\">Primary<\/span>: <span class=\"type\">UIColor<\/span>  {\n            <span class=\"keyword\">let<\/span> color = <span class=\"type\">UIColor<\/span>(named: <span class=\"string\">\"Primary\"<\/span>)\n            <span class=\"keyword\">if<\/span> color != <span class=\"keyword\">nil<\/span> {\n                <span class=\"keyword\">return<\/span> color!\n            } <span class=\"keyword\">else<\/span> {\n                <span class=\"keyword\">return<\/span> <span class=\"type\">UIColor<\/span>.<span class=\"property\">black<\/span>\n            }\n        }\n        <span class=\"keyword\">static var<\/span> <span class=\"type\">Secondary<\/span>: <span class=\"type\">UIColor<\/span> {\n            <span class=\"keyword\">let<\/span> color = <span class=\"type\">UIColor<\/span>(named: <span class=\"string\">\"Secondary\"<\/span>)\n            <span class=\"keyword\">if<\/span> color != <span class=\"keyword\">nil<\/span> {\n                <span class=\"keyword\">return<\/span> color!\n            } <span class=\"keyword\">else<\/span> {\n                <span class=\"keyword\">return<\/span> <span class=\"type\">UIColor<\/span>.<span class=\"property\">white<\/span>\n            }\n        }\n    }\n}\n<\/code><\/pre><div class=\"optional-container\">\nNote: I'm not going to go into details of Unit Testing here since I cover that at https:\/\/theswiftprotocol.com\/posts\/10-how-to-set-up-unit-testing\/, but this is a great opportunity to add test cases for these UIColor extensions you just created.\n<\/div><p>Regardless of if you added testing or not, you'll need to create some app colors unless you want a white and black app. Navigate to <code>Assets.xcassets<\/code> and add in two new Color sets. Feel free to pick your own color scheme, but for our example, I'll be using:<\/p><ol><li>Primary - hex #5DD29E<\/li><\/ol><ol start=\"2\"><li>Secondary - hex #513A55<\/li><\/ol><p>It feels like we've done a lot already and we haven't even launched our app yet. The good news is, it's now ready for its first viewing. Go ahead and run your app now and you should see something like this:<\/p><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/13\/13-01.png\" width=\"800\"\/><h3>Adding a model class<\/h3><p>Now that you have an app up and running we need to add a model for our data. Our model consists of the following:<\/p><ol><li>A title<\/li><\/ol><ol start=\"2\"><li>A compliment<\/li><\/ol><ol start=\"3\"><li>An image<\/li><\/ol><p>So, create a new file called <code>Compliments.swift<\/code> and edit it to look like this:<\/p><pre><code><span class=\"keyword\">import<\/span> Foundation\n\n<span class=\"keyword\">struct<\/span> Compliment {\n    <span class=\"keyword\">let<\/span> title: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> dialogue: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> image: <span class=\"type\">String<\/span>\n}\n<\/code><\/pre><p>This is just the struct that will contain our information. Our app is going to consist of many compliments so we can cycle through them every day. Let's create a way to return a list of compliments so we can use them in our app. In the same file, create a new struct with the following code.<\/p><pre><code><span class=\"keyword\">struct<\/span> AllCompliments {\n    <span class=\"keyword\">var<\/span> compliments: [<span class=\"type\">Compliment<\/span>] {\n        <span class=\"call\">getCompliments<\/span>()\n    }\n    \n    <span class=\"keyword\">func<\/span> getCompliments() -&gt; [<span class=\"type\">Compliment<\/span>] {\n        <span class=\"keyword\">var<\/span> compliments: [<span class=\"type\">Compliment<\/span>] = []\n        \n        <span class=\"keyword\">let<\/span> complimentOne = <span class=\"type\">Compliment<\/span>(title: <span class=\"string\">\"Smile\"<\/span>, dialogue: <span class=\"string\">\"I love the way you smile\"<\/span>, image: <span class=\"string\">\"smile\"<\/span>)\n        <span class=\"keyword\">let<\/span> complimentTwo = <span class=\"type\">Compliment<\/span>(title: <span class=\"string\">\"Funny\"<\/span>, dialogue: <span class=\"string\">\"You're the funniest person I know\"<\/span>, image: <span class=\"string\">\"funny\"<\/span>)\n        <span class=\"keyword\">let<\/span> complimentThree = <span class=\"type\">Compliment<\/span>(title: <span class=\"string\">\"Confidence\"<\/span>, dialogue: <span class=\"string\">\"Your confidence is alluring\"<\/span>, image: <span class=\"string\">\"confidence\"<\/span>)\n        \n        compliments += [complimentOne, complimentTwo, complimentThree]\n        \n        <span class=\"keyword\">return<\/span> compliments\n    }\n}\n<\/code><\/pre><p>I feel like I don't need to tell you this, but you probably want to create your own title, dialogue, and add your own images. I used images from <a href=\"https:\/\/www.freeimages.com\">https:\/\/www.freeimages.com<\/a>. However, when I made my wife the app I focused on images of us and our pets. For the number of compliments, that's up to you. That's what the \"X\" is for in X-Things-I-Love-About-You. If you're doing this for a birthday maybe you could make the X their age!<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/13-x-things-i-love-about-you-part-02\" style=\"text-decoration: none\">Displaying Data and User Interaction &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/12-how-to-use-labeled-statements-in-nested-loops<\/guid><title>Use labeled statements to break out of nested loops<\/title><description>How to use labeled statements in nested loops<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/12-how-to-use-labeled-statements-in-nested-loops<\/link><pubDate>Sun, 3 Jan 2021 14:05:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Use labeled statements to break out of nested loops<\/h1><div class=\"post-tags\" markdown=\"1\">\n  <a class=\"post-category post-category-labeledstatements\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/labeledstatements\">LabeledStatements<\/a>\n<\/div><p>This tip is not related to UIKit or SwiftUI. It's just a technique that focuses on the Swift language itself, so feel free to apply it to any projects you make. You can test this out in Swift Playgrounds; no need to start a new project.<\/p><p>Let's start by creating a simple for loop in Swift that prints out the numbers 1 through 100.<\/p><pre><code><span class=\"keyword\">for<\/span> i <span class=\"keyword\">in<\/span> <span class=\"number\">1<\/span>...<span class=\"number\">100<\/span> {\n    <span class=\"call\">print<\/span>(i)\n}\n<\/code><\/pre><p>Then let's add a break clause that exits the loop when the number enters 50.<\/p><pre><code><span class=\"keyword\">for<\/span> i <span class=\"keyword\">in<\/span> <span class=\"number\">1<\/span>...<span class=\"number\">100<\/span> {\n    <span class=\"call\">print<\/span>(i)\n    <span class=\"keyword\">if<\/span> i == <span class=\"number\">50<\/span> {\n        <span class=\"keyword\">break<\/span>\n    }\n}\n<\/code><\/pre><p>Easy enough, right? However, let's add another loop inside of our first loop that prints out a through z after each iteration of our first loop. This means we will be print out <code>1, a, b, c, d, e, f, g, h, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z<\/code> THEN <code>2, a, b, c, d, e, f, g, h, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z <\/code> THEN <code>3, a, b, c, d, e, f, g, h, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z<\/code> and so on...<\/p><pre><code><span class=\"keyword\">for<\/span> i <span class=\"keyword\">in<\/span> <span class=\"number\">1<\/span>...<span class=\"number\">100<\/span> {\n    <span class=\"call\">print<\/span>(i)\n    <span class=\"keyword\">for<\/span> char <span class=\"keyword\">in<\/span> <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"<\/span> {\n        <span class=\"call\">print<\/span>(char)\n    }\n}\n<\/code><\/pre><p>So far so good. Everything works as expected. However, I want us to add a break statement in the second loop that breaks when we reach the letter <code>m<\/code>. But before you do, think for a minute about what you should expect to see. When you're ready, give it a try.<\/p><pre><code><span class=\"keyword\">for<\/span> i <span class=\"keyword\">in<\/span> <span class=\"number\">1<\/span>...<span class=\"number\">100<\/span> {\n    <span class=\"call\">print<\/span>(i)\n    <span class=\"keyword\">for<\/span> char <span class=\"keyword\">in<\/span> <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"<\/span> {\n        <span class=\"call\">print<\/span>(char)\n        <span class=\"keyword\">if<\/span> char == <span class=\"string\">\"m\"<\/span> {\n            <span class=\"keyword\">break<\/span>\n        }\n    }\n}\n<\/code><\/pre><p>Now you probably came to one of the following conclusions<\/p><ol><li>You will start by printing out 1, then each letter in the alphabet until you reach m. Then you will break out of both loops and stop printing completely.<\/li><li>You will start by printing out 1, then each letter in the alphabet until you reach m. Then you will break out of the alphabet (inner) loop, then print out 2, then a - m, then 3, then a - m, and so on.<\/li><\/ol><p>If you guessed the second option then you guessed correctly. We will break out of the inner loop, but we will never break out of the outer loop because we never specified that. More so, since <code>char<\/code> is used only in the scope of the inner loop, you don't have access to it on the outer loop. That means you cannot do something like this<\/p><pre><code><span class=\"keyword\">for<\/span> i <span class=\"keyword\">in<\/span> <span class=\"number\">1<\/span>...<span class=\"number\">100<\/span> {\n    <span class=\"call\">print<\/span>(i)\n    <span class=\"keyword\">for<\/span> char <span class=\"keyword\">in<\/span> <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"<\/span> {\n        <span class=\"call\">print<\/span>(char)\n        <span class=\"keyword\">if<\/span> char == <span class=\"string\">\"m\"<\/span> {\n            <span class=\"keyword\">break<\/span>\n        }\n    }\n    <span class=\"keyword\">if<\/span> char == <span class=\"string\">\"m\"<\/span> {\n        <span class=\"keyword\">break<\/span>\n    }\n}\n<\/code><\/pre><p>One way to achieve the desired results is by creating a variable outside of the loop, editing it from inside the inner loop, then breaking out of the outer loop in a specific condition.<\/p><pre><code><span class=\"keyword\">var<\/span> isCharM = <span class=\"keyword\">false\nfor<\/span> i <span class=\"keyword\">in<\/span> <span class=\"number\">1<\/span>...<span class=\"number\">100<\/span> {\n    <span class=\"call\">print<\/span>(i)\n    <span class=\"keyword\">for<\/span> char <span class=\"keyword\">in<\/span> <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"<\/span> {\n        <span class=\"call\">print<\/span>(char)\n        <span class=\"keyword\">if<\/span> char == <span class=\"string\">\"m\"<\/span> {\n            isCharM = <span class=\"keyword\">true<\/span>\n        }\n    }\n    <span class=\"keyword\">if<\/span> isCharM {\n        <span class=\"keyword\">break<\/span>\n    }\n}\n<\/code><\/pre><p>This works, but it's adding an extra variable that just opens up the potential to create more bugs. It can also get complicated if you have a lot of nested loops. Swift offers something a bit better called <code>labeled statements<\/code>. This means giving your loop a name, then specifying to break out of that loop on a certain condition. The name is given to the loop right before the <code>for<\/code> keyword and specified to be broken out after the <code>break<\/code> keyword.<\/p><pre><code>outerLoop: <span class=\"keyword\">for<\/span> i <span class=\"keyword\">in<\/span> <span class=\"number\">1<\/span>...<span class=\"number\">100<\/span> {\n    <span class=\"call\">print<\/span>(i)\n    <span class=\"keyword\">for<\/span> char <span class=\"keyword\">in<\/span> <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"<\/span> {\n        <span class=\"call\">print<\/span>(char)\n        <span class=\"keyword\">if<\/span> char == <span class=\"string\">\"m\"<\/span> {\n            <span class=\"keyword\">break<\/span> outerLoop\n        }\n    }\n}\n<\/code><\/pre><p>This code looks much cleaner and is also easily readable. Note that the name of your loop can be anything you want.<\/p><p>When is this useful? You may not ever need it in your projects. But knowing it's a possibility is always nice to know. Here is a better example of when it might be used instead of printing out numbers and letters.<br><br>Say you are making a video game and you want to have a cheat code of \"up, down, left, right, b, a\". The controller has a handful of options that you can press such as <code>up<\/code>, <code>down<\/code>, <code>left<\/code>, <code>right<\/code>, <code>b<\/code>, <code>a<\/code>, <code>start<\/code>, or <code>select<\/code>. Let's create an array of each possibility then create a cheat code. We can then loop over each option in sequence and create an array to compare to the cheat code. I want to do one extra thing here and that's time our executions using <code>CFAbsoluteTimeGetCurrent<\/code>.<\/p><pre><code><span class=\"keyword\">let<\/span> choices = [<span class=\"string\">\"up\"<\/span>, <span class=\"string\">\"down\"<\/span>, <span class=\"string\">\"left\"<\/span>, <span class=\"string\">\"right\"<\/span>, <span class=\"string\">\"b\"<\/span>, <span class=\"string\">\"a\"<\/span>, <span class=\"string\">\"start\"<\/span>, <span class=\"string\">\"select\"<\/span>]\n<span class=\"keyword\">let<\/span> cheatCode = [<span class=\"string\">\"up\"<\/span>, <span class=\"string\">\"down\"<\/span>, <span class=\"string\">\"left\"<\/span>, <span class=\"string\">\"right\"<\/span>, <span class=\"string\">\"b\"<\/span>, <span class=\"string\">\"a\"<\/span>]\n\n<span class=\"keyword\">let<\/span> startTime = <span class=\"type\">CFAbsoluteTimeGetCurrent<\/span>()\n\n<span class=\"keyword\">for<\/span> firstChoice <span class=\"keyword\">in<\/span> choices {\n    <span class=\"keyword\">for<\/span> secondChoice <span class=\"keyword\">in<\/span> choices {\n        <span class=\"keyword\">for<\/span> thirdChoice <span class=\"keyword\">in<\/span> choices {\n            <span class=\"keyword\">for<\/span> fourthChoice <span class=\"keyword\">in<\/span> choices {\n                <span class=\"keyword\">for<\/span> fifthChoice <span class=\"keyword\">in<\/span> choices {\n                    <span class=\"keyword\">for<\/span> sixthChoice <span class=\"keyword\">in<\/span> choices {\n                        <span class=\"keyword\">let<\/span> sequence = [firstChoice, secondChoice, thirdChoice, fourthChoice, fifthChoice, sixthChoice]\n                        \n                        <span class=\"keyword\">if<\/span> sequence == cheatCode {\n                            <span class=\"call\">print<\/span>(<span class=\"string\">\"Powerup enabled!\"<\/span>)\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n<span class=\"keyword\">let<\/span> timeElapsed = <span class=\"type\">CFAbsoluteTimeGetCurrent<\/span>() - startTime\n<span class=\"call\">print<\/span>(<span class=\"string\">\"Checking for cheatcode code took<\/span> \\(timeElapsed) <span class=\"string\">seconds\"<\/span>)\n<\/code><\/pre><p>When you run this you'll so that we print out \"Powerup enabled!\" and continue running for a total time of 12.37 seconds (on my machine, anyway). It looped for a total number of 262,144 times.<\/p><p>After adding a labeled statement and breaking out once the cheatcode was hit, it cut my time down to 0.28 seconds and the total number of loops to 5,350.<\/p><pre><code>outerLoop: <span class=\"keyword\">for<\/span> firstChoice <span class=\"keyword\">in<\/span> choices {\n    <span class=\"keyword\">for<\/span> secondChoice <span class=\"keyword\">in<\/span> choices {\n        <span class=\"keyword\">for<\/span> thirdChoice <span class=\"keyword\">in<\/span> choices {\n            <span class=\"keyword\">for<\/span> fourthChoice <span class=\"keyword\">in<\/span> choices {\n                <span class=\"keyword\">for<\/span> fifthChoice <span class=\"keyword\">in<\/span> choices {\n                    <span class=\"keyword\">for<\/span> sixthChoice <span class=\"keyword\">in<\/span> choices {\n                        <span class=\"keyword\">let<\/span> sequence = [firstChoice, secondChoice, thirdChoice, fourthChoice, fifthChoice, sixthChoice]\n                        \n                        <span class=\"keyword\">if<\/span> sequence == cheatCode {\n                            <span class=\"call\">print<\/span>(<span class=\"string\">\"Powerup enabled!\"<\/span>)\n                            <span class=\"keyword\">break<\/span> outerLoop\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n<span class=\"keyword\">let<\/span> timeElapsed = <span class=\"type\">CFAbsoluteTimeGetCurrent<\/span>() - startTime\n<span class=\"call\">print<\/span>(<span class=\"string\">\"Checking for cheatcode code took<\/span> \\(timeElapsed) <span class=\"string\">seconds\"<\/span>)\n<\/code><\/pre><p>I hope you can find value in using Swift's labeled statements. As I said earlier, it might not be something you ever use, but it's something nice to know if you ever run into a situation that needs it. If you get bored, try the full Konami code of <code>up, up, down, down, left, right, left, right, b, a, start<\/code>. You'll be surprised by how long it takes :)<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/11-how-to-seprate-tableview-views-and-datasource<\/guid><title>Separating your UITableViewController into multiple files<\/title><description>How to separate your UITableViewController views and datasources<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/11-how-to-seprate-tableview-views-and-datasource<\/link><pubDate>Fri, 27 Nov 2020 14:48:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Separating your UITableViewController into multiple files<\/h1><div class=\"post-tags\" markdown=\"1\">\n  <a class=\"post-category post-category-designpatterns\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/designpatterns\">DesignPatterns<\/a>\n  <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><h3>Introduction<\/h3><p>This article is not to get into the notorious argument of MVC vs MVVM vs VIPER or any other design patterns that we Swift developers like to discuss amongst each other. There are more than ways to skin a cat (although, I'm not a fan of animal cruelty) and your preferred method may not be someone else's preferred method. However, after working on production code that had every view controller 500+ lines of code I was growing frustrated by seeing a lot of extra code that just made finding what I wanted more difficult.<\/p><p>For example, if I have a Jira ticket that wants me to update what is showing in a tableview then I don't want to see all the methods that the view controller can perform. If I have another ticket that wants me to change how a tableview looks, I don't want to see filter through the code of what kind of data is shown. Some people may read this and think I'm lazy and it's not a big deal and perhaps you're right, but if you continue reading I'll show you how I like to separate my UITableViewControllers into three separate pieces that I think makes life easier.<\/p><h3>Creating a \"regular\" UITableViewController<\/h3><p>Let's start by creating what most developers would recognize as a regular UITableViewController. This will be one Swift file that handles what the tableview shows, how the tableview and cells look, and the logic that ties everything together.<\/p><p>Start by downloading the start project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\">here<\/a> so you can follow along. This doesn't do anything exciting, just shows a handful of Game of Thrones characters that displays an alert when you tap their names.<\/p><p>The icons I used here can be found on https:\/\/icons8.com\/icon\/pack\/cinema\/officel in their Game of Thrones section and are free to use.<\/p><p>You'll notice that our Storyboard has one UITableViewController that is the class of <code>ViewController<\/code> which is currently our main Swift file. Our <code>ViewController<\/code> class looks like this:<\/p><pre><code><span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UITableViewController<\/span> {\n    \n    <span class=\"keyword\">var<\/span> characters: [<span class=\"type\">Character<\/span>] = []\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        <span class=\"keyword\">let<\/span> ned = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Ned Stark\"<\/span>, house: <span class=\"string\">\"Stark\"<\/span>)\n        <span class=\"keyword\">let<\/span> arya = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Arya Stark\"<\/span>, house: <span class=\"string\">\"Stark\"<\/span>)\n        <span class=\"keyword\">let<\/span> daenerys = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Daenerys Targaryen\"<\/span>, house: <span class=\"string\">\"Targaryen\"<\/span>)\n        <span class=\"keyword\">let<\/span> rhaegar = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Rhaegar Targaryen\"<\/span>, house: <span class=\"string\">\"Targaryen\"<\/span>)\n        <span class=\"keyword\">let<\/span> obern = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Obern Martell\"<\/span>, house: <span class=\"string\">\"Martell\"<\/span>)\n        <span class=\"keyword\">let<\/span> doran = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Doran Martell\"<\/span>, house: <span class=\"string\">\"Martell\"<\/span>)\n        <span class=\"keyword\">let<\/span> olenna = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Olenna Tyrell\"<\/span>, house: <span class=\"string\">\"Tyrell\"<\/span>)\n        <span class=\"keyword\">let<\/span> mace = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Mace Tyrell\"<\/span>, house: <span class=\"string\">\"Tyrell\"<\/span>)\n        \n        characters = [ned, arya, daenerys, rhaegar, obern, doran, olenna, mace].<span class=\"call\">sorted<\/span>(by: { $0.<span class=\"property\">name<\/span> &lt; $1.<span class=\"property\">name<\/span> })\n        \n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n        <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"Cell\"<\/span>, for: indexPath)\n        <span class=\"keyword\">let<\/span> character = characters[indexPath.<span class=\"property\">row<\/span>]\n        \n        cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">text<\/span> = character.<span class=\"property\">name<\/span>\n        cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title1<\/span>)\n        \n        cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">text<\/span> = character.<span class=\"property\">house<\/span>\n        cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title3<\/span>)\n        \n        <span class=\"keyword\">if let<\/span> image = <span class=\"type\">UIImage<\/span>(named: character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>()) {\n            cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span> = image\n        }\n        \n        <span class=\"keyword\">switch<\/span> character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>() {\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"stark\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"tyrell\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">144<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">158<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">131<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"targaryen\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">155<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">44<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">41<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"martell\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">227<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">138<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">75<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">default<\/span>:\n            <span class=\"keyword\">break<\/span>\n        }\n        \n        <span class=\"keyword\">return<\/span> cell\n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, heightForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">CGFloat<\/span> {\n        <span class=\"number\">75<\/span>\n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, didSelectRowAt indexPath: <span class=\"type\">IndexPath<\/span>) {\n        <span class=\"keyword\">let<\/span> character = characters[indexPath.<span class=\"property\">row<\/span>]\n        \n        <span class=\"keyword\">let<\/span> ac = <span class=\"type\">UIAlertController<\/span>(title: character.<span class=\"property\">name<\/span>, message: character.<span class=\"property\">house<\/span>, preferredStyle: .<span class=\"dotAccess\">alert<\/span>)\n        ac.<span class=\"call\">addAction<\/span>(<span class=\"type\">UIAlertAction<\/span>(title: <span class=\"string\">\"OK\"<\/span>, style: .<span class=\"dotAccess\">default<\/span>))\n        <span class=\"call\">present<\/span>(ac, animated: <span class=\"keyword\">true<\/span>)\n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, numberOfRowsInSection section: <span class=\"type\">Int<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n        characters.<span class=\"property\">count<\/span>\n    }\n    \n}\n\n<\/code><\/pre><p>We also have a very simple Character model class that looks like this<\/p><pre><code><span class=\"keyword\">struct<\/span> Character {\n    <span class=\"keyword\">var<\/span> name: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">var<\/span> house: <span class=\"type\">String<\/span>\n}\n<\/code><\/pre><p>Now I know what you're thinking, this view controller is only 76 lines long which isn't that much. That is absolutely true, but if you've ever worked on large iOS projects you'll know that a view controller that looks like this is rare. We have no logic inside of this view controller, no trailing swipe actions, no functions to call API data, and we lack many other pieces of code that you'll often see in the real world. Still, this can give us a good idea of how separation can help. I will warn you though, it's a bit more work and in the end, may even total more lines of code, but it's the separation that makes maintenance and reusability a lot easier.<\/p><h3>Separate your data source<\/h3><p>Tableviews do not manage data. It only represents the data that it is provided. In our example, this is all handled in the <code>ViewController.swift<\/code>. However, our view controller would be better off forgetting the data and just showing the data that we provide it.<\/p><p>Create a new file called <code>CharacterDataSource.swift<\/code>. We want to move our data source methods out of our view controller here. Take a look at Apple's <a href=\"https:\/\/developer.apple.com\/documentation\/uikit\/uitableviewdatasource\">UITableViewDataSource documentation<\/a> to see which methods these are. You'll see that only the following two methods are required:<\/p><pre><code><span class=\"comment\">\/\/ Return the number of rows for the table.<\/span>     \n<span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, numberOfRowsInSection section: <span class=\"type\">Int<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n   <span class=\"keyword\">return<\/span> <span class=\"number\">0<\/span>\n}\n\n<span class=\"comment\">\/\/ Provide a cell object for each row.<\/span>\n<span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n   <span class=\"comment\">\/\/ Fetch a cell of the appropriate type.<\/span>\n   <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"cellTypeIdentifier\"<\/span>, for: indexPath)\n   \n   <span class=\"comment\">\/\/ Configure the cell’s contents.<\/span>\n   cell.<span class=\"property\">textLabel<\/span>!.text = <span class=\"string\">\"Cell text\"<\/span>\n       \n   <span class=\"keyword\">return<\/span> cell\n}\n<\/code><\/pre><p>That means in our example we are looking at:<\/p><pre><code><span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, numberOfRowsInSection section: <span class=\"type\">Int<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n    characters.<span class=\"property\">count<\/span>\n}\n\n<span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n    <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"Cell\"<\/span>, for: indexPath)\n    <span class=\"keyword\">let<\/span> character = characters[indexPath.<span class=\"property\">row<\/span>]\n    \n    cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">text<\/span> = character.<span class=\"property\">name<\/span>\n    cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title1<\/span>)\n    \n    cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">text<\/span> = character.<span class=\"property\">house<\/span>\n    cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title3<\/span>)\n    \n    <span class=\"keyword\">if let<\/span> image = <span class=\"type\">UIImage<\/span>(named: character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>()) {\n        cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span> = image\n    }\n    \n    <span class=\"keyword\">switch<\/span> character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>() {\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"stark\"<\/span>:\n        cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"tyrell\"<\/span>:\n        cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">144<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">158<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">131<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"targaryen\"<\/span>:\n        cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">155<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">44<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">41<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"martell\"<\/span>:\n        cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">227<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">138<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">75<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">default<\/span>:\n        <span class=\"keyword\">break<\/span>\n    }\n    \n    <span class=\"keyword\">return<\/span> cell\n}\n<\/code><\/pre><p>Note that there are other methods that belong to the data source, but in our example, we aren't using them.<\/p><p>Create an empty data source class as follows:<\/p><pre><code><span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">class<\/span> CharacterDataSource: <span class=\"type\">NSObject<\/span>, <span class=\"type\">UITableViewDataSource<\/span> {\n}\n<\/code><\/pre><p>You'll notice that we need to inherit from <code>NSObject<\/code> and <code>UITableViewDataSource<\/code>. This is required.<\/p><p>When we add our two above functions we need to remove the <code>override<\/code> keyword because we aren't overriding the data source anymore since we are simply creating one. We will also need to provide a characters array that holds our data, which means removing our characters array from our <code>ViewController.swift<\/code>.<\/p><p>When you are finished your <code>CharacterDataSource<\/code> class should look like this:<\/p><pre><code><span class=\"keyword\">class<\/span> CharacterDataSource: <span class=\"type\">NSObject<\/span>, <span class=\"type\">UITableViewDataSource<\/span> {\n    \n    <span class=\"keyword\">var<\/span> characters: [<span class=\"type\">Character<\/span>] = []\n    \n    <span class=\"keyword\">func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, numberOfRowsInSection section: <span class=\"type\">Int<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n        characters.<span class=\"property\">count<\/span>\n    }\n    \n    <span class=\"keyword\">func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n        <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"Cell\"<\/span>, for: indexPath)\n        <span class=\"keyword\">let<\/span> character = characters[indexPath.<span class=\"property\">row<\/span>]\n        \n        cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">text<\/span> = character.<span class=\"property\">name<\/span>\n        cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title1<\/span>)\n        \n        cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">text<\/span> = character.<span class=\"property\">house<\/span>\n        cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title3<\/span>)\n        \n        <span class=\"keyword\">if let<\/span> image = <span class=\"type\">UIImage<\/span>(named: character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>()) {\n            cell.<span class=\"property\">imageView<\/span>?.<span class=\"property\">image<\/span> = image\n        }\n        \n        <span class=\"keyword\">switch<\/span> character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>() {\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"stark\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"tyrell\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">144<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">158<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">131<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"targaryen\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">155<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">44<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">41<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"martell\"<\/span>:\n            cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">227<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">138<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">75<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n        <span class=\"keyword\">default<\/span>:\n            <span class=\"keyword\">break<\/span>\n        }\n        \n        <span class=\"keyword\">return<\/span> cell\n    }\n    \n}\n<\/code><\/pre><p>If you try to run this code it won't compile. That's because we removed our characters array from <code>ViewController.swift<\/code> and we haven't given it any new data. This is fixed by creating a datasource property and providing that property to our tableviews datasource. This also means everywhere we use <code>characters<\/code> inside <code>ViewController.swift<\/code> will have to be changed to <code>dataSource.characters<\/code>.<\/p><p>Edit <code>ViewController.swift<\/code> to look like this:<\/p><pre><code><span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UITableViewController<\/span> {\n        \n    <span class=\"keyword\">let<\/span> dataSource = <span class=\"type\">CharacterDataSource<\/span>() <span class=\"comment\">\/\/ we added a referece to our data source<\/span>\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        <span class=\"keyword\">self<\/span>.<span class=\"property\">tableView<\/span>.<span class=\"property\">dataSource<\/span> = dataSource <span class=\"comment\">\/\/ assign our tableview's datasource our datasource reference from above<\/span>\n        \n        <span class=\"keyword\">let<\/span> ned = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Ned Stark\"<\/span>, house: <span class=\"string\">\"Stark\"<\/span>)\n        <span class=\"keyword\">let<\/span> arya = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Arya Stark\"<\/span>, house: <span class=\"string\">\"Stark\"<\/span>)\n        <span class=\"keyword\">let<\/span> daenerys = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Daenerys Targaryen\"<\/span>, house: <span class=\"string\">\"Targaryen\"<\/span>)\n        <span class=\"keyword\">let<\/span> rhaegar = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Rhaegar Targaryen\"<\/span>, house: <span class=\"string\">\"Targaryen\"<\/span>)\n        <span class=\"keyword\">let<\/span> obern = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Obern Martell\"<\/span>, house: <span class=\"string\">\"Martell\"<\/span>)\n        <span class=\"keyword\">let<\/span> doran = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Doran Martell\"<\/span>, house: <span class=\"string\">\"Martell\"<\/span>)\n        <span class=\"keyword\">let<\/span> olenna = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Olenna Tyrell\"<\/span>, house: <span class=\"string\">\"Tyrell\"<\/span>)\n        <span class=\"keyword\">let<\/span> mace = <span class=\"type\">Character<\/span>(name: <span class=\"string\">\"Mace Tyrell\"<\/span>, house: <span class=\"string\">\"Tyrell\"<\/span>)\n        \n        <span class=\"comment\">\/\/ edit our characters array to use our array from our data source<\/span>\n        dataSource.<span class=\"property\">characters<\/span> = [ned, arya, daenerys, rhaegar, obern, doran, olenna, mace].<span class=\"call\">sorted<\/span>(by: { $0.<span class=\"property\">name<\/span> &lt; $1.<span class=\"property\">name<\/span> })\n        \n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, heightForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">CGFloat<\/span> {\n        <span class=\"number\">75<\/span>\n    }\n    \n    <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, didSelectRowAt indexPath: <span class=\"type\">IndexPath<\/span>) {\n        <span class=\"comment\">\/\/ edit our characters array to use our array from our data source<\/span>\n        <span class=\"keyword\">let<\/span> character = dataSource.<span class=\"property\">characters<\/span>[indexPath.<span class=\"property\">row<\/span>]\n        \n        <span class=\"keyword\">let<\/span> ac = <span class=\"type\">UIAlertController<\/span>(title: character.<span class=\"property\">name<\/span>, message: character.<span class=\"property\">house<\/span>, preferredStyle: .<span class=\"dotAccess\">alert<\/span>)\n        ac.<span class=\"call\">addAction<\/span>(<span class=\"type\">UIAlertAction<\/span>(title: <span class=\"string\">\"OK\"<\/span>, style: .<span class=\"dotAccess\">default<\/span>))\n        <span class=\"call\">present<\/span>(ac, animated: <span class=\"keyword\">true<\/span>)\n    }\n    \n}\n<\/code><\/pre><p>With that change, our view controller is now down to 44 lines. That's nearly half! It is now much easier to read through your view controller without filtering through the data that is shown. And if you need to edit the data itself, you don't even need to touch the view controller! But can we do better? Yes, we can...<\/p><h3>Creating a custom table view cell<\/h3><p>Even though our data source is separated it contains some code that really isn't needed. Our <code>cellForForwAt<\/code> method is 29 lines long mainly because it's also configuring <em>how<\/em> the cell should look. This is where creating custom tableview cells comes in handy.<\/p><p>Start by creating a new CocoaTouch file called <code>CharacterTableViewCell.swift<\/code> that inherits from UITableViewCell. This will create the following file:<\/p><pre><code><span class=\"keyword\">class<\/span> CharacterTableViewCell: <span class=\"type\">UITableViewCell<\/span> {\n\n    <span class=\"keyword\">override func<\/span> awakeFromNib() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">awakeFromNib<\/span>()\n        <span class=\"comment\">\/\/ Initialization code<\/span>\n    }\n\n    <span class=\"keyword\">override func<\/span> setSelected(<span class=\"keyword\">_<\/span> selected: <span class=\"type\">Bool<\/span>, animated: <span class=\"type\">Bool<\/span>) {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">setSelected<\/span>(selected, animated: animated)\n\n        <span class=\"comment\">\/\/ Configure the view for the selected state<\/span>\n    }\n\n}\n<\/code><\/pre><p>Before we start adding stuff, we need to jump into Storyboard, select your tableview cell, select Identity Inspector, and change its class to <code>CharacterTableViewCell<\/code>. Now back to the code. Create the following setup function inside <code>CharacterTableViewCell<\/code>.<\/p><pre><code><span class=\"keyword\">func<\/span> setUp(with character: <span class=\"type\">Character<\/span>) {\n    \n}\n<\/code><\/pre><p>We can add how we want our tableview cell to look inside of this, then call this function from our datasource. Since we are passing in a character as a parameter, we can use its values to edit the label, detail label, image, and background color. However, since this class inherits <code>UITableViewCell<\/code> we can leave off of every instance of <code>cell<\/code> and just call the method directly. Move that code over now so it looks like this.<\/p><pre><code><span class=\"keyword\">func<\/span> setUp(with character: <span class=\"type\">Character<\/span>) {\n    textLabel?.<span class=\"property\">text<\/span> = character.<span class=\"property\">name<\/span>\n    textLabel?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title1<\/span>)\n    \n    detailTextLabel?.<span class=\"property\">text<\/span> = character.<span class=\"property\">house<\/span>\n    detailTextLabel?.<span class=\"property\">font<\/span> = <span class=\"type\">UIFont<\/span>.<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title3<\/span>)\n    \n    <span class=\"keyword\">if let<\/span> image = <span class=\"type\">UIImage<\/span>(named: character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>()) {\n        imageView?.<span class=\"property\">image<\/span> = image\n    }\n    \n    <span class=\"keyword\">switch<\/span> character.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>() {\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"stark\"<\/span>:\n        backgroundColor = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">128<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"tyrell\"<\/span>:\n        backgroundColor = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">144<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">158<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">131<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"targaryen\"<\/span>:\n        backgroundColor = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">155<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">44<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">41<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"martell\"<\/span>:\n        backgroundColor = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">227<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">138<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">75<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">default<\/span>:\n        <span class=\"keyword\">break<\/span>\n    }\n}\n<\/code><\/pre><p>Then back in your data source class we only need to make two changes. The first is casting how your cell is returned as the new tablecell we created. The second is calling our <code>setUp()<\/code> method while passing in our character. Edit <code>cellForRowAt<\/code> to look like this:<\/p><pre><code><span class=\"keyword\">func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n    <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"Cell\"<\/span>, for: indexPath) <span class=\"keyword\">as<\/span>! <span class=\"type\">CharacterTableViewCell<\/span>\n    <span class=\"keyword\">let<\/span> character = characters[indexPath.<span class=\"property\">row<\/span>]\n    \n    cell.<span class=\"call\">setUp<\/span>(with: character)\n    \n    <span class=\"keyword\">return<\/span> cell\n}\n<\/code><\/pre><p>This brought our <code>cellForRowAt<\/code> method down to only 8 lines of code!<\/p><h3>Conclusion<\/h3><p>This was a very simple project that showed you how to separate your UITableViewController to have a dedicated data source class and custom tableview cell. You'll find that in large projects, you can even reuse the custom cell view in multiple tableviews if needed, saving you from re-writing all of that code again. Although this creates multiple files, you'll know exactly where to go when you want to change\/add\/remove something.<\/p><p>I hope you found this valuable and I encourage you to try it out in your next project. It's also easy enough to refractor your current project one view controller at a time. If you want to see and\/or download the final project you can do so <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\">here<\/a>.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/10-how-to-set-up-unit-testing<\/guid><title>Unit Testing with UIKit<\/title><description>Learn how to use unit testing in your apps to help you write better and safer code<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/10-how-to-set-up-unit-testing<\/link><pubDate>Sat, 7 Nov 2020 14:48:00 -0600<\/pubDate><content:encoded><![CDATA[<h1>Unit Testing with UIKit<\/h1><div class=\"post-tags\" markdown=\"1\">\n  <a class=\"post-category post-category-unittesting\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/unittesting\">UnitTesting<\/a>\n  <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><h3>Introduction<\/h3><p>Unit testing is highly valuable when making apps. Yet, there are so many apps in production that don't use it. It can help you write code that is stronger and more clear, help prevent app crashes, help reduce the re-opening of Jira tickets when the QA team finds an issue and can help you debug your code without running the app. So seriously, what's not to like? Why don't people use it?<\/p><p>One of the reasons is people don't understand how to use unit testing. It seems weird to write simple tests for something that you <em>know<\/em> will work, right? Maybe so, but when you have multiple developers working on the same team you're not all working on the same stuff. It's very easy for someone to accidently disrupt the code that you wrote previously. It also takes time to write unit testing. Not a whole lot, but more than none, and many people are rushed. However, neglecting to use unit tests can cause more time spent later on by fixing the bugs that would have been found by simply pressing <code>cmd + u<\/code>.<\/p><h3>Setup<\/h3><p>If you want to set up your own project that's fine. Create some text fields in the main view for first name, last name, date of birth, and 4-dig pin inputs. Then add a submit button at the bottom. Or you can download the starter project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\">here<\/a>.<\/p><p>For reference, here is what you get when you run the starter, and here is what the code looks like.<\/p><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/10\/10-01.png\" alt=\"Unit Testing Starter\"\/><pre><code><span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UIViewController<\/span> {\n\n  <span class=\"keyword\">@IBOutlet weak var<\/span> firstNameTextField: <span class=\"type\">UITextField<\/span>!\n  <span class=\"keyword\">@IBOutlet weak var<\/span> lastNameTextField: <span class=\"type\">UITextField<\/span>!\n  <span class=\"keyword\">@IBOutlet weak var<\/span> dateOfBirthTextField: <span class=\"type\">UITextField<\/span>!\n  <span class=\"keyword\">@IBOutlet weak var<\/span> pinNumberTextField: <span class=\"type\">UITextField<\/span>!\n   \n   \n  <span class=\"keyword\">override func<\/span> viewDidLoad() {\n    <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n    <span class=\"comment\">\/\/ Do any additional setup after loading the view.<\/span>\n  }\n\n  <span class=\"keyword\">@IBAction func<\/span> validateTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">Any<\/span>) {\n     \n  }\n   \n}\n<\/code><\/pre><p>As you can see, there isn't much going on at the moment. The idea of the app is to have a user type in their first name, last name, date of birth, and PIN then hit validate. Although this app does nothing, it's a great way to see how unit testing works.<\/p><p>Before we can start, we need to add unit testing to our project. Now, if you start the project from scratch, you can check a box that says \"Unit Testing\". And I recommend doing this with all your projects. However, it's not impossible to add unit testing to already existing projects that don't already incorporate it. To do this, go to <code>File &gt; New &gt; Target<\/code> then filter for <code>Unit Testing Bundle<\/code> and add it to your project target. There should only be one, but if you have multiple targets in your project then you will need to add multiple unit tests.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/10\/10-02.png\" alt=\"File Tree Unit Testing\"\/><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/10\/10-03.png\" alt=\"Unit Testing Bundle\"\/><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/10\/10-04.png\" alt=\"Project Directy After Adding Unit Testing\"\/><h3>Writing Your First Test<\/h3><p>Now you'll often hear the term <code>Test-Driven Development<\/code>. Many people take this approach because it helps you understand your code and ensure your tests are working. The steps, in short, are<\/p><ol><li>Write a failing test<\/li><\/ol><ol start=\"2\"><li>Run the code, ensure your code fails (What? Yes, for real)<\/li><\/ol><ol start=\"3\"><li>Write the code to make the test pass<\/li><\/ol><ol start=\"4\"><li>Run your tests again<\/li><\/ol><ol start=\"5\"><li>Refractor as needed<\/li><\/ol><p>Let's start with writing a failing test. You'd think we need to jump into our new unit testing Swift file, but we can't do that yet. Mainly because the way we will validate our fields will be by using extensions. We can't test a function or property that doesn't exist. Instead, I want you to create a new folder inside your project directory called <code>Extensions<\/code>. The purpose of the new folder is purely for better organization. Inside the new folder, create a swift file called <code>String+Extensions<\/code>. Note here, when you add the file you do NOT need to check the box for your unit testing target. Only check the box for the main project target.<\/p><p>Let's start with testing the first name input that the user tries to validate. However, we are going to make it return false since that's the first step to test-driven development.<\/p><p>Create a new <code>String<\/code> extension property below. <em>Note - You can do this using properties or functions. I prefer a property for this, but it's your choice<\/em><\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">String<\/span> {\n  <span class=\"keyword\">var<\/span> isValidFirstName: <span class=\"type\">Bool<\/span> {\n    <span class=\"keyword\">return false<\/span>\n  }\n}\n<\/code><\/pre><p>While we are on extensions, create a new one for <code>UITextField<\/code> to show our invalid and valid fields. Of course, feel free to edit them as you see fit.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">UITextField<\/span> {\n  <span class=\"keyword\">func<\/span> invalidate() {\n    backgroundColor = .<span class=\"dotAccess\">red<\/span>\n    textColor = .<span class=\"dotAccess\">white<\/span>\n  }\n   \n  <span class=\"keyword\">func<\/span> validate() {\n    backgroundColor = .<span class=\"dotAccess\">systemBackground<\/span>\n    textColor = .<span class=\"dotAccess\">label<\/span>\n  }\n}\n<\/code><\/pre><p>Now let's write our first test. Head over to <code>How_To_Use_Unit_TestingTests.swift<\/code> and take a look at what you see.<\/p><pre><code><span class=\"keyword\">import<\/span> XCTest\n\n<span class=\"keyword\">class<\/span> How_To_Use_Unit_TestingTests: <span class=\"type\">XCTestCase<\/span> {\n\n  <span class=\"keyword\">override func<\/span> setUpWithError() <span class=\"keyword\">throws<\/span> {\n    <span class=\"comment\">\/\/ Put setup code here. This method is called before the invocation of each test method in the class.<\/span>\n  }\n\n  <span class=\"keyword\">override func<\/span> tearDownWithError() <span class=\"keyword\">throws<\/span> {\n    <span class=\"comment\">\/\/ Put teardown code here. This method is called after the invocation of each test method in the class.<\/span>\n  }\n\n  <span class=\"keyword\">func<\/span> testExample() <span class=\"keyword\">throws<\/span> {\n    <span class=\"comment\">\/\/ This is an example of a functional test case.\n    \/\/ Use XCTAssert and related functions to verify your tests produce the correct results.<\/span>\n  }\n\n  <span class=\"keyword\">func<\/span> testPerformanceExample() <span class=\"keyword\">throws<\/span> {\n    <span class=\"comment\">\/\/ This is an example of a performance test case.<\/span>\n    <span class=\"call\">measure<\/span> {\n      <span class=\"comment\">\/\/ Put the code you want to measure the time of here.<\/span>\n    }\n  }\n\n}\n<\/code><\/pre><p>The <code>setUpWithError()<\/code> and <code>tearDownWithError()<\/code> are two functions that get called before and after (respectively) every single test is run. For this project, we don't need it because we are only testing extension properties. The <code>testExample()<\/code> can be removed and the <code>testPerformanceExample()<\/code> can also be removed. The latter will time your code so you can refractor and improve costly calculations. This is beyond the scope of this tutorial.<\/p><p>Before we can start testing and using our functions, we need to add one line of code towards the top. Under <code>import XCTest<\/code> add the following.<\/p><pre><code><span class=\"keyword\">@testable import<\/span> How_To_Use_Unit_Testing\n<\/code><\/pre><p>This allows us to test our project and use any functions and extensions that we wrote for it.<\/p><p>When we write a test, you need to name the function a specific way. It needs to start with <code>test<\/code> then you can fill in the rest how you want. There are various naming conventions, and you can choose the one you like. Personally, I like to name it <code>test(what am I testing)_(what should the result be)<\/code>. Then, to check our result, we use the <code>XCTAssert<\/code> function. There are many to choose from, and often, you can choose the one you want. You can use <code>XCTAssert<\/code> for everything and type in your conditions yourself. However, I like to be explicit. Since we are validating something is true, let's use <code>XCTAssertTrue()<\/code>. Let's write our first test for a passing first name<\/p><pre><code><span class=\"keyword\">func<\/span> testFirstNameHarryIsValid_True() {\n  <span class=\"keyword\">let<\/span> name = <span class=\"string\">\"Harry\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = name.<span class=\"property\">isValidFirstName<\/span>\n  <span class=\"call\">XCTAssertTrue<\/span>(isValid, <span class=\"string\">\"Uh oh!<\/span> \\(name) <span class=\"string\">is not valid\"<\/span>)\n}\n<\/code><\/pre><p>Now, either press <code>cmd + u<\/code> to run your test or press the diamond next to the function (or the class to run all tests). You should see this.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/10\/10-05.png\" alt=\"Failing Test\"\/><p>Oh no! Our test failed! However, that was expected. At this point, we should go correct our string extension to help us pass our test. But before we do that, I want you to navigate to <code>viewController.swift<\/code>, and let's add some code. I want you to see it failing in the app first, then we can finish the tests. Inside <code>viewController.swift<\/code>, edit your button tapped function. We want to check for validation, and if it's invalid set up an alert as we well as highlight which text field is invalid. This means we want to create a bool variable as true, but turn it to false if our textfield is invalid. Let's also add some color to our textfield so it's easier for the user to know which textfield is invalid. Edit your function in <code>viewDidLoad<\/code> to look like this<\/p><pre><code><span class=\"keyword\">@IBAction func<\/span> validateTapped(<span class=\"keyword\">_<\/span> sender: <span class=\"type\">Any<\/span>) {\n  <span class=\"keyword\">var<\/span> validForm = <span class=\"keyword\">true\n   \n  if let<\/span> firstName = firstNameTextField.<span class=\"property\">text<\/span> {\n    <span class=\"keyword\">if<\/span> !firstName.<span class=\"property\">isValidFirstName<\/span> {\n      validForm = <span class=\"keyword\">false<\/span>\n      firstNameTextField.<span class=\"call\">invalidate<\/span>()\n    }\n  } <span class=\"keyword\">else<\/span> {\n    validForm = <span class=\"keyword\">false<\/span>\n    firstNameTextField.<span class=\"call\">invalidate<\/span>()\n  }\n   \n  <span class=\"keyword\">var<\/span> title = <span class=\"string\">\"\"<\/span>\n  <span class=\"keyword\">var<\/span> message = <span class=\"string\">\"\"<\/span>\n  <span class=\"keyword\">if<\/span> validForm {\n    title = <span class=\"string\">\"Success!\"<\/span>\n    message = <span class=\"string\">\"All of your forms are valid\"<\/span>\n  } <span class=\"keyword\">else<\/span> {\n    title = <span class=\"string\">\"Oops!\"<\/span>\n    message = <span class=\"string\">\"Some fields are invalid. Please correct and resubmit.\"<\/span>\n  }\n   \n  <span class=\"keyword\">let<\/span> ac = <span class=\"type\">UIAlertController<\/span>(title: title, message: message, preferredStyle: .<span class=\"dotAccess\">alert<\/span>)\n  ac.<span class=\"call\">addAction<\/span>(<span class=\"type\">UIAlertAction<\/span>(title: <span class=\"string\">\"OK\"<\/span>, style: .<span class=\"dotAccess\">default<\/span>))\n  <span class=\"call\">present<\/span>(ac, animated: <span class=\"keyword\">true<\/span>)\n}\n<\/code><\/pre><p>Let's discuss what this does.<\/p><ol><li>Create a bool that starts as true<\/li><\/ol><ol start=\"2\"><li>Check to see if the textfield contains text. If it doesn't mark the form as invalid and also invalidate the text field.<\/li><\/ol><ol start=\"3\"><li>If it is valid, continue without doing anything<\/li><\/ol><ol start=\"4\"><li>Once all validation is complete, show an alert either saying everything is valid or telling the user to correct their mistake and resubmit.<\/li><\/ol><p>As you can guess, we should have an invalid form when we are finished. After all, our string extension returns <code>false<\/code>.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/10\/10-06.gif\" alt=\"First Name Invalidation\"\/><h3>Making Our Test Pass<\/h3><p>Now let's head back over to <code>String+Extension<\/code> and help our test pass. It comes down to you, as the programmer, on what you want to allow to pass. Every app and be different, although, you will probably be able to reuse some functions. We will write some very basic validation steps for the purpose of this app. We will make sure that <code>firstName<\/code> is only characters. We will add a bit of spice to make it case-insensitive, though. Edit <code>isValidFirstName<\/code> to look like this.<\/p><pre><code><span class=\"keyword\">var<\/span> isValidFirstName: <span class=\"type\">Bool<\/span> {\n  <span class=\"keyword\">guard self<\/span>.<span class=\"property\">count<\/span> &gt; <span class=\"number\">0<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return false<\/span> }\n  <span class=\"keyword\">let<\/span> array = <span class=\"type\">Array<\/span>(<span class=\"keyword\">self<\/span>.<span class=\"call\">lowercased<\/span>().<span class=\"call\">trimmingCharacters<\/span>(in: .<span class=\"dotAccess\">whitespaces<\/span>))\n  <span class=\"keyword\">let<\/span> characters = <span class=\"string\">\"abcdefghijklmnopqrstuvwxyz\"<\/span>\n  <span class=\"keyword\">for<\/span> character <span class=\"keyword\">in<\/span> array {\n    <span class=\"keyword\">if<\/span> !characters.<span class=\"call\">contains<\/span>(character) {\n      <span class=\"keyword\">return false<\/span>\n    }\n  }\n   \n  <span class=\"keyword\">return true<\/span>\n}\n<\/code><\/pre><ol><li>This will check to see if the string contains at least something, or return false<\/li><\/ol><ol start=\"2\"><li>Then it creates an array of all the characters in the string<\/li><\/ol><ol start=\"3\"><li>Create a string of characters we want to be valid<\/li><\/ol><ol start=\"4\"><li>Loop through our array of characters, if our valid character contains the character being checked, do nothing. If it doesn't, bail and return false.<\/li><\/ol><ol start=\"5\"><li>If we make it through the end, it means all characters are valid so we can return true.<\/li><\/ol><p>You should be able to run your test now and see it pass. Here are a couple more tests that you can use. Note that you should also test false cases. There is no such thing as too many tests!!!<\/p><pre><code><span class=\"keyword\">func<\/span> testFirstNamehermioneIsValid_True() {\n  <span class=\"keyword\">let<\/span> name = <span class=\"string\">\"hermione\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = name.<span class=\"property\">isValidFirstName<\/span>\n  <span class=\"call\">XCTAssertTrue<\/span>(isValid, <span class=\"string\">\"Uh oh!<\/span> \\(name) <span class=\"string\">is not valid\"<\/span>)\n}\n<span class=\"keyword\">func<\/span> testFirstNameRon5IsValid_False() {\n  <span class=\"keyword\">let<\/span> name = <span class=\"string\">\"Ron5\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = name.<span class=\"property\">isValidFirstName<\/span>\n  <span class=\"call\">XCTAssertFalse<\/span>(isValid, <span class=\"string\">\"Uh oh!<\/span> \\(name) <span class=\"string\">is not valid\"<\/span>)\n}\n<\/code><\/pre><h3>Writing Date of Birth Test<\/h3><p>Remember to start with a failing test. Here's my <code>String<\/code> extension as well as my first test case.<\/p><pre><code><span class=\"keyword\">var<\/span> isValidDOB: <span class=\"type\">Bool<\/span> {\n  <span class=\"keyword\">return false<\/span>\n}\n\n<span class=\"keyword\">func<\/span> testDobIsValid1_True() {\n  <span class=\"keyword\">let<\/span> dob = <span class=\"string\">\"07\/31\/1980\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = dob.<span class=\"property\">isValidDOB<\/span>\n  <span class=\"call\">XCTAssertTrue<\/span>(isValid)\n}\n<\/code><\/pre><p>After verifying my test fails, it's time to correct the <code>String<\/code> property. Note that we do not have to run our app right now. We can do that at the very end after all of our test cases! Now there are many ways to test date of birth. And honestly, letting a user manually type it in will only cause you more trouble than it's worth. It's better to use a picker so they pretty much have to enter it in the format that you want. However, for the purpose of this tutorial, we will be checking for one format. Edit <code>isValidDOB<\/code> to this. Here is also another test case you can use.<\/p><pre><code><span class=\"keyword\">var<\/span> isValidDateOfBirth: <span class=\"type\">Bool<\/span> {\n  <span class=\"keyword\">let<\/span> formatter = <span class=\"type\">DateFormatter<\/span>()\n  formatter.<span class=\"property\">dateFormat<\/span> = <span class=\"string\">\"MM\/dd\/yyyy\"<\/span>\n   \n  <span class=\"keyword\">return<\/span> formatter.<span class=\"call\">date<\/span>(from: <span class=\"keyword\">self<\/span>) != <span class=\"keyword\">nil<\/span> &amp;&amp; <span class=\"keyword\">self<\/span>.<span class=\"property\">count<\/span> &gt; <span class=\"number\">8<\/span>\n}\n\n<span class=\"keyword\">func<\/span> testDobIsValid1_False() {\n  <span class=\"keyword\">let<\/span> dob = <span class=\"string\">\"07\/31\/80\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = dob.<span class=\"property\">isValidDOB<\/span>\n  <span class=\"call\">XCTAssertFalse<\/span>(isValid)\n}\n<\/code><\/pre><p>Once again, add more tests, keep refractoring the code to what you want.<\/p><h3>Writing PIN number test<\/h3><p>A valid PIN should be four digits long and contain only numbers. This is very easy to do if you know the shortcut. We can test the string for a count == 4, then see if it contains only numbers. Most people go in the same direction we took with the name, by creating an array of digits, looping through the string, comparing each loop through the array of digits, and react accordingly. This works, sure. But it's more code than is needed. Instead, let's use some Swift skills! Swift gives you the option to convert any string into an Integer. However, you can't convert something like <code>firebolt<\/code> to a number. So when you try this in Swift, it returns a <code>nil<\/code> value. So let's check if we can convert our string to an integer, and then we can return <code>true\/false<\/code> based on if we get a nil value or not. Here is the <code>String<\/code> extension as well as some test cases for you.<\/p><pre><code><span class=\"keyword\">var<\/span> isValidPin: <span class=\"type\">Bool<\/span> {\n  <span class=\"keyword\">return self<\/span>.<span class=\"property\">count<\/span> == <span class=\"number\">4<\/span> &amp;&amp; <span class=\"type\">Int<\/span>(<span class=\"keyword\">self<\/span>) != <span class=\"keyword\">nil<\/span>\n}\n\n<span class=\"keyword\">func<\/span> test1234IsValid_True() {\n  <span class=\"keyword\">let<\/span> pin = <span class=\"string\">\"1234\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = pin.<span class=\"property\">isValidPin<\/span>\n  <span class=\"call\">XCTAssertTrue<\/span>(isValid)\n}\n\n<span class=\"keyword\">func<\/span> test12345IsValid_False() {\n  <span class=\"keyword\">let<\/span> pin = <span class=\"string\">\"12345\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = pin.<span class=\"property\">isValidPin<\/span>\n  <span class=\"call\">XCTAssertFalse<\/span>(isValid)\n}\n\n<span class=\"keyword\">func<\/span> testa234ISValid_False() {\n  <span class=\"keyword\">let<\/span> pin = <span class=\"string\">\"a234\"<\/span>\n  <span class=\"keyword\">let<\/span> isValid = pin.<span class=\"property\">isValidPin<\/span>\n  <span class=\"call\">XCTAssertFalse<\/span>(isValid)\n}\n<\/code><\/pre><h3>Conclusion<\/h3><p>And there you have it! You can now write your code and ensure you get the results you want. Note that you didn't even have to start anything in <code>viewController.swift<\/code> yet. Of course, you'll want to test it in simulator or a real device before deploying, but I hope you see how using Unit Testing can help you become a better programmer and save headaches in the future. In your own projects, you should write as many unique test cases as you can think of and run your tests often. If you are adding test cases to an already existing project that doesn't contain them, you may find it difficult and \"not worth it\". Just add them sporadically as you work on something relevant. If you want to see and\/or download the final project you can do so <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\">here<\/a>.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/09-how-to-use-uicolorwell<\/guid><title>Using UIColorWell with UIKit<\/title><description>Learn how to implement UIColorWell in your apps to help users pick colors easier and more efficiently.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/09-how-to-use-uicolorwell<\/link><pubDate>Sun, 25 Oct 2020 14:48:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Using UIColorWell with UIKit<\/h1><div class=\"post-tags\" markdown=\"1\">\n    <a class=\"post-category post-category-uicolorwell\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uicolorwell\">UIColorWell<\/a>\n    <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><h3>UIColorWell<\/h3><p>iOS 14 brought us many new features, one of them being the UIColorWell. This is not to be confused with UIColorPickerViewController, which while similar is handled just a bit differently. UIColorWell is a control that displays a color picker, but it also shows a little icon of the selected color in a wheel format to the user. While you can't add it using storyboard, it's very simple to add it in code.<\/p><pre><code><span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UIViewController<\/span> {\n    \n    <span class=\"keyword\">var<\/span> colorWell: <span class=\"type\">UIColorWell<\/span>!\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        colorWell = <span class=\"type\">UIColorWell<\/span>()\n        colorWell.<span class=\"property\">frame<\/span> = <span class=\"type\">CGRect<\/span>(x: <span class=\"number\">200<\/span>, y: <span class=\"number\">135<\/span>, width: <span class=\"number\">100<\/span>, height: <span class=\"number\">100<\/span>)\n        \n        view.<span class=\"call\">addSubview<\/span>(colorWell)\n    }\n}\n<\/code><\/pre><p>The above code will give you a color wheel displayed on the screen, in which you can click can and see various options for how the user can select their own color.<\/p><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/09\/09-01.gif\" alt=\"Basic Color Picker\"\/><p>You can customize your color well with a few different options, such as adding a custom title and turning off the alpha support which is true by default. You can also set a selected color that the color wheel will display in its inner circle.<\/p><pre><code>colorWell.<span class=\"property\">title<\/span> = <span class=\"string\">\"My Custom Title\"<\/span>\ncolorWell.<span class=\"property\">selectedColor<\/span> = .<span class=\"dotAccess\">systemRed<\/span>\ncolorWell.<span class=\"property\">supportsAlpha<\/span> = <span class=\"keyword\">false<\/span>\n<\/code><\/pre><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/09\/09-02.png\" alt=\"Color Picker Customized\"\/><p>Finally, you can use the color selected by accessing the <code>colorWell.selectedColor<\/code> property.<\/p><pre><code><span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UIViewController<\/span> {\n    \n    <span class=\"keyword\">var<\/span> colorWell: <span class=\"type\">UIColorWell<\/span>!\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        \n        <span class=\"keyword\">let<\/span> changeBgBtn = <span class=\"type\">UIButton<\/span>()\n        changeBgBtn.<span class=\"property\">frame<\/span> = <span class=\"type\">CGRect<\/span>(x: <span class=\"number\">80<\/span>, y: <span class=\"number\">100<\/span>, width: <span class=\"number\">100<\/span>, height: <span class=\"number\">100<\/span>)\n        changeBgBtn.<span class=\"call\">setTitle<\/span>(<span class=\"string\">\"Tap me\"<\/span>, for: .<span class=\"dotAccess\">normal<\/span>)\n        changeBgBtn.<span class=\"call\">addTarget<\/span>(<span class=\"keyword\">self<\/span>, action: <span class=\"keyword\">#selector<\/span>(changeBgColorWheel), for: .<span class=\"dotAccess\">touchUpInside<\/span>)\n        view.<span class=\"call\">addSubview<\/span>(changeBgBtn)\n        \n        colorWell = <span class=\"type\">UIColorWell<\/span>()\n        colorWell.<span class=\"property\">frame<\/span> = <span class=\"type\">CGRect<\/span>(x: <span class=\"number\">200<\/span>, y: <span class=\"number\">135<\/span>, width: <span class=\"number\">100<\/span>, height: <span class=\"number\">100<\/span>)\n        colorWell.<span class=\"property\">title<\/span> = <span class=\"string\">\"My Custom Title\"<\/span>\n        colorWell.<span class=\"property\">selectedColor<\/span> = .<span class=\"dotAccess\">systemRed<\/span>\n        \n        view.<span class=\"call\">addSubview<\/span>(colorWell)\n        \n    }\n    \n    <span class=\"keyword\">@objc func<\/span> changeBgColorWheel() {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">view<\/span>.<span class=\"property\">backgroundColor<\/span> = colorWell?.<span class=\"property\">selectedColor<\/span>\n    }\n    \n}\n<\/code><\/pre><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/09\/09-03.gif\" alt=\"Using Color Picker Selected Color\"\/><p>Feel free to download this project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\">here<\/a>.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/08-how-to-use-uisearchcontroller<\/guid><title>Using UISearchController with UIKit<\/title><description>Learn how to implement UISearchController in your apps to help users search through content easier.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/08-how-to-use-uisearchcontroller<\/link><pubDate>Sat, 10 Oct 2020 14:48:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Using UISearchController with UIKit<\/h1><div class=\"post-tags\" markdown=\"1\">\n    <a class=\"post-category post-category-uisearchcontroller\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uisearchcontroller\">UISearchController<\/a>\n    <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><h3>Getting started<\/h3><p>Go ahead and download the starter project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\">here<\/a>. If you don't want to download the starter project, just simply make your own tableview embedded in a navigation controller with some pre-populated data. I recommend adding a title and subtitle to your tableview so we can search by two different things, but this tutorial will use my starter project in all the examples.<\/p><p>Great! So now we have a tableview that lists different Hogwarts students as well as their appropriate houses. I also color-coded it so make it easier to see what's happening. If you're using the start project and you run it you should see something like this:<\/p><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/08\/08-01.png\" alt=\"Hogwarts Student TableView\"\/><p>This is created from the following code assuming you have storyboard set up<\/p><pre><code><span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">class<\/span> TableViewController: <span class=\"type\">UITableViewController<\/span>{\n   \n  <span class=\"keyword\">var<\/span> students = [<span class=\"type\">Student<\/span>]()\n   \n  <span class=\"keyword\">override func<\/span> viewDidLoad() {\n    <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n     \n    <span class=\"call\">createStudents<\/span>()\n  }\n   \n  <span class=\"keyword\">func<\/span> createStudents() {\n    <span class=\"keyword\">let<\/span> harry = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Harry Potter\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> hermione = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Hermione Granger\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> ron = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Ronald Weasley\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> luna = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Luna Lovegood\"<\/span>, house: <span class=\"string\">\"Ravenclaw\"<\/span>)\n    <span class=\"keyword\">let<\/span> ginny = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Ginny Weasley\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> fred = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Fred Weasley\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> george = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"George Weasley\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> neville = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Neville Longbottom\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> dean = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Dean Thomas\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> draco = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Draco Malfoy\"<\/span>, house: <span class=\"string\">\"Slytherin\"<\/span>)\n    <span class=\"keyword\">let<\/span> parvati = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Parvati Patil\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n    <span class=\"keyword\">let<\/span> padma = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Padma Patil\"<\/span>, house: <span class=\"string\">\"Ravenclaw\"<\/span>)\n    <span class=\"keyword\">let<\/span> cedric = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Cedric Diggory\"<\/span>, house: <span class=\"string\">\"Hufflepuff\"<\/span>)\n    <span class=\"keyword\">let<\/span> hannah = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Hannah Abbott\"<\/span>, house: <span class=\"string\">\"Hufflepuff\"<\/span>)\n    <span class=\"keyword\">let<\/span> zacharias = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Zacharias Smith\"<\/span>, house: <span class=\"string\">\"Hufflepuff\"<\/span>)\n    <span class=\"keyword\">let<\/span> crabbe = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Vincent Crabbe\"<\/span>, house: <span class=\"string\">\"Slytherin\"<\/span>)\n    <span class=\"keyword\">let<\/span> goyle = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Gregory Goyle\"<\/span>, house: <span class=\"string\">\"Slytherin\"<\/span>)\n     \n    students += [harry, hermione, ron, ginny, fred, george, luna, neville, dean, draco, parvati, padma, cedric, hannah, zacharias, crabbe, goyle]\n  }\n   \n  <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, cellForRowAt indexPath: <span class=\"type\">IndexPath<\/span>) -&gt; <span class=\"type\">UITableViewCell<\/span> {\n    <span class=\"keyword\">let<\/span> cell = tableView.<span class=\"call\">dequeueReusableCell<\/span>(withIdentifier: <span class=\"string\">\"Cell\"<\/span>, for: indexPath)\n     \n    <span class=\"keyword\">let<\/span> student = students[indexPath.<span class=\"property\">row<\/span>]\n     \n    cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">text<\/span> = student.<span class=\"property\">name<\/span>\n    cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">text<\/span> = student.<span class=\"property\">house<\/span>\n    cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">font<\/span> = .<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">headline<\/span>)\n    cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">font<\/span> = .<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">subheadline<\/span>)\n    cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">textColor<\/span> = .<span class=\"dotAccess\">white<\/span>\n    cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">textColor<\/span> = .<span class=\"dotAccess\">white<\/span>\n     \n    <span class=\"keyword\">switch<\/span> student.<span class=\"property\">house<\/span> {\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"Gryffindor\"<\/span>:\n      cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">174<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">0<\/span>, blue: <span class=\"number\">1<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"Ravenclaw\"<\/span>:\n      cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">34<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">47<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">91<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"Hufflepuff\"<\/span>:\n      cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">255<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">219<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">0<\/span>, alpha: <span class=\"number\">1<\/span>)\n      cell.<span class=\"property\">textLabel<\/span>?.<span class=\"property\">textColor<\/span> = .<span class=\"dotAccess\">black<\/span>\n      cell.<span class=\"property\">detailTextLabel<\/span>?.<span class=\"property\">textColor<\/span> = .<span class=\"dotAccess\">black<\/span>\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"Slytherin\"<\/span>:\n      cell.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">42<\/span>\/<span class=\"number\">255<\/span>, green: <span class=\"number\">98<\/span>\/<span class=\"number\">255<\/span>, blue: <span class=\"number\">61<\/span>\/<span class=\"number\">255<\/span>, alpha: <span class=\"number\">1<\/span>)\n    <span class=\"keyword\">default<\/span>:\n      <span class=\"keyword\">break<\/span>\n    }\n     \n    <span class=\"keyword\">return<\/span> cell\n  }\n   \n  <span class=\"keyword\">override func<\/span> numberOfSections(in tableView: <span class=\"type\">UITableView<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n    <span class=\"number\">1<\/span>\n  }\n\n  <span class=\"keyword\">override func<\/span> tableView(<span class=\"keyword\">_<\/span> tableView: <span class=\"type\">UITableView<\/span>, numberOfRowsInSection section: <span class=\"type\">Int<\/span>) -&gt; <span class=\"type\">Int<\/span> {\n    students.<span class=\"property\">count<\/span>\n  }\n\n}\n\n<span class=\"keyword\">struct<\/span> Student {\n  <span class=\"keyword\">var<\/span> name: <span class=\"type\">String<\/span>\n  <span class=\"keyword\">var<\/span> house: <span class=\"type\">String<\/span>\n}\n\n<\/code><\/pre><p>The first step is to create the UISearchController and add it to the navigation bar. This is done with the following lines of code inside of your <code>viewDidLoad<\/code> method.<\/p><pre><code><span class=\"keyword\">let<\/span> searchController = <span class=\"type\">UISearchController<\/span>(searchResultsController: <span class=\"keyword\">nil<\/span>)\nsearchController.<span class=\"property\">searchResultsUpdater<\/span> = <span class=\"keyword\">self<\/span>\nsearchController.<span class=\"property\">obscuresBackgroundDuringPresentation<\/span> = <span class=\"keyword\">false<\/span>\nsearchController.<span class=\"property\">searchBar<\/span>.<span class=\"property\">placeholder<\/span> = <span class=\"string\">\"Search...\"<\/span>\nnavigationItem.<span class=\"property\">searchController<\/span> = searchController\n<\/code><\/pre><p>Now your app won't compile, but it's an easy fix. The reason is because we now need to confrom to the <code>UISearchResultsUpdating<\/code> protocol. So add that protocol now as well as a the following protocol stub that we will look at later.<\/p><pre><code><span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UITableViewController<\/span>, <span class=\"type\">UISearchResultsUpdating<\/span> {\n  .....\n  \n  <span class=\"keyword\">func<\/span> updateSearchResults(for searchController: <span class=\"type\">UISearchController<\/span>) {\n      <span class=\"comment\">\/\/ will fill in later<\/span>\n  }\n}\n<\/code><\/pre><p>When you run your app now you should see a UISearchController inside your app, but it won't do anything yet!<\/p><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/08\/08-02.png\" alt=\"Hogwarts Student TableView With UISearchController\" width=\"800\"\/><h3>Setting up filtering<\/h3><p>There is a trick to filtering your data if you want it to be reusable. Think about it this way. You have a list of something, you filter that list and get a new list back, and you can repeat the process as much as you want. But want if you want all items in the list back? You've already filtered out items so they don't exist anymore! We can solve this by creating <em>two<\/em> lists. One list will hold all items while the other will be a filtered list.<\/p><p>Add the following property below your students array at the top of your code.<\/p><pre><code><span class=\"keyword\">var<\/span> filteredStudents = [<span class=\"type\">Student<\/span>]()\n<\/code><\/pre><p>Then we want to set up our app to read from <code>filteredStudents<\/code> instead of <code>students<\/code>. But we also need to set <code>filteredStudents<\/code>. Go ahead and set <code>filteredStudents<\/code> at the bottom of <code>createStudents()<\/code> by adding<\/p><pre><code>filteredStudents = students\n<\/code><\/pre><p>Then change your <code>cellForRowAt<\/code> method to be<\/p><pre><code><span class=\"keyword\">let<\/span> student = filteredStudents[indexPath.<span class=\"property\">row<\/span>]\n<\/code><\/pre><p>Last, change <code>numberOfRows<\/code> in section to<\/p><pre><code>filteredStudents.<span class=\"property\">count<\/span>\n<\/code><\/pre><p>You should be able to run your app now and see the same thing as before, but the UISearchController still won't work!<\/p><h3>Making the filtering work<\/h3><p>Here's where we make the magic happen. We need to do a few different things to make our data filterable.<\/p><ol><li>We need to create a variable that allows us to hold the text we want to filter by.<\/li><\/ol><ol start=\"2\"><li>We need to call update our <code>updateSearchController<\/code> function that changes the variable created in step 1 to what the user types in<\/li><\/ol><ol start=\"3\"><li>We need to filter our <code>filteredStudents<\/code> array every time we set our filtered text in step 2<\/li><\/ol><ol start=\"4\"><li>We need to update our tableview every time the filter text gets set and the <code>filteredStudents<\/code> array gets filtered<\/li><\/ol><p>Wow, that can be wordy. But let's do it one step at a time.<\/p><h4>1) Create a variable that allows us to hold the text we want to filter by<\/h4><p>Easy enough, add the following at the top of your class function.<\/p><pre><code><span class=\"keyword\">var<\/span> filterText: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span>\n<\/code><\/pre><h4>2) Change <code>updateSearchController<\/code> to edit the variable as the user types<\/h4><pre><code><span class=\"keyword\">func<\/span> updateSearchResults(for searchController: <span class=\"type\">UISearchController<\/span>) {\n    <span class=\"keyword\">if let<\/span> text = searchController.<span class=\"property\">searchBar<\/span>.<span class=\"property\">text<\/span> {\n        filterText = text\n    }\n}\n<\/code><\/pre><p><em>Note: I choose to unwrap the text here so I don't have to unwrap it later. It's your choice!<\/em><\/p><h4>3) Filter our <code>filteredStudents<\/code> array everytime <code>filteredText<\/code> is set.<\/h4><p>This is done easily enough by using a <code>didSet<\/code> method on our variable. This means that every time we set the variable, we can do something else. Edit <code>filteredText<\/code> to look like this.<\/p><pre><code><span class=\"keyword\">var<\/span> filterText: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span> {\n    <span class=\"keyword\">didSet<\/span> {\n        filteredStudents = students.<span class=\"call\">matching<\/span>(filterText)\n    }\n}\n<\/code><\/pre><p>This code won't run yet, because we don't have a <code>matching<\/code> function. We can create an extension on <code>Array<\/code> that allows us to pass in a string to help filter our array. Note that we don't need to unwrap here since it was done in step 2. The extension does a couple of things.<\/p><ol><li>Takes in a string and returns a student array <code>[Student]<\/code>.<\/li><\/ol><ol start=\"2\"><li>If the text has a count greater than 0, or <em>something<\/em> we can filter by, call the <code>filter()<\/code> function that arrays already have. If you want to keep it case-insensitive then make sure you lowercase both the element in the array as well as the text passed in. This is the section where you can add any kind of logic you want. In this example, we will filter by name OR house using the || operator.<\/li><\/ol><ol start=\"3\"><li>If <code>text.count<\/code> is equal to zero it means there is nothing written in the UISearchController so just return the full array. Add this extension now.<\/li><\/ol><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Array<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Element<\/span> == <span class=\"type\">Student<\/span> {\n  <span class=\"keyword\">func<\/span> matching(<span class=\"keyword\">_<\/span> text: <span class=\"type\">String<\/span>) -&gt; [<span class=\"type\">Student<\/span>] {\n    <span class=\"keyword\">if<\/span> text.<span class=\"property\">count<\/span> &gt; <span class=\"number\">0<\/span> {\n      <span class=\"keyword\">return self<\/span>.<span class=\"call\">filter<\/span> {\n        $0.<span class=\"property\">name<\/span>.<span class=\"call\">lowercased<\/span>().<span class=\"call\">contains<\/span>(text.<span class=\"call\">lowercased<\/span>()) || $0.<span class=\"property\">house<\/span>.<span class=\"call\">lowercased<\/span>().<span class=\"call\">contains<\/span>(text.<span class=\"call\">lowercased<\/span>())\n      }\n    } <span class=\"keyword\">else<\/span> {\n      <span class=\"keyword\">return self<\/span>\n    }\n  }\n}\n<\/code><\/pre><h4>4) Update our tableview everytime the filter text gets set and <code>filteredStudents<\/code> array gets filtered.<\/h4><p>This part can be done a couple of ways. The easiest way is to call <code>self.tableView.reloadData()<\/code> inside of your did set.<\/p><pre><code><span class=\"keyword\">var<\/span> filterText: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span> {\n  <span class=\"keyword\">didSet<\/span> {\n    filteredStudents = students.<span class=\"call\">matching<\/span>(filterText)\n    <span class=\"keyword\">self<\/span>.<span class=\"property\">tableView<\/span>.<span class=\"call\">reloadData<\/span>()\n  }\n}\n<\/code><\/pre><p>Another, and arguably better option, is to create a closure that gets called when <code>filterSet<\/code> is set and give that closure a method in <code>viewDidLoad<\/code>. This is helpful if you have your data source separated from your view controller. If you want to go that route then add the following variable and edit <code>filterText<\/code> to this.<\/p><pre><code><span class=\"keyword\">var<\/span> dataChanged: (() -&gt; <span class=\"type\">Void<\/span>)?\n<span class=\"keyword\">var<\/span> filterText: <span class=\"type\">String<\/span> = <span class=\"string\">\"\"<\/span> {\n  <span class=\"keyword\">didSet<\/span> {\n    filteredStudents = students.<span class=\"call\">matching<\/span>(filterText)\n    dataChanged?()\n  }\n}\n<\/code><\/pre><p>Then inside of <code>viewDidLoad<\/code> you can set <code>dataChanged<\/code> like this.<\/p><pre><code>dataChanged = {\n  <span class=\"keyword\">self<\/span>.<span class=\"property\">tableView<\/span>.<span class=\"call\">reloadData<\/span>()\n}\n<\/code><\/pre><img class=\"post-image img-sm\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/08\/08-05.gif\" alt=\"Filtering gif\" width=\"800\"\/><p>Whichever method you choose, you should be good to go! Go ahead and run the app now and you should be able to filter in real-time. Feel free to also take a look at the full project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\">here<\/a>.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/07-how-to-autoincrement-ids-in-models<\/guid><title>Automatically incrementing id's inside a list of custom objects.<\/title><description>Creating a list of custom objects can pose challenges. Here we explain how to make it a bit easier by automatically incrementing ID's for each object.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/07-how-to-autoincrement-ids-in-models<\/link><pubDate>Fri, 18 Sep 2020 14:48:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Automatically incrementing id's inside a list of custom objects.<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-structs\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/structs\">Structs<\/a>\n        <a class=\"post-category post-category-codable\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/codable\">Codable<\/a>\n        <a class=\"post-category post-category-extensions\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/extensions\">Extensions<\/a>\n<\/div><h3>Creating a list of objects<\/h3><p>Let's say you have a basic JSON list that looks like this:<\/p><pre><code>[\n  {\n    <span class=\"string\">\"id\"<\/span> : <span class=\"number\">1<\/span>,\n    <span class=\"string\">\"name\"<\/span> : <span class=\"string\">\"Harry Potter\"<\/span>,\n    <span class=\"string\">\"house\"<\/span> : <span class=\"string\">\"Gryffindor\"<\/span>\n  },\n  {\n    <span class=\"string\">\"id\"<\/span> : <span class=\"number\">2<\/span>,\n    <span class=\"string\">\"name\"<\/span> : <span class=\"string\">\"Hermione Granger\"<\/span>,\n    <span class=\"string\">\"house\"<\/span> : <span class=\"string\">\"Gryffindor\"<\/span>\n  },\n  {\n    <span class=\"string\">\"id\"<\/span> : <span class=\"number\">3<\/span>,\n    <span class=\"string\">\"name\"<\/span> : <span class=\"string\">\"Draco Malfoy\"<\/span>,\n    <span class=\"string\">\"house\"<\/span> : <span class=\"string\">\"Slytherin\"<\/span>\n  },\n  {\n    <span class=\"string\">\"id\"<\/span> : <span class=\"number\">4<\/span>,\n    <span class=\"string\">\"name\"<\/span> : <span class=\"string\">\"Luna Lovegood\"<\/span>,\n    <span class=\"string\">\"house\"<\/span> : <span class=\"string\">\"Ravenclaw\"<\/span>\n  },\n  {\n    <span class=\"string\">\"id\"<\/span> : <span class=\"number\">5<\/span>,\n    <span class=\"string\">\"name\"<\/span> : <span class=\"string\">\"Cedric Diggory\"<\/span>,\n    <span class=\"string\">\"house\"<\/span> : <span class=\"string\">\"Hufflepuff\"<\/span>\n  }\n]\n\n<\/code><\/pre><p>This holds a students name, the house they are in, and a custom ID. To create something like this in Swift you might create the following struct:<\/p><pre><code><span class=\"keyword\">struct<\/span> Student: <span class=\"type\">Codable<\/span> {\n    <span class=\"keyword\">let<\/span> id: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> name: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> house: <span class=\"type\">String<\/span>\n}\n<\/code><\/pre><p>Then you can add each student like so:<\/p><pre><code><span class=\"keyword\">let<\/span> harry = <span class=\"type\">Student<\/span>(id: <span class=\"number\">1<\/span>, name: <span class=\"string\">\"Harry Potter\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n<span class=\"keyword\">let<\/span> hermione = <span class=\"type\">Student<\/span>(id: <span class=\"number\">2<\/span>, name: <span class=\"string\">\"Hermione Granger\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n<span class=\"keyword\">let<\/span> draco = <span class=\"type\">Student<\/span>(id: <span class=\"number\">3<\/span>, name: <span class=\"string\">\"Draco Malfoy\"<\/span>, house: <span class=\"string\">\"Slytherin\"<\/span>)\n<span class=\"keyword\">let<\/span> luna = <span class=\"type\">Student<\/span>(id: <span class=\"number\">4<\/span>, name: <span class=\"string\">\"Luna Lovegood\"<\/span>, house: <span class=\"string\">\"Ravenclaw\"<\/span>)\n<span class=\"keyword\">let<\/span> cedric = <span class=\"type\">Student<\/span>(id: <span class=\"number\">5<\/span>, name: <span class=\"string\">\"Cedric Diggory\"<\/span>, house: <span class=\"string\">\"Hufflepuff\"<\/span>)\n\n<span class=\"keyword\">let<\/span> students: [<span class=\"type\">Student<\/span>] = [harry, hermione, draco, luna, cedric]\n<\/code><\/pre><p>This works just fine. But imagine adding more and more students. How do you remember everyone's <code>id<\/code>? When you are registering each student, you're not expected to know the latest <code>id<\/code>. The only thing <em>you<\/em> need to know is their name and house they belong in. So how can we have an <code>id<\/code> that's created automatically?<\/p><p>You could create a variable for <code>id<\/code> and pass that in like this:<\/p><pre><code><span class=\"keyword\">var<\/span> studentID = <span class=\"number\">1<\/span>\n\n<span class=\"keyword\">let<\/span> harry = <span class=\"type\">Student<\/span>(id: studentID, name: <span class=\"string\">\"Harry Potter\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\nstudentID += <span class=\"number\">1<\/span>\n<span class=\"keyword\">let<\/span> hermione = <span class=\"type\">Student<\/span>(id: studentID, name: <span class=\"string\">\"Hermione Granger\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\nstudentID += <span class=\"number\">1<\/span>\n<span class=\"keyword\">let<\/span> draco = <span class=\"type\">Student<\/span>(id: studentID, name: <span class=\"string\">\"Draco Malfoy\"<\/span>, house: <span class=\"string\">\"Slytherin\"<\/span>)\nstudentID += <span class=\"number\">1<\/span>\n<span class=\"keyword\">let<\/span> luna = <span class=\"type\">Student<\/span>(id: studentID, name: <span class=\"string\">\"Luna Lovegood\"<\/span>, house: <span class=\"string\">\"Ravenclaw\"<\/span>)\nstudentID += <span class=\"number\">1<\/span>\n<span class=\"keyword\">let<\/span> cedric = <span class=\"type\">Student<\/span>(id: studentID, name: <span class=\"string\">\"Cedric Diggory\"<\/span>, house: <span class=\"string\">\"Hufflepuff\"<\/span>)\n<\/code><\/pre><p>And this would actually work. But it looks messy, right? A better way is to create a custom initializer in your struct that can automatically apply the id for you and automatically increment. This is done by editing your <code>Student<\/code> struct to look like this:<\/p><pre><code><span class=\"keyword\">var<\/span> studentID = <span class=\"number\">1<\/span>\n\n<span class=\"keyword\">struct<\/span> Student: <span class=\"type\">Codable<\/span> {\n    <span class=\"keyword\">let<\/span> id: <span class=\"type\">Int<\/span>\n    <span class=\"keyword\">let<\/span> name: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> house: <span class=\"type\">String<\/span>\n    \n    <span class=\"keyword\">init<\/span>(name: <span class=\"type\">String<\/span>, house: <span class=\"type\">String<\/span>) {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">id<\/span> = studentID\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">name<\/span> = name\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">house<\/span> = house\n        \n        studentID += <span class=\"number\">1<\/span>\n    }\n}\n<\/code><\/pre><p>Now when you add students you can actually leave the <code>id<\/code> parameter off completely and it will be taken care of behind the scenes.<\/p><pre><code><span class=\"keyword\">let<\/span> harry = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Harry Potter\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n<span class=\"keyword\">let<\/span> hermione = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Hermione Granger\"<\/span>, house: <span class=\"string\">\"Gryffindor\"<\/span>)\n<span class=\"keyword\">let<\/span> draco = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Draco Malfoy\"<\/span>, house: <span class=\"string\">\"Slytherin\"<\/span>)\n<span class=\"keyword\">let<\/span> luna = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Luna Lovegood\"<\/span>, house: <span class=\"string\">\"Ravenclaw\"<\/span>)\n<span class=\"keyword\">let<\/span> cedric = <span class=\"type\">Student<\/span>(name: <span class=\"string\">\"Cedric Diggory\"<\/span>, house: <span class=\"string\">\"Hufflepuff\"<\/span>)\n<\/code><\/pre><h3>Bonus<\/h3><p>If you want to print out your JSON in a pretty format here is a nice extension that helps with that. It deserializes your object into a formatted NSString.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Data<\/span> {\n    <span class=\"keyword\">var<\/span> prettyPrintedJSONString: <span class=\"type\">NSString<\/span>? {\n        <span class=\"keyword\">guard let<\/span> object = <span class=\"keyword\">try<\/span>? <span class=\"type\">JSONSerialization<\/span>.<span class=\"call\">jsonObject<\/span>(with: <span class=\"keyword\">self<\/span>, options: []),\n              <span class=\"keyword\">let<\/span> data = <span class=\"keyword\">try<\/span>? <span class=\"type\">JSONSerialization<\/span>.<span class=\"call\">data<\/span>(withJSONObject: object, options: [.<span class=\"dotAccess\">prettyPrinted<\/span>]),\n              <span class=\"keyword\">let<\/span> prettyPrintedString = <span class=\"type\">NSString<\/span>(data: data, encoding: <span class=\"type\">String<\/span>.<span class=\"type\">Encoding<\/span>.<span class=\"property\">utf8<\/span>.<span class=\"property\">rawValue<\/span>) <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return nil<\/span> }\n        \n        <span class=\"keyword\">return<\/span> prettyPrintedString\n    }\n}\n\n<span class=\"keyword\">let<\/span> jsonData = <span class=\"keyword\">try<\/span> <span class=\"type\">JSONEncoder<\/span>().<span class=\"call\">encode<\/span>(students)\n<span class=\"keyword\">let<\/span> jsonString = <span class=\"type\">String<\/span>(data: jsonData, encoding: .<span class=\"dotAccess\">utf8<\/span>)!\n<span class=\"keyword\">let<\/span> prettyString = jsonString.<span class=\"call\">data<\/span>(using: .<span class=\"dotAccess\">utf8<\/span>)!.prettyPrintedJSONString!\n<span class=\"call\">print<\/span>(prettyString)\n<\/code><\/pre>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/06-navigationview-with-swiftui<\/guid><title>All about NavigationView using SwiftUI<\/title><description>SwiftUI brings an easy way to handle navigation in your apps. This section will show you how to easily add a navigation view as well as navigation bar items to help you handle navigation.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/06-navigationview-with-swiftui<\/link><pubDate>Sat, 5 Sep 2020 20:48:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>All about NavigationView using SwiftUI<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-navigationview\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/navigationview\">NavigationView<\/a>\n        <a class=\"post-category post-category-navigationlink\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/navigationlink\">NavigationLink<\/a>\n        <a class=\"post-category post-category-swiftui\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/swiftui\">SwiftUI<\/a>\n<\/div><h3>Basic NavigationView<\/h3><p>Nearly all Swift apps have some sort of navigation in place and apps built with SwiftUI are no exception. It's simple to add a navigation view using SwiftUI. All you need to do is add the following code in your view<\/p><pre><code><span class=\"type\">NavigationView<\/span> {\n    <span class=\"comment\">\/\/ Content here<\/span>\n}\n<\/code><\/pre><p>Adding a title uses a simple modifier like most other views in SwiftUI, but there is a caveat. We do <em>not<\/em> attach the title to the NavigationView itself. Why? Because the title can change and we do not want to fix that title on every view we have during our navigation. For example, if you have an app that lists different Harry Potter spells by category, you may want the navigation title to be what category each set of spells is in. Let's see what I mean in action.<\/p><p>Take the following two structs, each one holding a view to different spells by two different categories.<\/p><pre><code><span class=\"keyword\">struct<\/span> CharmView: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">List<\/span>() {\n            <span class=\"type\">VStack<\/span>(alignment: .<span class=\"dotAccess\">leading<\/span>) {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Lumos Maxima\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">headline<\/span>)\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"incantation to a charm that can be used to produce a blinding flash of bright white light from the tip of the wand\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">subheadline<\/span>)\n            }\n            <span class=\"type\">VStack<\/span>(alignment: .<span class=\"dotAccess\">leading<\/span>) {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Oculus Reparo\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">headline<\/span>)\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"incantation of a variant of the Mending Charm, used to repair broken eyeglasses\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">subheadline<\/span>)\n            }\n            <span class=\"type\">Spacer<\/span>()\n            .<span class=\"call\">navigationBarTitle<\/span>(<span class=\"string\">\"Charm\"<\/span>)\n        }\n    }\n}\n\n<span class=\"keyword\">struct<\/span> CurseView: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">List<\/span>() {\n            <span class=\"type\">VStack<\/span>(alignment: .<span class=\"dotAccess\">leading<\/span>) {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Fiendfyre\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">headline<\/span>)\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"A bewitched flame of abnormal size and heat, infused with dark magic, capable of seeking out living targets despite being non-sentient\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">subheadline<\/span>)\n            }\n            <span class=\"type\">VStack<\/span>(alignment: .<span class=\"dotAccess\">leading<\/span>) {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Imperius Curse\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">headline<\/span>)\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"places the victim completely under the caster's control, though a person with exceptional strength of will is capable of resisting it\"<\/span>)\n                    .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">subheadline<\/span>)\n            }\n            <span class=\"type\">Spacer<\/span>()\n            .<span class=\"call\">navigationBarTitle<\/span>(<span class=\"string\">\"Curse\"<\/span>)\n        }\n    }\n}\n<\/code><\/pre><p>Note that we have a <code><\/code><code>.navigationBarTitle()<\/code><code><\/code> modifier added here, even though there is no navigation view. We wrap this entire view inside our NavigationView and then the title can adjust as needed.<\/p><pre><code><span class=\"type\">NavigationView<\/span> {\n    <span class=\"type\">CharmView<\/span>()\n}\n<\/code><\/pre><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-01.png\" alt=\"Navigation View Charm\" width=\"800\"\/><pre><code><span class=\"type\">NavigationView<\/span> {\n    <span class=\"type\">CurseView<\/span>()\n}\n<\/code><\/pre><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-02.png\" alt=\"Navigation View Curse\" width=\"800\"\/><h3>Adding Navigation Bar Items<\/h3><p>Adding navigation bar items is fairly simple to do as well. Let's create a bar button that toggles between both views created above. This also means we need to create a boolean that our button toggles and add both views in a Group so we can display each one depending on what the boolean equals.<\/p><pre><code><span class=\"keyword\">struct<\/span> ContentView: <span class=\"type\">View<\/span> {\n    \n    <span class=\"keyword\">@State private var<\/span> typeToggled = <span class=\"keyword\">false\n    \n    var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">NavigationView<\/span> {\n            <span class=\"type\">Group<\/span> {\n                <span class=\"keyword\">if<\/span> typeToggled {\n                    <span class=\"type\">CurseView<\/span>()\n                } <span class=\"keyword\">else<\/span> {\n                    <span class=\"type\">CharmView<\/span>()\n                }\n            }\n            .<span class=\"call\">navigationBarItems<\/span>(leading:\n                <span class=\"type\">Button<\/span>(action: {\n                    <span class=\"keyword\">self<\/span>.<span class=\"property\">typeToggled<\/span>.<span class=\"call\">toggle<\/span>()\n                }) {\n                    <span class=\"type\">Text<\/span>(<span class=\"string\">\"Toggle Type\"<\/span>)\n                }\n            )\n        }\n    }\n}\n<\/code><\/pre><p>Note that our <code>.navigationBarItems<\/code> is a modifier to the group itself, not each view. Remember, each view holds the title.<\/p><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-03.png\" alt=\"Leading bar button item \" width=\"800\"\/><p>You can also set your bar items as trailing instead of leading.<\/p><pre><code>.<span class=\"call\">navigationBarItems<\/span>(trailing:\n    <span class=\"type\">Button<\/span>(action: {\n        <span class=\"keyword\">self<\/span>.<span class=\"property\">typeToggled<\/span>.<span class=\"call\">toggle<\/span>()\n    }) {\n        <span class=\"type\">Text<\/span>(<span class=\"string\">\"Toggle Type\"<\/span>)\n    }\n)\n<\/code><\/pre><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-04.png\" alt=\"Trailing bar button item\" width=\"800\"\/><h3>Adding multiple navigation bar items<\/h3><p>If you want to add multiple navigation bar items, just use an HStack. You can even mix custom buttons as well as default ones that Apples API provide.<\/p><pre><code>.<span class=\"call\">navigationBarItems<\/span>(trailing:\n    <span class=\"type\">HStack<\/span> {\n        <span class=\"type\">Button<\/span>(action: {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">typeToggled<\/span>.<span class=\"call\">toggle<\/span>()\n        }) {\n            <span class=\"type\">Text<\/span>(<span class=\"string\">\"Toggle Type\"<\/span>)\n        }\n        \n        <span class=\"type\">Button<\/span>(action: {\n            <span class=\"comment\">\/\/ second action here<\/span>\n        }) {\n            <span class=\"type\">Image<\/span>(systemName: <span class=\"string\">\"bolt\"<\/span>)\n        }\n    }\n)\n<\/code><\/pre><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-05.png\" alt=\"Navigation View Charm\" width=\"800\"\/><p>It's also possible to add trailing and leding items.<\/p><pre><code>.<span class=\"call\">navigationBarItems<\/span>(leading:\n    <span class=\"type\">EditButton<\/span>(), trailing:\n    <span class=\"type\">HStack<\/span> {\n        <span class=\"type\">Button<\/span>(action: {\n            <span class=\"keyword\">self<\/span>.<span class=\"property\">typeToggled<\/span>.<span class=\"call\">toggle<\/span>()\n        }) {\n            <span class=\"type\">Text<\/span>(<span class=\"string\">\"Toggle Type\"<\/span>)\n        }\n        \n        <span class=\"type\">Button<\/span>(action: {\n            <span class=\"comment\">\/\/ second action here<\/span>\n        }) {\n            <span class=\"type\">Image<\/span>(systemName: <span class=\"string\">\"bolt\"<\/span>)\n        }\n    }\n)\n<\/code><\/pre><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-06.png\" alt=\"Navigation View Charm\" width=\"800\"\/><h3>Using NavigationLink<\/h3><p>NavigationLink can also be used to link to any view you'd like. This automatically pops a new view in your navigation stack and readjusts how the title is shown. Here is a new view that shows how to use the Lumos Maxima spell.<\/p><pre><code><span class=\"keyword\">struct<\/span> LumosMaximaHowTo: <span class=\"type\">View<\/span> {\n    <span class=\"keyword\">var<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n        <span class=\"type\">Text<\/span>(<span class=\"string\">\"To cast this light-creation spell, one must flick their wand, then draw it back and flick it a second time, after which it will light, as noted in chapter thirty-two of Extreme Incantations by Violeta Stitch.\"<\/span>)\n    }\n}\n<\/code><\/pre><p>We can then adjust our CharmView struct to add a navigation link inside of Lumos Maxima VStack and direct it to our new view.<\/p><pre><code><span class=\"type\">VStack<\/span>(alignment: .<span class=\"dotAccess\">leading<\/span>) {\n    <span class=\"type\">Text<\/span>(<span class=\"string\">\"Lumos Maxima\"<\/span>)\n        .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">headline<\/span>)\n    <span class=\"type\">Text<\/span>(<span class=\"string\">\"incantation to a charm that can be used to produce a blinding flash of bright white light from the tip of the wand\"<\/span>)\n        .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">subheadline<\/span>)\n    <span class=\"type\">NavigationLink<\/span>(<span class=\"string\">\"Click here to see how to use the spell\"<\/span>, destination: <span class=\"type\">LumosMaximaHowTo<\/span>())\n        .<span class=\"call\">font<\/span>(.<span class=\"dotAccess\">footnote<\/span>)\n}\n<\/code><\/pre><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-07.gif\" alt=\"NavigationLink example\" width=\"800\"\/><h3>Navigation Tags<\/h3><p>While a simple boolean can control which views are shown, it may get complicated when you have more than two views. SwiftUI and NavigationLink have something called <code>tags<\/code> that we can use to control navigation with multiple views with ease. A tag is an optional string that's used to identify which view is shown based on what the value is. Codewise, it looks like this.<\/p><pre><code><span class=\"keyword\">@State private var<\/span> spellType: <span class=\"type\">String<\/span>? = <span class=\"keyword\">nil\n\nvar<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n    <span class=\"type\">NavigationView<\/span> {\n        <span class=\"type\">VStack<\/span>(alignment: .<span class=\"dotAccess\">center<\/span>, spacing: <span class=\"number\">30<\/span>) {\n            <span class=\"type\">NavigationLink<\/span>(destination: <span class=\"type\">CharmView<\/span>(), tag: <span class=\"string\">\"Charm\"<\/span>, selection: $spellType) {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Tap to see charms\"<\/span>)\n            }\n            <span class=\"type\">NavigationLink<\/span>(destination: <span class=\"type\">CurseView<\/span>(), tag: <span class=\"string\">\"Curse\"<\/span>, selection: $spellType) {\n                <span class=\"type\">Text<\/span>(<span class=\"string\">\"Tap to see curses\"<\/span>)\n            }\n        }\n    }\n}\n<\/code><\/pre><p>This shows the following view with each link showing it's respective content.<\/p><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/06\/06-08.gif\" alt=\"NavigationLink example with tags\" width=\"800\"\/><h3>NavigationLink and isActive<\/h3><p>NavigationLink also has an optional parameter of <code>isActive<\/code> that holds a boolean that determins whether a specific view is shown. Then you can create an action, such as a button tap, that toggles the boolean and shows the view attached to it.<\/p><pre><code><span class=\"keyword\">@State private var<\/span> charmViewShowing = <span class=\"keyword\">false\n@State private var<\/span> curseViewShowing = <span class=\"keyword\">false\n\nvar<\/span> body: <span class=\"keyword\">some<\/span> <span class=\"type\">View<\/span> {\n    <span class=\"type\">NavigationView<\/span> {\n        <span class=\"type\">VStack<\/span>(spacing: <span class=\"number\">30<\/span>) {\n            <span class=\"type\">NavigationLink<\/span>(destination: <span class=\"type\">CharmView<\/span>(), isActive: $charmViewShowing) {\n                <span class=\"type\">EmptyView<\/span>()\n            }\n            <span class=\"type\">NavigationLink<\/span>(destination: <span class=\"type\">CurseView<\/span>(), isActive: $curseViewShowing) {\n                <span class=\"type\">EmptyView<\/span>()\n            }\n            <span class=\"type\">Button<\/span>(<span class=\"string\">\"Toggle charmViewShowing\"<\/span>) {\n                <span class=\"keyword\">self<\/span>.<span class=\"property\">charmViewShowing<\/span>.<span class=\"call\">toggle<\/span>()\n            }\n            <span class=\"type\">Button<\/span>(<span class=\"string\">\"Toggle curseViewShowing\"<\/span>) {\n                <span class=\"keyword\">self<\/span>.<span class=\"property\">curseViewShowing<\/span>.<span class=\"call\">toggle<\/span>()\n            }\n        }\n    }\n}\n<\/code><\/pre>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/05-testing-apis-with-postman<\/guid><title>Using Postman to test your API endpoints<\/title><description>Learn to test your API endpoints effectively using Postman.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/05-testing-apis-with-postman<\/link><pubDate>Mon, 31 Aug 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Using Postman to test your API endpoints<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-api\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/api\">API<\/a>\n        <a class=\"post-category post-category-postman\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/postman\">Postman<\/a>\n<\/div><h3>Introduction<\/h3><p>Once you start using APIs in your app you'll quickly realize that it becomes very cumbersome to start your app and manually test it on a real device or simulator every time. It takes more resources as well as extra time. For smaller projects, this may not be an issue at all, but as your apps grow increasingly larger so will your desire to separate pieces of your app into more manageable tests.<\/p><p>While there are multiple options for testing APIs, <a href=\"https:\/\/www.postman.com\">Postman<\/a> is often recommended because it is easy to use, has great documentation, and is free. Give it a download <a href=\"https:\/\/www.postman.com\/downloads\/\">here<\/a> and let's get to testing!<\/p><h3>Testing a basic endpoint<\/h3><p>Once you finish downloading Postman and opening it up, you'll see something similar to this.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/05\/05-01.png\" alt=\"Postman home app\" width=\"800\"\/><p>Let's start with a simple request. <a href=\"https:\/\/alexwohlbruck.github.io\/cat-facts\/docs\/\">Here<\/a> is a website that will allow us to get free cat facts. <em>Disclaimer: I have not read all of these and do not attest that they are in fact, facts<\/em>. The endpoint is very simple and doesn't even require authorization. Create a new request in Postman by clicking the \"+\" button, then type in <code>https:\/\/cat-fact.herokuapp.com\/facts<\/code> for the url and set it as a GET. When you press send you should a JSON return with a handful of cat facts!<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/05\/05-02.png\" alt=\"Cat facts\" width=\"800\"\/><h3>Adding paramaters<\/h3><p>For this next example, we are going to use a free API provided by NASA. The endpoint <code>https:\/\/api.nasa.gov\/techtransfer\/patent\/<\/code> will return a list of patents and software from NASA that are free for the public to search through. However, when you repeat the above steps you'll see that you actually get an error.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/05\/05-03.png\" alt=\"Postman home app\" width=\"800\"\/><p>This is because, like most other APIs, this endpoint requires an API key that identifies who you are and tracks your requests. Luckily, we can actually use NASA's demo key here or you can sign up for a free one at <a href=\"https:\/\/api.nasa.gov\">https:\/\/api.nasa.gov<\/a>. If you want to use the demo key, it's simply <code>DEMO_KEY<\/code>.<\/p><p>Let's add the demo key now in Postman. Under where you type in your url you'll see a list of different tabs. Click the one that says <code>Params<\/code> and you'll see some boxes to type in <code>KEY<\/code>, <code>VALUE<\/code>, and a <code>DESCRIPTION<\/code>. Let's go ahead and a key of <code>api_key<\/code> with a value of <code>DEMO_KEY<\/code>. You'll notice two changes here. The first is your url you typed in automatically updated to <code>https:\/\/api.nasa.gov\/techtransfer\/patent\/?api_key=DEMO_KEY<\/code>. This is nice because it formats it for you how it needs to be, but it's easier for you to see the parameters separated below. Sure, it's not a problem with one parameter like this one, but it can get excessive! The second thing you'll notice is that You actually get results back when you click <code>Send<\/code>.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/05\/05-04.png\" alt=\"Postman home app\" width=\"800\"\/><h3>Adding multiple parameters<\/h3><p>Adding more than one parameter is as simple as adding new key values in the <code>Params<\/code> section. Let's filter our results to contain only software that has something to do with Mars. Add the key <code>software<\/code> with the value <code>mars<\/code>. Your results will only get back data the word <code>mars<\/code> in it now! <em>Note - the data is not perfect. You'll also get results that contain the word Marshall since that contains the word mars in itself<\/em>.<\/p><p>Try playing with the other parameter options and see what you can come up with.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/05\/05-05.png\" alt=\"Postman home app\" width=\"800\"\/><h3>Sending POST requests<\/h3><p>Up until now, we have only made GET requests, which means you are just trying to retrieve data from somewhere. However, if we want to <em>send<\/em> data to someone else we can use something like a POST HTTP method. POST methods are often used with submitting information somewhere, such as in a form on the web. The data may be sensitive, so you won't be able to bookmark it or cache it. Let's test some POST methods by using Postmans' own test endpoints. Try sending a request to <code>https:\/\/postman-echo.com\/post<\/code>, but changing your method from GET to POST now.<\/p><p>You should see some information return, including an empty data section.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/05\/05-06.png\" alt=\"Postman basic POST request\" width=\"800\"\/><p>However, I now want you to navigate to the <code>body<\/code> section under where you type in the url, select <code>raw<\/code> and change <code>text<\/code> to <code>JSON<\/code>. Then add the following information.<\/p><pre><code>{\n  <span class=\"string\">\"title\"<\/span>: <span class=\"string\">\"Did you put your name in the Goblet of Fire, Harry\"<\/span>,\n  <span class=\"string\">\"body\"<\/span>: <span class=\"string\">\"he asked calmly\"<\/span>\n}\n<\/code><\/pre><p>When you run the request now you'll see that you get data back.<\/p><p>You can get as complicated as you want with the data you send in, just make sure it matches what the server is looking for on the other end!<\/p><pre><code>[\n  {\n    <span class=\"string\">\"quotes\"<\/span>: [\n      {\n        <span class=\"string\">\"title\"<\/span>: <span class=\"string\">\"Did you put your name in the Goblet of Fire, Harry\"<\/span>,\n        <span class=\"string\">\"body\"<\/span>: <span class=\"string\">\"he asked calmly\"<\/span>\n      },\n      {\n        <span class=\"string\">\"title\"<\/span>: <span class=\"string\">\"Po-tay-toes\"<\/span>,\n        <span class=\"string\">\"body\"<\/span>: <span class=\"string\">\"Boil 'em, mash 'em, stick 'em in a stew.\"<\/span>\n      }\n    ]\n  }\n]\n<\/code><\/pre><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/05\/05-08.png\" alt=\"Postman POST request with more data\" width=\"800\"\/><p>Although we didn't go over any Swift code in this tutorial, I hope you learned something valuable that will help you in the future.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-03<\/guid><title>Use Alamofire to make an API request for NASA's Astronomy Picture of the Day - Part 3<\/title><description>Part 3 of using Alamofire to make an API request. This part closes out this tutorial by showing you how to handle errors.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-03<\/link><pubDate>Sat, 22 Aug 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use Alamofire to make an API request for NASA's Astronomy Picture of the Day - Part 3<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-api\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/api\">API<\/a>\n        <a class=\"post-category post-category-alamofire\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/alamofire\">Alamofire<\/a>\n        <a class=\"post-category post-category-errorhandling\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/errorhandling\">Error Handling<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-singl-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-02\" style=\"text-decoration: none\">&larr; Making the request<\/a><\/th>\n    <\/tr>\n<\/table><h3>Handling Errors<\/h3><p>As I've said before, sometimes NASA's API doesn't return us any data. This is not unique to NASA API's. Anything could happen online that you have no control over. However, you do have control over what happens if your app runs into the error. Instead of letting your app crash, let's explain to the user what's happening.<\/p><p>During decoding, Alamofire returns a response. This response may or may not have an error attached to it. We can place in a check to see if the response contains an error or not and act appropriately. We will do something simple here by just updating our title label with a message saying an error has occurred, please try again later. It's not perfect, but it's your job to figure out why there is an error in the first place. Then you can handle each case uniquely.<\/p><p>Add the following function:<\/p><pre><code><span class=\"keyword\">func<\/span> errorOccurred() {\n    titleLabel.<span class=\"property\">text<\/span> = <span class=\"string\">\"An error occurred. No data could be found. Please try again later\"<\/span>\n    titleLabel.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n}\n<\/code><\/pre><p>Then update your fetchAPOD() to look like this:<\/p><pre><code><span class=\"keyword\">func<\/span> fetchAPOD() {\n    <span class=\"keyword\">let<\/span> request = <span class=\"type\">AF<\/span>.<span class=\"call\">request<\/span>(apiURL + <span class=\"type\">APIKey<\/span>)\n    request.<span class=\"call\">responseDecodable<\/span>(of: <span class=\"type\">APOD<\/span>.<span class=\"keyword\">self<\/span>) { response <span class=\"keyword\">in\n        \n        guard<\/span> response.<span class=\"property\">error<\/span> == <span class=\"keyword\">nil else<\/span> {\n            <span class=\"keyword\">self<\/span>.<span class=\"call\">errorOccurred<\/span>()\n            \n            <span class=\"keyword\">return<\/span>\n        }\n        \n        <span class=\"keyword\">guard let<\/span> apod = response.<span class=\"property\">value<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n        \n        <span class=\"keyword\">self<\/span>.<span class=\"call\">loadDetails<\/span>(apod: apod)\n        <span class=\"keyword\">self<\/span>.<span class=\"call\">loadImage<\/span>(urlString: apod.<span class=\"property\">url<\/span>)\n    }\n}\n<\/code><\/pre><p>Now you should see a nice message show up instead of a blank screen or crash. The easiest way to test this at this point in time is to update your url to be incorrect. Run your code and your app should now look like this:<\/p><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/04\/04-06.png\" alt=\"API Request Data and Image\" width=\"800\"\/><p>That's really all there is to it! In other tutorials, we can take a look at more advanced topics for making API requests. If you'd like to see the full source code for this project you can check it out <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\/tree\/master\/APOD\">here<\/a>.<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-singl-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-02\" style=\"text-decoration: none\">&larr; Making the request<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-02<\/guid><title>Use Alamofire to make an API request for NASA's Astronomy Picture of the Day - Part 2<\/title><description>Part 2 of using Alamofire to make an API request. This part focuses on creating your model, making the request, and updating your app with your results.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-02<\/link><pubDate>Fri, 21 Aug 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use Alamofire to make an API request for NASA's Astronomy Picture of the Day - Part 2<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-api\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/api\">API<\/a>\n        <a class=\"post-category post-category-alamofire\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/alamofire\">Alamofire<\/a>\n        <a class=\"post-category post-category-models\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/models\">Models<\/a>\n        <a class=\"post-category post-category-dispatchqueue\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/dispatchqueue\">DispatchQueue<\/a>\n        <a class=\"post-category post-category-codable\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/codable\">Codable<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-03\" style=\"text-decoration: none\">Handling errors &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Creating our model<\/h3><p>Before we start making our API request, we need to create a model to store our data nicely. Recall how the data looks when it's returned to us. We need to create a struct that holds a property for each piece of data returned and also have the struct conform to Decodable so we can convert it from the JSON object. Go ahead and create a new swift file called <code>APODmodel.swift<\/code> and add the following code:<\/p><pre><code><span class=\"keyword\">struct<\/span> APOD: <span class=\"type\">Decodable<\/span> {\n    <span class=\"keyword\">let<\/span> title: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> date: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> explanation: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> hdurl: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> url: <span class=\"type\">String<\/span>\n    <span class=\"keyword\">let<\/span> copyright: <span class=\"type\">String<\/span>?\n}\n<\/code><\/pre><p>Note that copyright is optional because we may or may not get that back during our request. If we left it as nonoptional then your app would crash on most days. This model allows us to call out the title, date, explanation, or two different types of images that we can download. For this project, we will just be using the basic url and not the hdurl (high definition) because it can be much slower to process.<\/p><h3>Making an API Request<\/h3><p>Great! Let's finally start digging into our code in order to make our first API request. You'll be amazed by how easy it is to make an API request and decode it using Alamofire and codable. Add this function to <code>ViewController.swift<\/code> and call it in <code>viewDidLoad()<\/code>:<\/p><pre><code><span class=\"keyword\">func<\/span> fetchAPOD() {\n    <span class=\"keyword\">let<\/span> request = <span class=\"type\">AF<\/span>.<span class=\"call\">request<\/span>(apiURL + <span class=\"type\">APIKey<\/span>)\n    request.<span class=\"call\">responseDecodable<\/span>(of: <span class=\"type\">APOD<\/span>.<span class=\"keyword\">self<\/span>) { response <span class=\"keyword\">in\n        guard let<\/span> apod = response.<span class=\"property\">value<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n    }\n}\n<\/code><\/pre><p>Seriously, it's that easy! First Alamofire makes a request using the api endpoint you provided and your specific api key. Then, it takes that result and matches it to the model you created to give you an APOD object. Although, running your code right now won't show you anything of value yet. We haven't done anything with the data.<\/p><h3>Updating our UI<\/h3><p>We need to do two different things to update our UI with the data that is returned. Let's start with the easy part, which is updating each label in our stackview appropriately. Let's create a function that does the following things:<\/p><ol><li>Takes in an APOD object as a parameter<\/li><\/ol><ol start=\"2\"><li>Updates the dateLabel\/titleLabel\/explanationLabel with the data from our APOD object passed in<\/li><\/ol><ol start=\"3\"><li>Allow each label to expand to show as many lines as it needs by setting the property <code>label.numberOfLines=0<\/code><\/li><\/ol><ol start=\"4\"><li>Give each label a custom font that can size dynamically and a custom color of our choosing<\/li><\/ol><ol start=\"5\"><li>If we get a copyright back, update the label for that, otherwise, hide the label<\/li><\/ol><pre><code><span class=\"keyword\">func<\/span> loadDetails(apod: <span class=\"type\">APOD<\/span>) {\n    dateLabel.<span class=\"property\">text<\/span> = apod.<span class=\"property\">date<\/span>\n    dateLabel.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n    dateLabel.<span class=\"property\">font<\/span> = .<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">callout<\/span>)\n    dateLabel.<span class=\"property\">adjustsFontForContentSizeCategory<\/span> = <span class=\"keyword\">true<\/span>\n\n    titleLabel.<span class=\"property\">text<\/span> = apod.<span class=\"property\">title<\/span>\n    titleLabel.<span class=\"property\">textColor<\/span> = .<span class=\"dotAccess\">systemGreen<\/span>\n    titleLabel.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n    titleLabel.<span class=\"property\">font<\/span> = .<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title1<\/span>)\n    dateLabel.<span class=\"property\">adjustsFontForContentSizeCategory<\/span> = <span class=\"keyword\">true<\/span>\n\n    explanationLabel.<span class=\"property\">text<\/span> = apod.<span class=\"property\">explanation<\/span>\n    explanationLabel.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n    explanationLabel.<span class=\"property\">font<\/span> = .<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">body<\/span>)\n    explanationLabel.<span class=\"property\">adjustsFontForContentSizeCategory<\/span> = <span class=\"keyword\">true\n    \n    if let<\/span> copyright = apod.<span class=\"property\">copyright<\/span> {\n        copyrightLabel.<span class=\"property\">text<\/span> = <span class=\"string\">\"Copyright:<\/span> \\(copyright)<span class=\"string\">\"<\/span>\n        copyrightLabel.<span class=\"property\">numberOfLines<\/span> = <span class=\"number\">0<\/span>\n        copyrightLabel.<span class=\"property\">font<\/span> = .<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">caption1<\/span>)\n    } <span class=\"keyword\">else<\/span> {\n        copyrightLabel.<span class=\"property\">isHidden<\/span> = <span class=\"keyword\">true<\/span>\n    }\n}\n<\/code><\/pre><p>Now you can call your function in the closure of your api request. Add the following line:<\/p><pre><code><span class=\"keyword\">self<\/span>.<span class=\"call\">loadDetails<\/span>(apod: apod)\n<\/code><\/pre><p>That's all it takes to update your labels! You should be able to run your code now and see everything except for the image. Remember, if you don't see anything check your API request in Postman or just copy and paste it into a web browser and see what data returns.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/04\/04-04.png\" alt=\"API Request Data Only\" width=\"800\"\/><h3>Updating our image<\/h3><p>Loading an image from a url isn't as difficult is it may sound. Here are the steps to make it happen:<\/p><ol><li>Create a function that takes in a url string as a parameter. We get this from <code>apod.url<\/code><\/li><\/ol><ol start=\"2\"><li>Create a url object from our url string passed in<\/li><\/ol><ol start=\"3\"><li>Using DispatchQueue, try and create a data object out of the contents of our url<\/li><\/ol><ol start=\"4\"><li>Try and create an image our of our data object<\/li><\/ol><ol start=\"5\"><li>Update our image view with our image using the main thread<\/li><\/ol><p>The code looks like this:<\/p><pre><code><span class=\"keyword\">func<\/span> loadImage(urlString: <span class=\"type\">String<\/span>) {\n    <span class=\"keyword\">guard let<\/span> url = <span class=\"type\">URL<\/span>(string: urlString) <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n\n    <span class=\"type\">DispatchQueue<\/span>.<span class=\"call\">global<\/span>().<span class=\"call\">async<\/span> { [<span class=\"keyword\">weak self<\/span>] <span class=\"keyword\">in\n        if let<\/span> data = <span class=\"keyword\">try<\/span>? <span class=\"type\">Data<\/span>(contentsOf: url) {\n            <span class=\"keyword\">if let<\/span> image = <span class=\"type\">UIImage<\/span>(data: data) {\n                <span class=\"type\">DispatchQueue<\/span>.<span class=\"property\">main<\/span>.<span class=\"call\">async<\/span> {\n                    <span class=\"keyword\">self<\/span>?.<span class=\"property\">imageView<\/span>.<span class=\"property\">image<\/span> = image\n                }\n            }\n        }\n    }\n}\n<\/code><\/pre><p>Then inside your API request closure, you can add<\/p><pre><code><span class=\"keyword\">self<\/span>.<span class=\"call\">loadImage<\/span>(urlString: apod.<span class=\"property\">url<\/span>)\n<\/code><\/pre><p>Just to update, your entire <code>fetchAPOD()<\/code> function should now look like this<\/p><pre><code><span class=\"keyword\">func<\/span> fetchAPOD() {\n    <span class=\"keyword\">let<\/span> request = <span class=\"type\">AF<\/span>.<span class=\"call\">request<\/span>(apiURL + <span class=\"type\">APIKey<\/span>)\n    request.<span class=\"call\">responseDecodable<\/span>(of: <span class=\"type\">APOD<\/span>.<span class=\"keyword\">self<\/span>) { response <span class=\"keyword\">in\n        guard let<\/span> apod = response.<span class=\"property\">value<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n        \n        <span class=\"keyword\">self<\/span>.<span class=\"call\">loadDetails<\/span>(apod: apod)\n        <span class=\"keyword\">self<\/span>.<span class=\"call\">loadImage<\/span>(urlString: apod.<span class=\"property\">url<\/span>)\n    }\n}\n<\/code><\/pre><p>Awesome! Restart your app and see your new picture!<\/p><img class=\"post-image img-md\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/04\/04-05.png\" alt=\"API Request Data and Image\" width=\"800\"\/><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-03\" style=\"text-decoration: none\">Handling errors &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-01<\/guid><title>Use Alamofire to make an API request for NASA's Astronomy Picture of the Day - Part 1<\/title><description>API requests are very common in iOS apps. Alamofire makes calling API's a breeze and this tutorial will show you exactly how to do it.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-01<\/link><pubDate>Thu, 20 Aug 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use Alamofire to make an API request for NASA's Astronomy Picture of the Day - Part 1<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-api\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/api\">API<\/a>\n        <a class=\"post-category post-category-uiscrollview\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uiscrollview\">UIScrollView<\/a>\n        <a class=\"post-category post-category-uistackview\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uistackview\">UIStackView<\/a>\n        <a class=\"post-category post-category-autolayout\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/autolayout\">Autolayout<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n        <a class=\"post-category post-category-cocoapods\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/cocoapods\">Cocoapods<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n    <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-02\" style=\"text-decoration: none\">Making the request &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Introduction<\/h3><p>If you plan to become an iOS developer then chances are you will need to learn networking at some point. If you think about it, how do the apps you use change their data without you having to re-download a new app? Every time you open up a weather app it's not like the data is stored on your personal device. Otherwise, you'd have to download the app daily just to see the weather for the day! Instead, we use APIs, or Application Programming Interfaces. This allows our app to communicate with another application and exchange data. There are many different types of <em>API calls<\/em> that we can perform, but this tutorial will go over the most basic, which is collecting data from another application without sending anything.<\/p><p>Let's start by looking at the type of data we are going to collect. As an astronomy lover, I wanted to pick a NASA API because they are very easy to use, highly informational, and many of them are completely <em>free<\/em>! Head over to <a href=\"https:\/\/api.nasa.gov\">NASA's Open APIs<\/a> and take a look at all what they have to offer. We are going to look at <strong>APOD<\/strong> which allows us to get an image of the day as well as some information about that image. Note that depending on what time you do this you may not be able to obtain any information. I don't know the exact time that this happens, but it seems to be closer to the evening when they are refreshing the new information for the next day. For example, it is currently 20:06 CST on 08\/20\/2010 and I don't get any data back. Running the request looks like this <code><\/code><code>{\"code\":404,\"msg\":\"No data available for date: 2020-08-21\",\"service_version\":\"v1\"}<\/code><code><\/code>. Rest assured, if you just wait a while (or try in the morning) you should get information back!<\/p><p>That being said, go ahead and sign up (it's completely free and very quick!) and receive your API key. After signing up from the link above you should see something like this:<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/04\/04-01.png\" alt=\"NASA API Key\" width=\"800\"\/><p>You'll see a few things here. You'll notice a long string of characters called an API key. When you request data, who receives it wants to know who it's coming from and how to react. This allows that exchange to happen. Invalid key, no data. Correct key, something can happen and it's tracked. This is used to count the number of times you make API calls because most people charge for their APIs.<\/p><p>Note: You do not want to share your API key with anyone. Keep it secret! I'm sharing mine here because I'm not actually using this. That's not even my real email! You're more than welcome to use mine during this tutorial if you want, but I make no promises it will be active when you try or that its limits will be reached, which as of this time is 1,000 requests per hour. You can also use NASA's DEMO_KEY which limits you to 50 requests per day and 30 requests per hour.<\/p><p>Below the key you'll see a unique url. In my example it's <code><\/code><code>https:\/\/api.nasa.gov\/planetary\/apod?api_key=cau6to6cGexfArd5RfO4Hq1pceMgWpIOpwYs1Y8E<\/code><code><\/code>. Now I say unique, but that's only becase of the API key. Anyone who makes this same API call will use <code><\/code><code>https:\/\/api.nasa.gov\/planetary\/apod?api_key=<\/code><code><\/code> plus their specific API key. This is how NASA knows who is making the call. There are many ways to test API's before you even start writing your code. One my favorites it's using Postman, which is covered in another tutorial <a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/05-testing-apis-with-postman\">here<\/a>. However, for this simple request we can actually just click the link and it will open a new window that looks like this:<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/04\/04-02.png\" alt=\"APOD 08-19-2020\" width=\"800\"\/><p>Let's prettify this and take a look at the data<\/p><pre><code>{\n   <span class=\"string\">\"date\"<\/span>:<span class=\"string\">\"2020-08-19\"<\/span>,\n   <span class=\"string\">\"explanation\"<\/span>:<span class=\"string\">\"Does the Sun change as it rotates? Yes, and the changes can vary from subtle to dramatic. In the featured time-lapse sequences, our Sun -- as imaged by NASA's Solar Dynamics Observatory -- is shown rotating though an entire month in 2014.  In the large image on the left, the solar chromosphere is depicted in ultraviolet light, while the smaller and lighter image to its upper right simultaneously shows the more familiar solar photosphere in visible light. The rest of the inset six Sun images highlight X-ray emission by relatively rare iron atoms located at different heights of the corona, all false-colored to accentuate differences. The Sun takes just under a month to rotate completely -- rotating fastest at the equator. A large and active sunspot region rotates into view soon after the video starts.  Subtle effects include changes in surface texture and the shapes of active regions. Dramatic effects include numerous flashes in active regions, and fluttering and erupting prominences visible all around the Sun's edge.  Presently, our Sun is passing an unusually low  Solar minimum in activity of its 11-year magnetic cycle. As the video ends, the same large and active sunspot region previously mentioned rotates back into view, this time looking different.\"<\/span>,\n   <span class=\"string\">\"media_type\"<\/span>:<span class=\"string\">\"video\"<\/span>,\n   <span class=\"string\">\"service_version\"<\/span>:<span class=\"string\">\"v1\"<\/span>,\n   <span class=\"string\">\"title\"<\/span>:<span class=\"string\">\"The Sun Rotating\"<\/span>,\n   <span class=\"string\">\"url\"<\/span>:<span class=\"string\">\"https:\/\/www.youtube.com\/embed\/2WRgXvdasm0\"<\/span>\n}\n<\/code><\/pre><p>You can see that we get a date, an explanation, a media type, service version, title, and a url. This is what we will use later on in Swift to make our model. It's important to know what you are getting back as well as what type. This is a very basic GET request, which means we are just <em>getting<\/em> data back and not sending any in. There are 5-6 properties (an optional copyright if it exists) and they are each just a single string. Simple!<\/p><h3>Setting Up<\/h3><p>We haven't started writing any code yet. In fact, we haven't even opened up Xcode. Let's go ahead and do that now and create a new project using the Single View App template and Swift as your programming language. Name your project APOD or something else that you desire. There is one more thing I need you to do before we dig into the code portion. Swift has something called <a href=\"https:\/\/developer.apple.com\/documentation\/foundation\/urlsession\">URLSession<\/a> that allows us to make API calls, but I'm a fan of <a href=\"https:\/\/github.com\/Alamofire\/Alamofire\">Alamofire<\/a> that helps make this process much easier and cleaner. You can install this however you wish, but if you are using cocoapods you just need to add <code>pod 'Alamofire'<\/code> to your podfile. Now make sure you close out Xcode and open up the APOD.xcworkspace instead of the APOD.xcodeproj since we are using a Cocoapod.<\/p><h3>Creating the UI<\/h3><p>We want to create our UI so that we can view our image and most of the data that is returned. Sometimes this data can be long and depending on your device may not fully fit. So we are going to need to set up a UIScrollView in case the data extends below the bottom of your screen. Here are the steps we need to take, taking care to follow the constraints exactly so our scroll view works:<\/p><ol><li>Add a UIImageView at the top of your main view<\/li><\/ol><ol start=\"2\"><li>Add a UIScrollView below the image view<\/li><\/ol><ol start=\"3\"><li>Add a UIStackView inside the UIScrollView<\/li><\/ol><ol start=\"4\"><li>Add four labels inside the UIStackView<\/li><\/ol><ol start=\"5\"><li>Add constraints on your UIImageView and your UIScrollView to keep it nicely on the screen<\/li><\/ol><ol start=\"6\"><li>Add constraints on your UIStackView to <em>match<\/em> the constraints on your UIScrollView. This part is important!<\/li><\/ol><ol start=\"7\"><li>Create outlets for each label in your main view controller as well as the imageview<\/li><\/ol><p>Here is what your storyboard should look like when you are finished:<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/04\/04-03.png\" alt=\"Storyboard setup\" width=\"800\"\/><p>Then after adding the outlets your ViewController.swift should look like this:<\/p><pre><code><span class=\"keyword\">import<\/span> Alamofire\n<span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UIViewController<\/span> {\n    \n    <span class=\"keyword\">@IBOutlet weak var<\/span> imageView: <span class=\"type\">UIImageView<\/span>!\n    \n    <span class=\"keyword\">@IBOutlet weak var<\/span> dateLabel: <span class=\"type\">UILabel<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> titleLabel: <span class=\"type\">UILabel<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> explanationLabel: <span class=\"type\">UILabel<\/span>!\n    <span class=\"keyword\">@IBOutlet weak var<\/span> copyrightLabel: <span class=\"type\">UILabel<\/span>!\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n    }\n<\/code><\/pre><p>Great! We have our UI set up. Feel free to play with the colors as you see fit. The next thing we want to do is add our API key and API url above our class. Remember, you should have your own API key for this because mine may not work by the time you try it. Add these two properties now replacing my key with yours:<\/p><pre><code><span class=\"keyword\">let<\/span> <span class=\"type\">APIKey<\/span> = <span class=\"string\">\"cau6to6cGexfArd5RfO4Hq1pceMgWpIOpwYs1Y8E\"<\/span>\n<span class=\"keyword\">let<\/span> apiURL = <span class=\"string\">\"https:\/\/api.nasa.gov\/planetary\/apod?api_key=\"<\/span>\n<\/code><\/pre><table class=\"posts-table\">\n    <tr>\n    <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/04-requesting-data-from-an-api-02\" style=\"text-decoration: none\">Making the request &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-03<\/guid><title>Use AVFoundation to create a scanner to scan your drivers license - Part 3<\/title><description>The final part of how to scan a barcode. We add some extra features in this section such as a torch and scan bounds.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-03<\/link><pubDate>Sat, 8 Aug 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use AVFoundation to create a scanner to scan your drivers license - Part 3<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-avfoundation\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/avfoundation\">AVFoundation<\/a>\n        <a class=\"post-category post-category-torch\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/torch\">Torch<\/a>\n        <a class=\"post-category post-category-bezierpath\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/bezierpath\">BezierPath<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-02\" style=\"text-decoration: none\">&larr; Capturing data<\/a><\/th>\n    <\/tr>\n<\/table><h3>Adding a torch<\/h3><p>Sometimes scanning a license is difficult when there is no light. Well, your phone comes with a light! Apple actually has something called <a href=\"https:\/\/developer.apple.com\/documentation\/avfoundation\/avcapturedevice\/1386035-torchmode\">torch mode<\/a> that allows us to easily toggle our light on and off. Let's start by adding a bar button item that we can use to toggle the light. Add this in <code>viewDidLoad<\/code> of <code>ScannerViewController<\/code>.<\/p><pre><code><span class=\"keyword\">let<\/span> torchButton = <span class=\"type\">UIBarButtonItem<\/span>(title: <span class=\"string\">\"Torch\"<\/span>, style: .<span class=\"dotAccess\">plain<\/span>, target: <span class=\"keyword\">self<\/span>, action: <span class=\"keyword\">#selector<\/span>(toggleTorch))\nnavigationItem.<span class=\"property\">rightBarButtonItem<\/span> = torchButton\n<\/code><\/pre><p>Right now we will get an error, because we have no <code>toggleTorch<\/code> function. Let's go ahead and add that now. Remember, we need <code>@objc<\/code> because we are using a selector here. This function will do the following<\/p><ol><li>Check if the device is capable of video, if not it will perform an early exit<\/li><\/ol><ol start=\"2\"><li>Check if the device has a light, if not it will perform an early exit<\/li><\/ol><ol start=\"3\"><li>Lock the device for configuration so no other apps can control the light while we are trying to use it here<\/li><\/ol><ol start=\"4\"><li>If the light is on turn it off and if it's off turn it on<\/li><\/ol><ol start=\"5\"><li>Print an error if something went wrong<\/li><\/ol><pre><code><span class=\"keyword\">@objc func<\/span> toggleTorch() {\n    <span class=\"keyword\">guard let<\/span> device = <span class=\"type\">AVCaptureDevice<\/span>.<span class=\"call\">default<\/span>(for: .<span class=\"dotAccess\">video<\/span>) <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n    <span class=\"keyword\">guard<\/span> device.<span class=\"property\">hasTorch<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n    \n    <span class=\"keyword\">do<\/span> {\n        <span class=\"keyword\">try<\/span> device.<span class=\"call\">lockForConfiguration<\/span>()\n        \n        <span class=\"keyword\">if<\/span> device.<span class=\"property\">torchMode<\/span> == .<span class=\"dotAccess\">on<\/span> {\n            device.<span class=\"property\">torchMode<\/span> = .<span class=\"dotAccess\">off<\/span>\n        } <span class=\"keyword\">else<\/span> {\n            device.<span class=\"property\">torchMode<\/span> = .<span class=\"dotAccess\">on<\/span>\n        }\n        \n    } <span class=\"keyword\">catch<\/span> {\n        <span class=\"call\">print<\/span>(<span class=\"string\">\"There was an error trying to use the torch\"<\/span>)\n    }\n}\n<\/code><\/pre><p>You should be able to run your app now and see a \"Torch\" button that you can tap to turn your light on and off. Have fun scanning in the dark!<\/p><h3>Adding scan bounds<\/h3><p>There's one more thing I want to show you. You'll notice that when you turn on the scanner you have no idea where to place your barcode. Honestly, if you get it close to the middle you shouldn't have an issue, but we can make it a bit more user friendly if we add some scan bounds to help the user guide the barcode. Let's create a new function to do that for us now. We will do this by using <code>UIBezierPath<\/code> to draw a rectangle, color it accordingly, and add it to our preview layer. Once again, don't forget to call your function in <code>setUpScanner<\/code>.<\/p><pre><code><span class=\"keyword\">func<\/span> showScanBounds() {\n    <span class=\"keyword\">let<\/span> rectangle = <span class=\"type\">UIBezierPath<\/span>(rect: <span class=\"type\">CGRect<\/span>(x: <span class=\"number\">8<\/span>, y: (view.<span class=\"property\">bounds<\/span>.<span class=\"property\">size<\/span>.<span class=\"property\">height<\/span> \/ <span class=\"number\">2<\/span>) + <span class=\"number\">30<\/span>, width: view.<span class=\"property\">bounds<\/span>.<span class=\"property\">size<\/span>.<span class=\"property\">width<\/span> - <span class=\"number\">16<\/span>, height: <span class=\"number\">60<\/span>))\n    <span class=\"keyword\">let<\/span> boundLayer = <span class=\"type\">CAShapeLayer<\/span>.<span class=\"keyword\">init<\/span>()\n    boundLayer.<span class=\"property\">path<\/span> = rectangle.<span class=\"property\">cgPath<\/span>\n    boundLayer.<span class=\"property\">fillColor<\/span> = <span class=\"type\">UIColor<\/span>(red: <span class=\"number\">0<\/span>, green: <span class=\"number\">1<\/span>, blue: <span class=\"number\">0<\/span>, alpha: <span class=\"number\">0.1<\/span>).<span class=\"property\">cgColor<\/span>\n    boundLayer.<span class=\"property\">strokeColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"property\">green<\/span>.<span class=\"property\">cgColor<\/span>\n    avPreviewLayer.<span class=\"call\">addSublayer<\/span>(boundLayer)\n}\n<\/code><\/pre><p>Start up your scanner and you should see something like this!<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/03\/03-02.png\" alt=\"Scanner with bounds\" \/><p>I hope this tutorial helped and if you'd like you can see the full source code for this project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\/tree\/master\/How-To-Scan-A-Barcode\">here<\/a>.<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-02\" style=\"text-decoration: none\">&larr; Capturing data<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-02<\/guid><title>Use AVFoundation to create a scanner to scan your drivers license - Part 2<\/title><description>Part two of scanning a barcode. This section focuses on capturing the data and displaying it to the user.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-02<\/link><pubDate>Tue, 4 Aug 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use AVFoundation to create a scanner to scan your drivers license - Part 2<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-avfoundation\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/avfoundation\">AVFoundation<\/a>\n        <a class=\"post-category post-category-metadata\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/metadata\">Metadata<\/a>\n        <a class=\"post-category post-category-delegates\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/delegates\">Delegates<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-03\" style=\"text-decoration: none\">Adding a torch and scan bounds &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Capturing Data<\/h3><p>So far we have our camera up and running, but it doesn't actually do anything for us. We want to set it up to read a barcode and give us back that information. We will do this by using <code>AVCaptureMetaDataOutput<\/code>. We will break this up into two separate functions, one to read the data, and the other to return the data. Let's start by reading the data. We need to do the following<\/p><ol><li>Create an instance of <code>AVCaptureMetadataOutput()<\/code><\/li><\/ol><ol start=\"2\"><li>If our capture session can add output, do so, otherwise present an error message<\/li><\/ol><ol start=\"3\"><li>Provide the scan metadata object types<\/li><\/ol><p>Add the following function and call it at the bottom of <code>setupScanner()<\/code><\/p><pre><code><span class=\"keyword\">func<\/span> addMetaData() {\n    <span class=\"keyword\">let<\/span> metadataOutput = <span class=\"type\">AVCaptureMetadataOutput<\/span>()\n    \n    <span class=\"keyword\">if<\/span> avCaptureSession.<span class=\"call\">canAddOutput<\/span>(metadataOutput) {\n        avCaptureSession.<span class=\"call\">addOutput<\/span>(metadataOutput)\n        \n        metadataOutput.<span class=\"call\">setMetadataObjectsDelegate<\/span>(<span class=\"keyword\">self<\/span>, queue: <span class=\"type\">DispatchQueue<\/span>.<span class=\"property\">main<\/span>)\n        metadataOutput.<span class=\"property\">metadataObjectTypes<\/span> = [.<span class=\"dotAccess\">pdf417<\/span>]\n    } <span class=\"keyword\">else<\/span> {\n        <span class=\"comment\">\/\/ Add error message here<\/span>\n        <span class=\"keyword\">return<\/span>\n    }\n}\n<\/code><\/pre><p>You'll also need to have <code>ScannerViewController<\/code> conform to our metadataoutput by adding <code>AVCaptureMetadataOutputObjectsDelegate<\/code>. You'll notice that we passed in <code>.pdf417<\/code> as our object type because that's what many identification cards are. However, there are a ton more you can add here, including QR codes! I'll let you play with that on your own.<\/p><p>Reading the data is one thing, but we need to actually output the data so we can see it. This uses the <code>metadataOutput<\/code> function in AVFoundation, so you don't need to create it yourself. We will fill it in on our own, however. What this will do is collect our objects we see, take the first object and see if we can get a readable object out of it. If it can, we turn that into a string, play a vibration to notify us, then we will call one more function that we will create to update our label. Go ahead and add the following code, including the stub for the second function.<\/p><pre><code><span class=\"keyword\">func<\/span> metadataOutput(<span class=\"keyword\">_<\/span> output: <span class=\"type\">AVCaptureMetadataOutput<\/span>, didOutput metadataObjects: [<span class=\"type\">AVMetadataObject<\/span>], from connection: <span class=\"type\">AVCaptureConnection<\/span>) {\n    avCaptureSession.<span class=\"call\">stopRunning<\/span>()\n    \n    <span class=\"keyword\">if let<\/span> metadataObject = metadataObjects.<span class=\"property\">first<\/span> {\n        <span class=\"keyword\">guard let<\/span> readableObject = metadataObject <span class=\"keyword\">as<\/span>? <span class=\"type\">AVMetadataMachineReadableCodeObject<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n        <span class=\"keyword\">guard let<\/span> stringObject = readableObject.<span class=\"property\">stringValue<\/span> <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n        <span class=\"type\">AudioServicesPlayAlertSound<\/span>(<span class=\"type\">SystemSoundID<\/span>(kSystemSoundID_Vibrate))\n        \n        <span class=\"call\">readMetaData<\/span>(data: stringObject)\n    }\n    \n    navigationController?.<span class=\"call\">popViewController<\/span>(animated: <span class=\"keyword\">true<\/span>)\n}\n\n<span class=\"keyword\">func<\/span> readMetaData(data: <span class=\"type\">String<\/span>) {\n\n}\n<\/code><\/pre><p>You should be able to scan your own drivers license now! Make sure you have good lighting and a decent barcode that isn't torn up or it may not work.<\/p><h3>Adding the data to our label<\/h3><p>Even though the code works, we don't actually see any results. We want to pass the data from one view controller to another so the method that we will be using here is delegates. We have two functions that we are going to link to each other. We need to set up a delegate first. So at the top of <code>ScannerViewController<\/code> add the following property<\/p><pre><code><span class=\"keyword\">weak var<\/span> delegate: <span class=\"type\">ViewController<\/span>!\n<\/code><\/pre><p>This will give us a reference for our main view controller allowing us to use its functions. Then inside of <code>readMetaData()<\/code> we are going to call <code>updateLabel()<\/code> from <code>ViewController<\/code>. Edit <code>readMetaData()<\/code> to look like this.<\/p><pre><code><span class=\"keyword\">func<\/span> readMetaData(data: <span class=\"type\">String<\/span>) {\n    delegate.<span class=\"call\">updateLabel<\/span>(text: data)\n}\n<\/code><\/pre><p>This also means we need to make a couple of updates in <code>ViewController<\/code>. We need to edit our <code>updateLabel()<\/code> function to accept a parameter and tell <code>ScannerViewController<\/code> who the delegate is during navigation. Match your functions to these below to achieve that.<\/p><pre><code><span class=\"keyword\">@objc func<\/span> scanBarcode() {\n    <span class=\"keyword\">if let<\/span> vc = storyboard?.<span class=\"call\">instantiateViewController<\/span>(withIdentifier: <span class=\"string\">\"scannerViewController\"<\/span>) <span class=\"keyword\">as<\/span>? <span class=\"type\">ScannerViewController<\/span> {\n        vc.<span class=\"property\">delegate<\/span> = <span class=\"keyword\">self<\/span>\n        navigationController?.<span class=\"call\">pushViewController<\/span>(vc, animated: <span class=\"keyword\">true<\/span>)\n    }\n}\n\n\n<span class=\"keyword\">func<\/span> updateLabel(text: <span class=\"type\">String<\/span>) {\n    textLabel.<span class=\"property\">text<\/span> = text\n}\n<\/code><\/pre><p>Congratulations! Run your code, scan your license and look at all the data it returns! You will, however, notice that it's not very pretty. You can use some regex to parse that out, but we can cover that in another tutorial.<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-03\" style=\"text-decoration: none\">Adding a torch and scan bounds &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-01<\/guid><title>Use AVFoundation to create a scanner to scan your drivers license - Part 1<\/title><description>Phones have come a long way from just making calls and text messaging. You're now able to use your phone to scan barcodes, such as a drivers license, that collects data and displays in just seconds.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-01<\/link><pubDate>Sat, 1 Aug 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use AVFoundation to create a scanner to scan your drivers license - Part 1<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-avfoundation\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/avfoundation\">AVFoundation<\/a>\n        <a class=\"post-category post-category-navigation\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/navigation\">Navigation<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-02\" style=\"text-decoration: none\">Capturing data &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Introduction<\/h3><p>If you're making an app you may need to use the phones camera to scan some sort of barcode. This tutorial will show you how to set up a project to scan your driver's license and display the information on a screen. Let's start by creating a new Xcode project and choosing a Single View App template, Swift for your langauge, and Storyboard for your user interface. The first thing you should do is go into your project settings and lock your orientation to \"Portrait\" and uncheck \"Upside Down\", \"Landscape Left\", and \"Landscape Right\". Go ahead and also check \"Requires full screen\". Then head to storyboard and add a Text View to the view controller and set some constraints. You also want to give your Text View a background color so we can clearly see it. This is where all the information from your drivers license will go. Here's a screenshot of how I set mine up.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/03\/03-01.png\" alt=\"Storyboard initial setup\" \/><p>Let's create an outlet for this textview inside <code>ViewController.swift<\/code> so we can do something with it later. Using the assistant editor <code>ctrl + drag<\/code> from the Text View you created to the top of your view controller class and name it <code>textLabel<\/code>. You can access the assistant editor by pressing <code>ctrl + option + cmd + enter<\/code>. After adding our outlet, click your view controller, go up into <code>Editor &gt; Embed In &gt; Navigation Controller<\/code>. When you are finished with that add a second view controller and give it a <code>Storyboard ID<\/code> of <code>scannerViewController<\/code>. We will need to come back in here in just a moment, but let's go ahead and jump into some code. Head over to <code>ViewController.swift<\/code> and let's add the following things.<\/p><ol><li>A bar button item to allow us to open the camera to start a scan<\/li><\/ol><ol start=\"2\"><li>A function to update our label once we have a successful scan<\/li><\/ol><ol start=\"3\"><li>A way to navigate to our new view controller when we press the button<\/li><\/ol><p>For the first part add the following insde of <code>viewDidLoad()<\/code> of <code>ViewController.swift<\/code><\/p><pre><code><span class=\"keyword\">let<\/span> scanBarButtonItem = <span class=\"type\">UIBarButtonItem<\/span>(barButtonSystemItem: .<span class=\"dotAccess\">camera<\/span>, target: <span class=\"keyword\">self<\/span>, action: <span class=\"keyword\">#selector<\/span>(scanBarcode))\nnavigationItem.<span class=\"property\">rightBarButtonItem<\/span> = scanBarButtonItem\n<\/code><\/pre><p>The second part is partially done by adding the below function, but we will fill it in later. I just want to leave a reminder to come back.<\/p><pre><code><span class=\"keyword\">func<\/span> updateLabel() {\n    <span class=\"comment\">\/\/ this will be where we update our label<\/span>\n}\n<\/code><\/pre><p>For the last part (and a way to remove the error we now have) add the following funciton.<\/p><pre><code><span class=\"keyword\">@objc func<\/span> scanBarcode() {\n    <span class=\"keyword\">if let<\/span> vc = storyboard?.<span class=\"call\">instantiateViewController<\/span>(withIdentifier: <span class=\"string\">\"scannerViewController\"<\/span>) <span class=\"keyword\">as<\/span>? <span class=\"type\">ScannerViewController<\/span> {\n        navigationController?.<span class=\"call\">pushViewController<\/span>(vc, animated: <span class=\"keyword\">true<\/span>)\n    }\n}\n<\/code><\/pre><p>However, this causes another error because we don't actually have a <code>ScannerViewController<\/code> yet. So create new swift file, make it a template of <code>Cocoa Touch Class<\/code> with a subclass of <code>UIViewController<\/code> and give it the name <code>ScannerViewController<\/code>. Then you can head back over to <code>main.storyboard<\/code> and set the custom class to the new <code>ScannerViewController<\/code> that you just created. When you're finished, your <code>ViewController.swift<\/code> should look like this.<\/p><pre><code><span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UIViewController<\/span> {\n\n    <span class=\"keyword\">@IBOutlet weak var<\/span> textLabel: <span class=\"type\">UITextView<\/span>!\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        <span class=\"keyword\">let<\/span> scanBarButtonItem = <span class=\"type\">UIBarButtonItem<\/span>(barButtonSystemItem: .<span class=\"dotAccess\">camera<\/span>, target: <span class=\"keyword\">self<\/span>, action: <span class=\"keyword\">#selector<\/span>(scanBarcode))\n        navigationItem.<span class=\"property\">rightBarButtonItem<\/span> = scanBarButtonItem\n    }\n    \n    <span class=\"keyword\">@objc func<\/span> scanBarcode() {\n        <span class=\"keyword\">if let<\/span> vc = storyboard?.<span class=\"call\">instantiateViewController<\/span>(withIdentifier: <span class=\"string\">\"scannerViewController\"<\/span>) <span class=\"keyword\">as<\/span>? <span class=\"type\">ScannerViewController<\/span> {\n            navigationController?.<span class=\"call\">pushViewController<\/span>(vc, animated: <span class=\"keyword\">true<\/span>)\n        }\n    }\n\n\n    <span class=\"keyword\">func<\/span> updateLabel() {\n        <span class=\"comment\">\/\/ this will be where we update our label<\/span>\n    }\n    \n}\n<\/code><\/pre><h3>Setting up an AVCaptureSession<\/h3><p>Apple already has a great framework for us to use to achieve scanning using our phones. We are going to use <code>AVCaptureSession<\/code> to help us coordinate the flow of data from a visual input to some sort of output. Let's start by adding the following in our <code>ScannerViewController<\/code><\/p><pre><code><span class=\"keyword\">import<\/span> AVFoundation\n<span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"keyword\">class<\/span> ScannerViewController: <span class=\"type\">UIViewController<\/span> {\n\n    <span class=\"keyword\">var<\/span> avCaptureSession: <span class=\"type\">AVCaptureSession<\/span>!\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n\n        <span class=\"comment\">\/\/ Do any additional setup after loading the view.<\/span>\n    }\n    \n}\n<\/code><\/pre><p>Then let's create a function to set up our capture session. Add this function next.<\/p><pre><code><span class=\"keyword\">func<\/span> setUpScanner() {\n    avCaptureSession = <span class=\"type\">AVCaptureSession<\/span>()\n    <span class=\"keyword\">guard let<\/span> videoCaptureDevice = <span class=\"type\">AVCaptureDevice<\/span>.<span class=\"call\">default<\/span>(for: .<span class=\"dotAccess\">video<\/span>) <span class=\"keyword\">else<\/span> { <span class=\"keyword\">return<\/span> }\n    \n    <span class=\"keyword\">do<\/span> {\n        <span class=\"keyword\">let<\/span> videoInput = <span class=\"keyword\">try<\/span> <span class=\"type\">AVCaptureDeviceInput<\/span>(device: videoCaptureDevice)\n        <span class=\"keyword\">if<\/span> avCaptureSession.<span class=\"call\">canAddInput<\/span>(videoInput) {\n            avCaptureSession.<span class=\"call\">addInput<\/span>(videoInput)\n        } <span class=\"keyword\">else<\/span> {\n            <span class=\"comment\">\/\/ Add error message here<\/span>\n            <span class=\"keyword\">return<\/span>\n        }\n    } <span class=\"keyword\">catch<\/span> {\n        <span class=\"comment\">\/\/ Add error message here<\/span>\n        <span class=\"keyword\">return<\/span>\n    }\n    \n    avCaptureSession.<span class=\"call\">startRunning<\/span>()\n}\n<\/code><\/pre><p>Now what this does is create an <code>AVCaptureSession()<\/code> and a capture device. If for some reason there is no camera then the function will perform an early exit to prevent your code from crashing. Since it's possible there won't be any kind of video input we need to wrap this up in a <code>do catch<\/code> statement. If everything is successfull, we will add a video input and start running our session. Finally, call your function inside viewDidLoad by adding<\/p><pre><code><span class=\"call\">setUpScanner<\/span>()\n<\/code><\/pre><p>However, if you run your app now you'll get this error. <code>This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app's Info.plist must contain an NSCameraUsageDescription key with a string value explaining to the user how the app uses this data.<\/code> Apple cares about privacy and does not want you accessing video or audio input from a user without their permission. To fix this navigate over to <code>info.plist<\/code> and add this key and string value.<\/p><pre><code><span class=\"type\">Privacy<\/span> - <span class=\"type\">Camera Usage Description<\/span>: <span class=\"type\">We<\/span> need access to your camera <span class=\"keyword\">in<\/span> order to scan barcodes.\n<\/code><\/pre><p>We also want to stop our capture session when the view leaves. To do that, we will edit our <code>viewWillDisappear<\/code> function.<\/p><pre><code><span class=\"keyword\">override func<\/span> viewWillDisappear(<span class=\"keyword\">_<\/span> animated: <span class=\"type\">Bool<\/span>) {\n    <span class=\"keyword\">super<\/span>.<span class=\"call\">viewWillAppear<\/span>(animated)\n    \n    <span class=\"keyword\">if<\/span> avCaptureSession?.<span class=\"property\">isRunning<\/span> == <span class=\"keyword\">true<\/span> {\n        avCaptureSession.<span class=\"call\">stopRunning<\/span>()\n    }\n}\n<\/code><\/pre><p>You should now be able to run your app and get the prompt asking for access to the camera. However, you won't see anything yet...<\/p><h3>Adding a preview layer<\/h3><p>The reason you can't see anything is because we actually haven't created a layer to preview what the camera sees. This isn't complicated to do, but does require us to use another class called <code>AVCaptureVideoPreviewLayer<\/code>.<\/p><p>At the top of your class add this variable<\/p><pre><code><span class=\"keyword\">var<\/span> avPreviewLayer: <span class=\"type\">AVCaptureVideoPreviewLayer<\/span>!\n<\/code><\/pre><p>Then let's create a function to create an instance of our preview layer. We want to call our function at the bottom of <code>setupScanner()<\/code>.<\/p><pre><code><span class=\"keyword\">func<\/span> addPreviewLayer() {\n    avPreviewLayer = <span class=\"type\">AVCaptureVideoPreviewLayer<\/span>(session: avCaptureSession)\n    avPreviewLayer.<span class=\"property\">frame<\/span> = view.<span class=\"property\">layer<\/span>.<span class=\"property\">bounds<\/span>\n    avPreviewLayer.<span class=\"property\">videoGravity<\/span> = .<span class=\"dotAccess\">resizeAspectFill<\/span>\n    view.<span class=\"property\">layer<\/span>.<span class=\"call\">addSublayer<\/span>(avPreviewLayer)\n}\n<\/code><\/pre><p>This creates a layer for our avCaptureSession, sets the frame to the entire size of our view it's in, gives it an aspect fill ratio so it looks nice, then finally adds this preview layer we just created to our main view. Now you can run your code and see through your camera!<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/03-scan-a-barcode-part-02\" style=\"text-decoration: none\">Capturing data &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-03<\/guid><title>Use Face ID and Touch ID to lock your app from prying eyes - Part 3<\/title><description>The final part of adding biometric authentication to your app. In this section you will learn to add a login button to call for authentication whenever you want.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-03<\/link><pubDate>Thu, 30 Jul 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use Face ID and Touch ID to lock your app from prying eyes - Part 3<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-faceid\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/faceid\">FaceID<\/a>\n        <a class=\"post-category post-category-touchid\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/touchid\">TouchID<\/a>\n        <a class=\"post-category post-category-obj-c\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/objc-c\">Obj-c<\/a>\n        <a class=\"post-category post-category-closures\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/closures\">Closures<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-singl-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-02\" style=\"text-decoration: none\">&larr; Handling Results<\/a><\/th>\n    <\/tr>\n<\/table><h3>Adding a login button<\/h3><p>At this point in time you have a fully working code that allows a user to either login successully or fail to login and receive an error message. However, after the error message shows there is no way to try authentication again without restarting the app. Let's go ahead and fix this by adding a button that only shows after a failed login attempt. Go ahead and add the the following line to your Biometrics class so we can declare a UIButton that may or may not exist at some point in time.<\/p><pre><code><span class=\"keyword\">var<\/span> loginButton: <span class=\"type\">UIButton<\/span>?\n<\/code><\/pre><p>Once again, you can create this button however you want, even in Storyboard, but I want to do this all in code so it's easy to transport to other apps of yours. We will do the following things:<\/p><ol><li>Create a UIButton from a variable above with a custom type<\/li><\/ol><ol start=\"2\"><li>Make the button look a bit prettier by adding colors, borders, some edge insets, and a preferred font<\/li><\/ol><ol start=\"3\"><li>Add our loginbutton to our lock screen view (this will be passed in as a parameter)<\/li><\/ol><ol start=\"4\"><li>Create some constraints to keep the button towards the bottom of the screen fitting most of the width<\/li><\/ol><ol start=\"5\"><li>Add a click function to the button that calls authenticateUser() so we can try authentication again<\/li><\/ol><p>Feel free to edit this button as you see fit, but here's mine<\/p><pre><code><span class=\"comment\">\/\/ MARK: Configure loginbutton<\/span>\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Biometrics<\/span> {\n    \n    <span class=\"keyword\">func<\/span> configureLoginButton(to view: <span class=\"type\">UIView<\/span>) {\n        loginButton = <span class=\"type\">UIButton<\/span>(type: .<span class=\"dotAccess\">custom<\/span>)\n        <span class=\"call\">assert<\/span>(loginButton != <span class=\"keyword\">nil<\/span>, <span class=\"string\">\"There was a problem creating the login button\"<\/span>)\n        \n        loginButton?.<span class=\"property\">backgroundColor<\/span> = <span class=\"type\">UIColor<\/span>.<span class=\"property\">systemGreen<\/span>\n        loginButton?.<span class=\"property\">layer<\/span>.<span class=\"property\">cornerRadius<\/span> = <span class=\"number\">8<\/span>\n        loginButton?.<span class=\"property\">titleEdgeInsets<\/span> = <span class=\"type\">UIEdgeInsets<\/span>(top: <span class=\"number\">5<\/span>, left: <span class=\"number\">10<\/span>, bottom: <span class=\"number\">5<\/span>, right: <span class=\"number\">10<\/span>)\n        loginButton?.<span class=\"property\">titleLabel<\/span>?.<span class=\"property\">font<\/span> = .<span class=\"call\">preferredFont<\/span>(forTextStyle: .<span class=\"dotAccess\">title1<\/span>)\n        loginButton?.<span class=\"property\">translatesAutoresizingMaskIntoConstraints<\/span> = <span class=\"keyword\">false<\/span>\n        loginButton?.<span class=\"call\">setTitle<\/span>(<span class=\"string\">\"Login\"<\/span>, for: .<span class=\"dotAccess\">normal<\/span>)\n        loginButton?.<span class=\"call\">setTitleColor<\/span>(.<span class=\"dotAccess\">white<\/span>, for: .<span class=\"dotAccess\">normal<\/span>)\n        \n        view.<span class=\"call\">addSubview<\/span>(loginButton!)\n        \n        loginButton?.<span class=\"property\">leadingAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">leadingAnchor<\/span>, constant: <span class=\"number\">40<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        loginButton?.<span class=\"property\">trailingAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">trailingAnchor<\/span>, constant: -<span class=\"number\">40<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        loginButton?.<span class=\"property\">bottomAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">bottomAnchor<\/span>, constant: -<span class=\"number\">40<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        loginButton?.<span class=\"property\">centerXAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">centerXAnchor<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        \n        loginButton?.<span class=\"call\">addTarget<\/span>(<span class=\"keyword\">self<\/span>, action: <span class=\"keyword\">#selector<\/span>(authenticateUser), for: .<span class=\"dotAccess\">touchUpInside<\/span>)\n    }\n    \n}\n<\/code><\/pre><p>And then we need to call this function at the very bottom of <code>showLockedScreen()<\/code> like this<\/p><pre><code><span class=\"call\">configureLoginButton<\/span>(to: lockScreenView!)\n<\/code><\/pre><p>Now that code will actually fail to compile right now with this error <code>Argument of '#selector' refers to instance method 'authenticateUser()' that is not exposed to Objective-C<\/code>. Anytime you add a selector in Swift (which here is using addTarget to the loginButton) we need to make sure we tell Swift that we are callling code from Objective-C. Fortunately, it's a very easy fix. Just add <code>@objc<\/code> before declaring the authenticateUser function so it looks like this<\/p><pre><code><span class=\"keyword\">@objc func<\/span> authenticateUser()\n<\/code><\/pre><p>Now what I want to do is hide the button until it's needed. It's easy to show the button, but hiding it is a bit of a different story. To show the button, simply write this method at the very top of authenticateUser.<\/p><pre><code>loginButton?.<span class=\"property\">isHidden<\/span> = <span class=\"keyword\">true<\/span>\n<\/code><\/pre><p>Yes, we need to use the question mark because this button may or may not be nil at any point in our code. Now onto the more difficult part. We only want to hide the button if the user fails authentication which means we need to do something after clicking \"OK\" from that alert. This means we need to write a closure. If you don't know already, closures are self-contained blocks of functionality that can be used throughout your code and passed around as parameters if needed. Let's start with creating a parameter inside of <code>showAlert()<\/code> for an optional closure. We will make it optional because we have two different functions that call <code>showAlert()<\/code>, but we only want one to pass in a closure. The closure we write will take in a UIAlertAction as a parameter and return nothing. The syntax for that looks like <code>(UIAlertAction) -&gt; Void)<\/code>. However, we do need to wrap it with another set of parentheses and a <code>?<\/code> since we are making it optional. Edit <code>showAlert<\/code> to look like this. Note that we added this parameter inside of <code>ac.addAction<\/code> but kept the completion nil in the third line of the function.<\/p><pre><code><span class=\"keyword\">func<\/span> showAlert(title: <span class=\"type\">String<\/span>, message: <span class=\"type\">String<\/span>, completion: ((<span class=\"type\">UIAlertAction<\/span>) -&gt; <span class=\"type\">Void<\/span>)?) {\n    <span class=\"keyword\">let<\/span> ac = <span class=\"type\">UIAlertController<\/span>(title: title, message: message, preferredStyle: .<span class=\"dotAccess\">alert<\/span>)\n    ac.<span class=\"call\">addAction<\/span>(<span class=\"type\">UIAlertAction<\/span>(title: <span class=\"string\">\"OK\"<\/span>, style: .<span class=\"dotAccess\">default<\/span>, handler: completion))\n    <span class=\"type\">UIApplication<\/span>.<span class=\"call\">topViewController<\/span>()?.<span class=\"call\">present<\/span>(ac, animated: <span class=\"keyword\">true<\/span>, completion: <span class=\"keyword\">nil<\/span>)\n}\n<\/code><\/pre><p>We now need to edit our two functions that call showAlert(). <code>showAlertForBiometryUnavailable()<\/code> can just pass in <code>nil<\/code> as it's completion. But we will use closure syntax for <code>showAlertForFailedVerification()<\/code> The closure looks like<\/p><pre><code>{ action <span class=\"keyword\">in\n    self<\/span>.<span class=\"property\">loginButton<\/span>?.<span class=\"property\">isHidden<\/span> = <span class=\"keyword\">false<\/span>\n}\n<\/code><\/pre><p>I know it's a bit strange, but it is very nice being able to do this in Swift. Wrapping these three functions up together should look like this when you are finished.<\/p><pre><code><span class=\"keyword\">func<\/span> showAlertForBiometryUnavailable() {\n    <span class=\"keyword\">let<\/span> title = <span class=\"string\">\"Biometry unavailable\"<\/span>\n    <span class=\"keyword\">let<\/span> message = <span class=\"string\">\"Your device is not configure for biometric authentication\"<\/span>\n    <span class=\"call\">showAlert<\/span>(title: title, message: message, completion: <span class=\"keyword\">nil<\/span>)\n    \n}\n\n<span class=\"keyword\">func<\/span> showAlertForFailedVerification() {\n    <span class=\"keyword\">let<\/span> title = <span class=\"string\">\"Authentication failed\"<\/span>\n    <span class=\"keyword\">let<\/span> message = <span class=\"string\">\"Verification failed. Please try again\"<\/span>\n    <span class=\"call\">showAlert<\/span>(title: title, message: message, completion: { action <span class=\"keyword\">in\n        self<\/span>.<span class=\"property\">loginButton<\/span>?.<span class=\"property\">isHidden<\/span> = <span class=\"keyword\">false<\/span>\n    })\n}\n\n<span class=\"keyword\">func<\/span> showAlert(title: <span class=\"type\">String<\/span>, message: <span class=\"type\">String<\/span>, completion: ((<span class=\"type\">UIAlertAction<\/span>) -&gt; <span class=\"type\">Void<\/span>)?) {\n    <span class=\"keyword\">let<\/span> ac = <span class=\"type\">UIAlertController<\/span>(title: title, message: message, preferredStyle: .<span class=\"dotAccess\">alert<\/span>)\n    ac.<span class=\"call\">addAction<\/span>(<span class=\"type\">UIAlertAction<\/span>(title: <span class=\"string\">\"OK\"<\/span>, style: .<span class=\"dotAccess\">default<\/span>, handler: completion))\n    <span class=\"type\">UIApplication<\/span>.<span class=\"call\">topViewController<\/span>()?.<span class=\"call\">present<\/span>(ac, animated: <span class=\"keyword\">true<\/span>, completion: <span class=\"keyword\">nil<\/span>)\n}\n<\/code><\/pre><p>Go ahead and run your code now. Fail authentication enough times until you get the alert then watch the login button pop up. As soon as you tap the login button it disappears and prompts the biometric screening again!<\/p><p>I hope you enjoyed this tutorial and you're now able to easily implement biometrics inside your own apps. In case you were wondering, the four lines of code to make it all work are these<\/p><pre><code><span class=\"keyword\">var<\/span> biometrics: <span class=\"type\">Biometrics<\/span>?\nbiometrics = <span class=\"type\">Biometrics<\/span>()\nbiometrics?.<span class=\"call\">showLockedScreen<\/span>(backgroundColor: .<span class=\"dotAccess\">systemYellow<\/span>, logo: <span class=\"type\">UIImage<\/span>(named: <span class=\"string\">\"logo\"<\/span>), width: <span class=\"number\">0.7<\/span>, toView: <span class=\"keyword\">self<\/span>.<span class=\"property\">view<\/span>)\nbiometrics?.<span class=\"call\">authenticateUser<\/span>()\n<\/code><\/pre><p>Of course, you'll need to add the Biometrics class in, but that's as easy as dragging and dropping! You can see the full source code for this project <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\/tree\/master\/How-To-Setup-Biometrics\/How-To-Setup-Biometrics\">here<\/a><\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-singl-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-02\" style=\"text-decoration: none\">&larr; Handling Results<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-02<\/guid><title>Use Face ID and Touch ID to lock your app from prying eyes - Part 2<\/title><description>Part two of adding biometric authentication to your app. This part focuses on handling success and failure for authentication.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-02<\/link><pubDate>Wed, 29 Jul 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use Face ID and Touch ID to lock your app from prying eyes - Part 2<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-faceid\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/faceid\">FaceID<\/a>\n        <a class=\"post-category post-category-touchid\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/touchid\">TouchID<\/a>\n        <a class=\"post-category post-category-extensions\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/extensions\">Extensions<\/a>\n        <a class=\"post-category post-category-alerts\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/alerts\">Alerts<\/a>\n        <a class=\"post-category post-category-autolayout\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/autolayout\">Autolayout<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-03\" style=\"text-decoration: none\">Adding a login button &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Handling Failure<\/h3><p>Now at this point and time we can ask for identification, but nothing actually happens yet no matter if the user passes or fails their test. Let's fix that now. Let's start by handling the failure. We need to create two error messages, one for handling the case if there is no biometry available to users and the other for if they fail their biometry test. Now if you tried to add an alert right now you wouldn't be able to since it is a subclass of UIViewController. So you need to add an import statement for UIKit while also making our Biometrics class a subclass of UIViewController. Are there other ways around this? Absolutely, but remember, I'm trying to show you how to create something that is easily reusable. You can adjust it as needed in your own project. Add your import statement and edit your class like below.<\/p><pre><code>...\n<span class=\"keyword\">import<\/span> UIKit\n\n<span class=\"comment\">\/\/ MARK: Class initialization<\/span>\n<span class=\"keyword\">class<\/span> Biometrics: <span class=\"type\">UIViewController<\/span> {\n...\n<\/code><\/pre><p>Now back to it. Since we are going to have more than one message, let's go ahead and create a basic alert function as well as two functions that call our basic alert function with specific parameters. You can add this inside your Biometrics class or create an extension below it. I will do the latter here.<\/p><pre><code><span class=\"comment\">\/\/ MARK: Biometric UIAlerts<\/span>\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Biometrics<\/span> {\n    \n    <span class=\"keyword\">func<\/span> showAlertForBiometryUnavailable() {\n        <span class=\"keyword\">let<\/span> title = <span class=\"string\">\"Biometry unavailable\"<\/span>\n        <span class=\"keyword\">let<\/span> message = <span class=\"string\">\"Your device is not configure for biometric authentication\"<\/span>\n        <span class=\"call\">showAlert<\/span>(title: title, message: message)\n        \n    }\n    \n    <span class=\"keyword\">func<\/span> showAlertForFailedVerification() {\n        <span class=\"keyword\">let<\/span> title = <span class=\"string\">\"Authentication failed\"<\/span>\n        <span class=\"keyword\">let<\/span> message = <span class=\"string\">\"Verification failed. Please try again\"<\/span>\n        <span class=\"call\">showAlert<\/span>(title: title, message: message)\n    }\n    \n    <span class=\"keyword\">func<\/span> showAlert(title: <span class=\"type\">String<\/span>, message: <span class=\"type\">String<\/span>) {\n        <span class=\"keyword\">let<\/span> ac = <span class=\"type\">UIAlertController<\/span>(title: title, message: message, preferredStyle: .<span class=\"dotAccess\">alert<\/span>)\n        ac.<span class=\"call\">addAction<\/span>(<span class=\"type\">UIAlertAction<\/span>(title: <span class=\"string\">\"OK\"<\/span>, style: .<span class=\"dotAccess\">default<\/span>, handler: <span class=\"keyword\">nil<\/span>))\n        <span class=\"call\">present<\/span>(ac, animated: <span class=\"keyword\">true<\/span>)\n    }\n    \n}\n<\/code><\/pre><p>Then we need to call our functions inside authenticateUser(). Note that we need to call <code>self?<\/code> for showAlertForFailedVerification because we are using <code>[weak self]<\/code> inside of our closure. Edit authenticateUser() to look like this<\/p><pre><code><span class=\"keyword\">func<\/span> authenticateUser() {\n    \n    <span class=\"keyword\">if<\/span> context.<span class=\"call\">canEvaluatePolicy<\/span>(.<span class=\"dotAccess\">deviceOwnerAuthenticationWithBiometrics<\/span>, error: <span class=\"keyword\">nil<\/span>) {\n        \n        <span class=\"keyword\">let<\/span> reason = <span class=\"string\">\"Please login using TouchID in order to have access to this app\"<\/span>\n        \n        context.<span class=\"call\">evaluatePolicy<\/span>(.<span class=\"dotAccess\">deviceOwnerAuthenticationWithBiometrics<\/span>, localizedReason: reason) {\n            [<span class=\"keyword\">weak self<\/span>] success, error <span class=\"keyword\">in<\/span>\n            \n            <span class=\"type\">DispatchQueue<\/span>.<span class=\"property\">main<\/span>.<span class=\"call\">async<\/span> {\n                <span class=\"keyword\">if<\/span> success {\n                    <span class=\"comment\">\/\/ User passed<\/span>\n                } <span class=\"keyword\">else<\/span> {\n                    <span class=\"keyword\">self<\/span>?.<span class=\"call\">showAlertForFailedVerification<\/span>()\n                }\n            }\n        }\n    } <span class=\"keyword\">else<\/span> {\n        <span class=\"call\">showAlertForBiometryUnavailable<\/span>()\n    }\n}\n<\/code><\/pre><p>Now go ahead and run your code and fail the biometry portion! You'll notice that you don't actually get the error message. What gives?<\/p><p>I admit, this part is a bit annoying, but it also teaches you a way to handle this. The UIAlert wants to be displayed from the top level view controller, however, we are currently looking at our main view controller and calling a function from our biometrics (now view controller). What we can do is create an extension that finds the top view controller for us and then displays the alert over it. That means we also need to edit the line that actually presents our view controller for us. Add this extension below, and edit <code>present(ac, animated: true)<\/code> as well.<\/p><pre><code><span class=\"comment\">\/\/ MARK: UIApplication Extensions<\/span>\n<span class=\"keyword\">extension<\/span> <span class=\"type\">UIApplication<\/span> {\n    <span class=\"keyword\">class func<\/span> topViewController(controller: <span class=\"type\">UIViewController<\/span>? = <span class=\"type\">UIApplication<\/span>.<span class=\"property\">shared<\/span>.<span class=\"property\">windows<\/span>.<span class=\"property\">first<\/span>?.<span class=\"property\">rootViewController<\/span>) -&gt; <span class=\"type\">UIViewController<\/span>? {\n        <span class=\"keyword\">if let<\/span> navigationController = controller <span class=\"keyword\">as<\/span>? <span class=\"type\">UINavigationController<\/span> {\n            <span class=\"keyword\">return<\/span> <span class=\"call\">topViewController<\/span>(controller: navigationController.<span class=\"property\">visibleViewController<\/span>)\n        }\n        <span class=\"keyword\">if let<\/span> tabController = controller <span class=\"keyword\">as<\/span>? <span class=\"type\">UITabBarController<\/span> {\n            <span class=\"keyword\">if let<\/span> selected = tabController.<span class=\"property\">selectedViewController<\/span> {\n                <span class=\"keyword\">return<\/span> <span class=\"call\">topViewController<\/span>(controller: selected)\n            }\n        }\n        <span class=\"keyword\">if let<\/span> presented = controller?.<span class=\"property\">presentedViewController<\/span> {\n            <span class=\"keyword\">return<\/span> <span class=\"call\">topViewController<\/span>(controller: presented)\n        }\n        <span class=\"keyword\">return<\/span> controller\n    }\n}\n<\/code><\/pre><pre><code><span class=\"keyword\">func<\/span> showAlert(title: <span class=\"type\">String<\/span>, message: <span class=\"type\">String<\/span>) {\n    <span class=\"keyword\">let<\/span> ac = <span class=\"type\">UIAlertController<\/span>(title: title, message: message, preferredStyle: .<span class=\"dotAccess\">alert<\/span>)\n    ac.<span class=\"call\">addAction<\/span>(<span class=\"type\">UIAlertAction<\/span>(title: <span class=\"string\">\"OK\"<\/span>, style: .<span class=\"dotAccess\">default<\/span>, handler: <span class=\"keyword\">nil<\/span>))\n    <span class=\"type\">UIApplication<\/span>.<span class=\"call\">topViewController<\/span>()?.<span class=\"call\">present<\/span>(ac, animated: <span class=\"keyword\">true<\/span>, completion: <span class=\"keyword\">nil<\/span>)\n}\n<\/code><\/pre><p>Now you should be able to run your app, fail authentication, and see your error pop up!<\/p><h3>Handling Success<\/h3><p>Now it's time to actually make this app need a reason to use biometrics. Remember how we edited our main view controller to have one color then our launch screen to have a different color along with a logo? Did you notice that when you launch your app you show your launch screen for a short amount of time and then it still changes to the next view controller? What I want to do is show you how to hide your main view controller until the user passses authentication. Now we can't actually extend the length of time that the launch screen shows, but we can create an initial screen to look exactly like our launch screen. That was the reason I had you use those specific constraints when creating it in the first place.<\/p><p>The first step is creating a function that makes a new view that looks exactly like our launch screen in code. You can always create the same screen in storyboard, but doing it this way allows you to reuse this code easily in other apps. Here are the steps.<\/p><ol><li>Create an optional UIView property so we can show it and dismiss it as we please<\/li><\/ol><ol start=\"2\"><li>Create the function with parameters for background color, an image, width, and fourth parameter of a uiview that we will pass in from our main view controller<\/li><\/ol><ol start=\"3\"><li>Inside the function created in step 2 we will initialize the lockscreen, create an image view, add constraints, and display it on our main screen behind our biometric authentication<\/li><\/ol><p>Add this property now inside your Biometrics class<\/p><pre><code><span class=\"keyword\">var<\/span> lockScreenView: <span class=\"type\">UIView<\/span>?\n<\/code><\/pre><p>Then create the following function for steps 2 and 3<\/p><pre><code><span class=\"comment\">\/\/ MARK: Configure Lockscreen<\/span>\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Biometrics<\/span> {\n    \n    <span class=\"keyword\">func<\/span> showLockedScreen(backgroundColor: <span class=\"type\">UIColor<\/span>, logo: <span class=\"type\">UIImage<\/span>?, width: <span class=\"type\">CGFloat<\/span>, toView view: <span class=\"type\">UIView<\/span>) {\n        lockScreenView = <span class=\"type\">UIView<\/span>()\n        <span class=\"call\">assert<\/span>(lockScreenView != <span class=\"keyword\">nil<\/span>, <span class=\"string\">\"There was a problem creating the lock screen view\"<\/span>)\n        lockScreenView!.translatesAutoresizingMaskIntoConstraints = <span class=\"keyword\">false<\/span>\n        lockScreenView!.backgroundColor = backgroundColor\n        \n        <span class=\"keyword\">let<\/span> imageView = <span class=\"type\">UIImageView<\/span>()\n        imageView.<span class=\"property\">translatesAutoresizingMaskIntoConstraints<\/span> = <span class=\"keyword\">false<\/span>\n        assert(logo != <span class=\"keyword\">nil<\/span>, <span class=\"string\">\"Could not find image!\"<\/span>)\n        imageView.<span class=\"property\">image<\/span> = logo!\n        imageView.<span class=\"property\">contentMode<\/span> = .<span class=\"dotAccess\">scaleAspectFit<\/span>\n        \n        lockScreenView!.<span class=\"call\">addSubview<\/span>(imageView)\n        imageView.<span class=\"property\">widthAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: lockScreenView!.widthAnchor, multiplier: width).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        imageView.<span class=\"property\">centerXAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: lockScreenView!.centerXAnchor).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        imageView.<span class=\"property\">centerYAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: lockScreenView!.centerYAnchor).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        \n        view.<span class=\"call\">addSubview<\/span>(lockScreenView!)\n        lockScreenView?.<span class=\"property\">leadingAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">leadingAnchor<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        lockScreenView?.<span class=\"property\">trailingAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">trailingAnchor<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        lockScreenView?.<span class=\"property\">topAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">topAnchor<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n        lockScreenView?.<span class=\"property\">bottomAnchor<\/span>.<span class=\"call\">constraint<\/span>(equalTo: view.<span class=\"property\">bottomAnchor<\/span>).<span class=\"property\">isActive<\/span> = <span class=\"keyword\">true<\/span>\n    }\n}\n<\/code><\/pre><p>There's a bit going on here so I want to explain what is happening. The <code>assert()<\/code> function is optional. It just causes your app to fail if there is no logo found. This ensures you type it in correctly. The <code>lockScreenView!.translatesAutoresizingMaskIntoConstraints = false<\/code> allows us to edit our constraints by code. Then we create a new image using code and attach our logo as its image that will be passed in as a parameter when we call the function. We then add the lockscreen view to our subview and <em>then<\/em> we set the contsraints. The order here matters. Note that we also pass in a width parameter. Remember in the beginning when we set the width of our logo to 70% of its parent view? When we call showLockedScreen() we can add in 0.7 to set our second logo to the same size so it doesn't look like the screen changes from the launch screen to our locked screen. This isn't perfect, but it's decent enough for now. You may want to adjust this part yourself for your own project. Then, we add our lockScreenView to another view, which will also be passed in as a parameter when calling the function. We will pass in the view of mainViewController since that is the intial view controller shown after the launch screen. Finally, we need to call this function. Let's go ahead and add our fourth line of code to <code>ViewController.swift<\/code>, by calling the function and passing the correct parameters.<\/p><pre><code><span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UIViewController<\/span> {\n    \n    <span class=\"keyword\">var<\/span> biometrics: <span class=\"type\">Biometrics<\/span>?\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        biometrics = <span class=\"type\">Biometrics<\/span>()\n        biometrics?.<span class=\"call\">showLockedScreen<\/span>(backgroundColor: .<span class=\"dotAccess\">systemYellow<\/span>, logo: <span class=\"type\">UIImage<\/span>(named: <span class=\"string\">\"logo\"<\/span>), width: <span class=\"number\">0.7<\/span>, toView: <span class=\"keyword\">self<\/span>.<span class=\"property\">view<\/span>)\n        biometrics?.<span class=\"call\">authenticateUser<\/span>()\n    }\n    \n}\n<\/code><\/pre><p>Finally, we need to dismiss our lockScreenView if our authentication passes. We will do this by removing the lock screen from it's superview. Edit your code to look like this<\/p><pre><code>...\n<span class=\"type\">DispatchQueue<\/span>.<span class=\"property\">main<\/span>.<span class=\"call\">async<\/span> {\n    <span class=\"keyword\">if<\/span> success {\n        <span class=\"keyword\">self<\/span>?.<span class=\"property\">lockScreenView<\/span>?.<span class=\"call\">removeFromSuperview<\/span>()\n    } <span class=\"keyword\">else<\/span> {\n        <span class=\"keyword\">self<\/span>?.<span class=\"call\">showAlertForFailedVerification<\/span>()\n    }\n}\n...\n<\/code><\/pre><p>Run your code and you should be able to pass authentication and see your view controller!<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-03\" style=\"text-decoration: none\">Adding a login button &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-01<\/guid><title>Use Face ID and Touch ID to lock your app from prying eyes - Part 1<\/title><description>Privacy is one of the most important things when it comes to your personal device. Apple has created ways to allow developers to add privacy without much work on our end! You can add fully functioning Face ID or Touch ID inside your app with only four lines of code!<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-01<\/link><pubDate>Tue, 28 Jul 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Use Face ID and Touch ID to lock your app from prying eyes - Part 1<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-feature\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/feature\">Feature<\/a>\n        <a class=\"post-category post-category-faceid\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/faceid\">FaceID<\/a>\n        <a class=\"post-category post-category-touchid\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/touchid\">TouchID<\/a>\n        <a class=\"post-category post-category-uikit\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/uikit\">UIKit<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-02\" style=\"text-decoration: none\">Handling Results &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Introduction<\/h3><p>Okay, let's be clear here. When I say four lines of code, there is a caveat. You need to add the functionality first! But seriously, after this tutorial, you can reuse the code here and write four more lines of code for each app afterwards to add Face ID and Touch ID to all of your apps! If you are needing this in a rush, download the biometrics swift file <a href=\"https:\/\/github.com\/thomaskellough\/iOS-Tutorials-UIKit-Swift\/blob\/master\/How-To-Setup-Biometrics\/How-To-Setup-Biometrics\/Biometrics.swift\">here<\/a> and just drag and drop it in your app!<\/p><p>Let's start by creating a new Xcode project and choosing a Single View App template, Swift for your langauge, and Storyboard for your user interface. Head into Storyboard and give your view a background color. This is just so it's easier to see. If you forgot how to do that here is an image with some arrows of where you need to go. If you want, feel free to also add a text box that can hide a secret message. I think it makes it more fun.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/02\/02-01.png\" alt=\"Storyboard background color change\"\/><p>After that I want us to add a launch screen. In your project navigator select <code>LaunchScreen.storyboard<\/code>. It looks very similar to <code>Main.storyboard<\/code>. I want you to add a background color here as well, but I want you to choose a different color for the launch screen and add a logo in the middle of it. In order to add a logo you'll need to drag an image view inside of your launch screen view and set some constraints. The constraints that I want you to set are<\/p><ol><li>Image view to safe area - center x<\/li><\/ol><ol start=\"2\"><li>Image view to safe area - center y<\/li><\/ol><ol start=\"3\"><li>Image view to safe area - Equal widths, then go into the attributes inspector and set the multiplier by 0.7<\/li><\/ol><ol start=\"4\"><li>Image view to itself - aspect ratio and set the ratio to 1:1<\/li><\/ol><ol start=\"5\"><li>Finally, add any kind of launch screen image you'd like. I'll be using a Swift logo.<\/li><\/ol><p>Here are a few screenshots to help you out. To set the aspect ratio of the image view <code>ctrl + drag<\/code> from the image view to itself then select <code>Aspect Ratio<\/code>.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/02\/02-02.png\" alt=\"Showing horizontal and vertical constraints\"\/><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/02\/02-03.png\" alt=\"Setting width\"\/><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/02\/02-04.png\" alt=\"Setting aspect ratio\"\/><h3>Adding Biometrics class<\/h3><p>You should be able to run your app now and see your launch screen start up then quickly change to your main view controller. Let's go ahead and get started with the fun part. In order for us to use only four lines of code in the future, we need to create a custom class that contains nearly all of the requirements of adding biometric authentication. In all honestly, I'd probably separate the file into multiple parts in a real project, but for now this will do the trick. It also makes it easier to reuse in other projects this way.<\/p><p>Go ahead and create a new swift file called <code>Biometrics.swift<\/code> and add the following code<\/p><pre><code><span class=\"keyword\">import<\/span> Foundation\n<span class=\"keyword\">import<\/span> LocalAuthentication\n\n<span class=\"comment\">\/\/ MARK: Class initialization<\/span>\n<span class=\"keyword\">class<\/span> Biometrics {\n    \n}\n<\/code><\/pre><p>This intial setup imports the LocalAuthentication module that allows us to access all of the biometric functions that Apple has created for us. I want to break down each piece so you understand what's actually happening. The first step is adding our function that we can call to authenticate our user and allow them access to our app. This function will do a few different things.<\/p><ol><li>Create an LAContext() object which handles userinteraction and talks to the hardware element that manages the data collected from the biometrics of the device. LAContext() actually does all the heavy lifting for us by giving us a callback of an authentication check either passing or failing as well as an explanation of failing if there is one.<\/li><\/ol><ol start=\"2\"><li>Ask the LAContext() created in step one to check whether the phone has either FaceID or TouchID and also provide the user a reason for asking them to reveal themselves.<\/li><\/ol><ol start=\"3\"><li>If the device is capable of either Face ID or Touch ID then proceed with the check.<\/li><\/ol><ol start=\"4\"><li>Return either a success or failure that you can do with as you please.<\/li><\/ol><p>Add this inside function your Biometrics class.<\/p><pre><code><span class=\"keyword\">let<\/span> context = <span class=\"type\">LAContext<\/span>()\n\n<span class=\"keyword\">func<\/span> authenticateUser() {\n    \n    <span class=\"keyword\">if<\/span> context.<span class=\"call\">canEvaluatePolicy<\/span>(.<span class=\"dotAccess\">deviceOwnerAuthenticationWithBiometrics<\/span>, error: <span class=\"keyword\">nil<\/span>) {\n        \n        <span class=\"keyword\">let<\/span> reason = <span class=\"string\">\"Please login using Touch ID in order to have access to this app\"<\/span>\n        \n        context.<span class=\"call\">evaluatePolicy<\/span>(.<span class=\"dotAccess\">deviceOwnerAuthenticationWithBiometrics<\/span>, localizedReason: reason) {\n            [<span class=\"keyword\">weak self<\/span>] success, error <span class=\"keyword\">in<\/span>\n            \n            <span class=\"type\">DispatchQueue<\/span>.<span class=\"property\">main<\/span>.<span class=\"call\">async<\/span> {\n                <span class=\"keyword\">if<\/span> success {\n                    <span class=\"comment\">\/\/ User passed<\/span>\n                } <span class=\"keyword\">else<\/span> {\n                    <span class=\"comment\">\/\/ User did not pass<\/span>\n                }\n            }\n        }\n    } <span class=\"keyword\">else<\/span> {\n        <span class=\"comment\">\/\/ Biometrics are unavailable<\/span>\n    }\n}\n<\/code><\/pre><p>Then inside <code>ViewController.swift<\/code> let's call this function to see it in action.<\/p><pre><code><span class=\"keyword\">class<\/span> ViewController: <span class=\"type\">UIViewController<\/span> {\n    \n    <span class=\"keyword\">var<\/span> biometrics: <span class=\"type\">Biometrics<\/span>?\n    \n    <span class=\"keyword\">override func<\/span> viewDidLoad() {\n        <span class=\"keyword\">super<\/span>.<span class=\"call\">viewDidLoad<\/span>()\n        \n        biometrics = <span class=\"type\">Biometrics<\/span>()\n        biometrics?.<span class=\"call\">authenticateUser<\/span>()\n    }\n    \n}\n<\/code><\/pre><p>Now depending on what kind of device you run this on you may or may not get an error. If you run it on an iPhone that has Touch ID you won't have an issue, however, if you run it on an iPhone with Face ID you will get this error<\/p><p><code>This app has crashed because it attempted to access privacy-sensitive data without a usage description.  The app's Info.plist must contain an NSFaceIDUsageDescription key with a string value explaining to the user how the app uses this data.<\/code> You'll notice that for the reason I wrote <code>let reason = \"Please login using Touch ID in order to have access to this app\"<\/code> and I didn't say anything about Face ID. As the error message says, we need to edit the <code>Info.plist<\/code> in the app to ask for permission to access this data, whereas, Touch ID is handled using code. Head over to <code>Info.plist<\/code> and add a new key called <code>Privacy - Face ID Usage Description<\/code> with a string value of <code>Please login using Face ID in order to have access to this app<\/code>. Note, you can edit this string value to whatever you want, just make sure it makes sense or Apple will reject it.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/02\/02-05.png\" alt=\"Editing info.plist\"\/><p>You should now see both kinds of devices ask for authentication with Face ID or Touch ID. Wow, that was fast and easy!<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/02\/02-06.png\" alt=\"Editing info.plist\"\/><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/02-biometrics-uikit-part-02\" style=\"text-decoration: none\">Handling Results &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-04<\/guid><title>Build your very own website using Swift - Part 4<\/title><description>The final part of building your own website using Swift. In here you will learn how to use the SplashPublishPlugin and deploy your website.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-04<\/link><pubDate>Mon, 27 Jul 2020 22:03:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Build your very own website using Swift - Part 4<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-publish\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/publish\">Publish<\/a>\n        <a class=\"post-category post-category-website\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/website\">Website<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-singl-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-03\" style=\"text-decoration: none\">&larr; Pages, tags, and metadata<\/a><\/th>\n    <\/tr>\n<\/table><h3>Using SplashPublishPlugin<\/h3><p>Okay, let's be honest here. You are using Swift to make a website. If you've made it this far you are probably serious about starting some sort of blog. It's possible you're making a blog for recipes or traveling, but it's highly likely you're making one for programming. With programming, you probably plan to add some code. Go to your markdown file add add in the following code, but remove the space in between both sets of triple backticks.<\/p><pre><code>`` `\n<span class=\"keyword\">func<\/span> codeExample() -&gt; <span class=\"type\">String<\/span> {\n    <span class=\"keyword\">return<\/span> <span class=\"string\">\"Hello world!\"<\/span>\n}\n`` `\n<\/code><\/pre><p>Yes, those backtick marks are necessary! That's how markdown knows you are adding code. View the post and you should see something like this.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-13.png\" alt=\"Xcode running publish\" width=\"800\"\/><p>There is no syntax highlighting! John Sundell has actually created a specific plugin that Publish can use to automatically apply this for us. Check out the <a href=\"https:\/\/github.com\/JohnSundell\/SplashPublishPlugin\">SplashPublishPlugin<\/a>. Let's go ahead and use this now, because you'll find that it's actually very easy to do!<\/p><p>The first thing we need to do is add the plugin as a dependency inside <code>Package.swift<\/code>. If you look at the file now you'll see this.<\/p><pre><code><span class=\"keyword\">import<\/span> PackageDescription\n\n<span class=\"keyword\">let<\/span> package = <span class=\"type\">Package<\/span>(\n    name: <span class=\"string\">\"BlogExample\"<\/span>,\n    products: [\n        .<span class=\"call\">executable<\/span>(\n            name: <span class=\"string\">\"BlogExample\"<\/span>,\n            targets: [<span class=\"string\">\"BlogExample\"<\/span>]\n        )\n    ],\n    dependencies: [\n        .<span class=\"call\">package<\/span>(name: <span class=\"string\">\"Publish\"<\/span>, url: <span class=\"string\">\"https:\/\/github.com\/johnsundell\/publish.git\"<\/span>, from: <span class=\"string\">\"0.6.0\"<\/span>)\n    ],\n    targets: [\n        .<span class=\"call\">target<\/span>(\n            name: <span class=\"string\">\"BlogExample\"<\/span>,\n            dependencies: [<span class=\"string\">\"Publish\"<\/span>]\n        )\n    ]\n)\n<\/code><\/pre><p>Edit it to look like this. We are just adding a new package and target dependency name.<\/p><pre><code><span class=\"keyword\">import<\/span> PackageDescription\n\n<span class=\"keyword\">let<\/span> package = <span class=\"type\">Package<\/span>(\n    name: <span class=\"string\">\"BlogExample\"<\/span>,\n    products: [\n        .<span class=\"call\">executable<\/span>(\n            name: <span class=\"string\">\"BlogExample\"<\/span>,\n            targets: [<span class=\"string\">\"BlogExample\"<\/span>]\n        )\n    ],\n    dependencies: [\n        .<span class=\"call\">package<\/span>(name: <span class=\"string\">\"Publish\"<\/span>, url: <span class=\"string\">\"https:\/\/github.com\/johnsundell\/publish.git\"<\/span>, from: <span class=\"string\">\"0.6.0\"<\/span>),\n        .<span class=\"call\">package<\/span>(name: <span class=\"string\">\"SplashPublishPlugin\"<\/span>, url: <span class=\"string\">\"https:\/\/github.com\/johnsundell\/splashpublishplugin\"<\/span>, from: <span class=\"string\">\"0.1.0\"<\/span>)\n    ],\n    targets: [\n        .<span class=\"call\">target<\/span>(\n            name: <span class=\"string\">\"BlogExample\"<\/span>,\n            dependencies: [\n                <span class=\"string\">\"Publish\"<\/span>,\n                <span class=\"string\">\"SplashPublishPlugin\"<\/span>\n            ]\n        )\n    ]\n)\n<\/code><\/pre><p>Sometimes I get some errors when doing this, if that happens close out Xcode and reopen it and it should fix itself and automatically install the new plugin. Then in your CSS file add the following<\/p><pre><code>pre <span class=\"call\">code<\/span> {\n    font-family: monospace;\n    display: block;\n    padding: <span class=\"number\">0<\/span> 20px;\n    color: #a9bcbc;\n    line-height: <span class=\"number\">1<\/span>.4em;\n    font-size: <span class=\"number\">1<\/span>.2em;\n    overflow-x: auto;\n    white-space: pre;\n    border-radius: 10px;\n    padding: 20px;\n    -webkit-overflow-scrolling: touch;\n}\npre code .<span class=\"call\">keyword<\/span> {\n    color: #e73289;\n}\npre code .<span class=\"call\">type<\/span> {\n    color: #8281ca;\n}\npre code .<span class=\"call\">call<\/span> {\n    color: #348fe5;\n}\npre code .<span class=\"call\">property<\/span> {\n    color: #21ab9d;\n}\npre code .<span class=\"call\">number<\/span> {\n    color: #db6f57;\n}\npre code .<span class=\"call\">string<\/span> {\n    color: #fa641e;\n}\npre code .<span class=\"call\">comment<\/span> {\n    color: #6b8a94;\n}\npre code .<span class=\"call\">dotAccess<\/span> {\n    color: #92b300;\n}\npre code .<span class=\"call\">preprocessing<\/span> {\n    color: #b68a00;\n}\n<\/code><\/pre><p>We are almost done! We need to tell our program to actually use this plugin. Head over to <code>main.swift<\/code> and add the following import statement at the top of the file.<\/p><pre><code><span class=\"keyword\">import<\/span> SplashPublishPlugin\n<\/code><\/pre><p>Then at the bottom, edit the following function to include the plugin.<\/p><pre><code><span class=\"keyword\">try<\/span> <span class=\"type\">BlogExample<\/span>().<span class=\"call\">publish<\/span>(withTheme: .<span class=\"dotAccess\">myTheme<\/span>, plugins: [.<span class=\"call\">splash<\/span>(withClassPrefix: <span class=\"string\">\"\"<\/span>)])\n<\/code><\/pre><p>Congratulations! Run your website and you should see this<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-14.png\" alt=\"Xcode running publish\" width=\"800\"\/><h3>Deploying your website online<\/h3><p>Finally! You've made your website and you're ready to show the world. Github actually offers a way to host your website using <a href=\"https:\/\/pages.github.com\/\">GitHub Pages<\/a>. In order use this we need to do a few things.<\/p><p>First, initialize a new GitHub repository named <code>&lt;your-username&gt;.github.io<\/code>. For example, if your user name is <code>Swiftblogexample<\/code> your new repository will be named <code>Swiftblogexample.github.io<\/code>. Once you initialize it navigate to your terminal and clone your repo. To clone your repo type in the following command, replacing <code>Swiftblogexample<\/code> with your own. Then change into that directory and copy all your files from your website into it. Then open <code>package.swft<\/code> and let's make just a few more edits!<\/p><pre><code>$ git clone https:\/\/github.<span class=\"property\">com<\/span>\/<span class=\"type\">Swiftblogexample<\/span>\/<span class=\"type\">Swiftblogexample<\/span>.<span class=\"property\">github<\/span>.<span class=\"property\">io<\/span>.<span class=\"property\">git<\/span>\n$ cd <span class=\"type\">Swiftblogexample<\/span>.<span class=\"property\">github<\/span>.<span class=\"property\">io<\/span>\n$ <span class=\"keyword\">open<\/span> package.<span class=\"property\">swift<\/span>\n<\/code><\/pre><p>In <code>main.swift<\/code> add the deployment method for github, once again, replacing the url with your own.<\/p><pre><code><span class=\"keyword\">try<\/span> <span class=\"type\">BlogExample<\/span>().<span class=\"call\">publish<\/span>(\n    withTheme: .<span class=\"dotAccess\">myTheme<\/span>,\n    deployedUsing: .<span class=\"call\">gitHub<\/span>(<span class=\"string\">\"Swiftblogexample\/Swiftblogexample.github.io\"<\/span>, useSSH: <span class=\"keyword\">false<\/span>),\n    plugins: [.<span class=\"call\">splash<\/span>(withClassPrefix: <span class=\"string\">\"\"<\/span>)]\n)\n<\/code><\/pre><p>Finally, while still in <code>main.swift<\/code> edit the url, name, description, and anything else you need to for your website.<\/p><pre><code><span class=\"comment\">\/\/ Update these properties to configure your website:<\/span>\n<span class=\"keyword\">var<\/span> url = <span class=\"type\">URL<\/span>(string: <span class=\"string\">\"www.swiftblogexample\/swiftblogexample.github.io\"<\/span>)!\n<span class=\"keyword\">var<\/span> name = <span class=\"string\">\"BlogExample\"<\/span>\n<span class=\"keyword\">var<\/span> description = <span class=\"string\">\"A description of BlogExample\"<\/span>\n<span class=\"keyword\">var<\/span> language: <span class=\"type\">Language<\/span> { .<span class=\"dotAccess\">english<\/span> }\n<span class=\"keyword\">var<\/span> imagePath: <span class=\"type\">Path<\/span>? { <span class=\"keyword\">nil<\/span> }\n<\/code><\/pre><p>The first you want to do is create a new branch. When using Publish, you will always have at least two active branches that are in use. The <code>master<\/code> branch will contain all the generated code <em>after deployment<\/em> so you don't want to edit that directly. Instead, you'll make all your changes on a separate branch, then when you deploy your Swift code is not affected. To create a new branch open up terminal and navigate to your repository (after cloning, of course) then type<\/p><pre><code>git checkout -b <span class=\"string\">\"new-branch-name\"<\/span>\n<\/code><\/pre><p>Note, you can name the branch whatever you want. Then push the following changes to your repository and deploy using terminal.<\/p><pre><code>$ git add .\n$ git commit -m <span class=\"string\">\"commit for deployment\"<\/span>\n$ git push\n$ publish deploy\n<\/code><\/pre><p>At this point, you'll see your terminal doing some work until you end up with a success message. You'll also see your master branch have a bunch of generated content. Now navigate over <code>your-user-name.github.io<\/code> and you should see your live website! Here is the link to mine from this tutorial. <a href=\"https:\/\/swiftblogexample.github.io\">https:\/\/swiftblogexample.github.io<\/a>. <a href=\"https:\/\/github.com\/thomaskellough\/BlogExample\">Here<\/a> is also a link to this repo so you can see everything in place.<\/p><p>I hope you've enjoyed this tutorial and I'd love to see what you come up with! You can find my contact information at the bottom.<\/p><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-singl-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-03\" style=\"text-decoration: none\">&larr; Pages, tags, and metadata<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-03<\/guid><title>Build your very own website using Swift - Part 3<\/title><description>Part three of building your own website using Swift. This section focuses on adding new pages to your website, tags, and metadata.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-03<\/link><pubDate>Fri, 24 Jul 2020 22:02:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Build your very own website using Swift - Part 3<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-publish\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/publish\">Publish<\/a>\n        <a class=\"post-category post-category-website\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/website\">Website<\/a>\n        <a class=\"post-category post-category-enums\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/enums\">Enums<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-02\" style=\"text-decoration: none\">&larr; Creating your own nodes<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-04\" style=\"text-decoration: none\">SplashPlugin and deployment &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Adding new pages<\/h3><p>If you haven't noticed already, you created a nav bar with links to other pages, but they don't work yet! And how does your website already have a working link for <code>http:\/\/localhost:8000\/posts\/<\/code>? We never actually specifically defined this anywhere during this tutorial. The reason for that is simple, it was already done for you. In fact, you have probably already seen it if you looked at your <code>main.swift<\/code> file. Go there and check out this code.<\/p><pre><code><span class=\"keyword\">enum<\/span> SectionID: <span class=\"type\">String<\/span>, <span class=\"type\">WebsiteSectionID<\/span> {\n    <span class=\"comment\">\/\/ Add the sections that you want your website to contain here:<\/span>\n    <span class=\"keyword\">case<\/span> posts\n}\n<\/code><\/pre><p>Each enum case holds a different section of your website, or the following url from your main webpage. In our nav bar, we created three buttons, home, posts, and about. Let's add two more cases so it matches those.<\/p><pre><code><span class=\"keyword\">enum<\/span> SectionID: <span class=\"type\">String<\/span>, <span class=\"type\">WebsiteSectionID<\/span> {\n    <span class=\"comment\">\/\/ Add the sections that you want your website to contain here:<\/span>\n    <span class=\"keyword\">case<\/span> home\n    <span class=\"keyword\">case<\/span> posts\n    <span class=\"keyword\">case<\/span> about\n}\n<\/code><\/pre><p>This tells Publish that our website has a section with these titles, however, at this point Publish still doesn't know what to display for each section. Navigate back over to <code>MyHTMLFactory.swift<\/code> and look for the following code.<\/p><pre><code><span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n    <span class=\"keyword\">try<\/span> <span class=\"call\">makePostsHTML<\/span>(for: section, context: context)\n}\n<\/code><\/pre><p>This is part of the HTMLFactory protocol that we <strong>need<\/strong> to have. Notice that it returns an HTML struct, just like your <code>Factory+Posts.swift<\/code> does. In fact, if you wanted, you could create an extension for makeSectionHTML and put it with your HtmlPages folder, but I'll leave that part up to you. What I want to do now is show you how to use tell Publish which HTML page to render based off which enum case you added in SectionID. All it takes is a simple switch statement telling it to render a different page. Edit your makeSectionHTML to look like this.<\/p><pre><code><span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n    <span class=\"keyword\">switch<\/span> section.<span class=\"property\">id<\/span>.<span class=\"property\">rawValue<\/span> {\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"posts\"<\/span>:\n        <span class=\"keyword\">return try<\/span> <span class=\"call\">makePostsHTML<\/span>(for: section, context: context)\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"home\"<\/span>:\n    <span class=\"keyword\">return<\/span> <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello home!\"<\/span>))\n    <span class=\"keyword\">case<\/span> <span class=\"string\">\"about\"<\/span>:\n        <span class=\"keyword\">return<\/span> <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello about!\"<\/span>))\n    <span class=\"keyword\">default<\/span>:\n        <span class=\"keyword\">return try<\/span> <span class=\"call\">makePostsHTML<\/span>(for: section, context: context)\n    }\n}\n<\/code><\/pre><p>If we want to get what we typed inside of our SectionIDs, we can just call <code>section.id.rawValue<\/code> to get the string of each case. Then depending on what it says you return a different HTML. Note that we had to add in the <code>return<\/code> keyword this time. This is because as of Swift 5.1 you're allowed to omit the <code>return<\/code> keyword if you have a single expression. However, with the switch statement, we have multiple expressions. For the default, I left it as returning the posts content page, but feel free to edit that as you see fit.<\/p><p>You should now be able to click on the navigation items and see your new content, however, it's not that exciting because we haven't actually rendered anything other than a simple two lines of text. Let's go ahead and create a simple home page now. It won't be exciting, but I at least want to show you how to add images to your website.<\/p><h3>Creating a home page<\/h3><p>Create a new file called <code>Factory+Home.swift<\/code>, and add in the following code. This is nothing new, it's just rendering a new html and adding your header and footer.<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">MyHTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makeHomeHTML&lt;T: <span class=\"type\">Website<\/span>&gt;(for index: <span class=\"type\">Index<\/span>, section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">T<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">T<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: index, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">myHeader<\/span>(for: context),\n                .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n}\n<\/code><\/pre><p>Then navigate back to makeSectionHTML and edit your case for \"home\" to look like this<\/p><pre><code><span class=\"keyword\">case<\/span> <span class=\"string\">\"home\"<\/span>:\n    <span class=\"keyword\">return try<\/span> <span class=\"call\">makeHomeHTML<\/span>(for: context.<span class=\"property\">index<\/span>, section: section, context: context)\n<\/code><\/pre><p>You should now be able to reload and see your home page with your header and footer showing. But let's add an image at the top. Pick any image you want but I'll be using the following.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-09.png\" alt=\"Swift logo\" width=\"800\"\/><p>The first step is adding our image to our project. Inside your project navigator, under the Resources folder create a new folder called Images and drag and drop an image of your choosing in there. Here's what it should look like when you are finished<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-10.png\" alt=\"Xcode running publish\" width=\"800\"\/><p>In order to add images in Publish we use a .img class=\"post-image\" node which takes a .src(Path) as a parameter. So we need to create a variable that gets the path to your image, then pass that inside our .img class=\"post-image\" node. Let's also give the .img class=\"post-image\" a class so we can edit it if we need to. Back in <code>Factory+Home.swift<\/code> edit your function to look like this. Note that we also had to add in the <code>return<\/code> keyword now since we don't have a single expression anymore.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">MyHTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makeHomeHTML&lt;T: <span class=\"type\">Website<\/span>&gt;(for index: <span class=\"type\">Index<\/span>, section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">T<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">T<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"keyword\">var<\/span> homeImage: <span class=\"type\">Path<\/span> { <span class=\"string\">\"Images\/swift-logo.png\"<\/span> }\n        \n        <span class=\"keyword\">return<\/span>\n            <span class=\"type\">HTML<\/span>(\n                .<span class=\"call\">head<\/span>(for: index, on: context.<span class=\"property\">site<\/span>),\n                .<span class=\"call\">body<\/span>(\n                    .<span class=\"call\">myHeader<\/span>(for: context),\n                    .<span class=\"call\">class<\/span>(<span class=\"string\">\"logo-image\"<\/span>),\n                    .<span class=\"dotAccess\">img<\/span> <span class=\"keyword\">class<\/span>=<span class=\"string\">\"post-image\"<\/span>(.<span class=\"call\">src<\/span>(homeImage)),\n                    .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n                )\n        )\n    }\n}\n<\/code><\/pre><p>For me, I wanted to make my image a bit smaller so I added this to my CSS file.<\/p><pre><code>.<span class=\"property\">logo<\/span>-image img <span class=\"keyword\">class<\/span>=<span class=\"string\">\"post-image\"<\/span> {\n    width: <span class=\"number\">30<\/span>%;\n    margin: 20px;\n}\n<\/code><\/pre><p>Here's what your website should look like now.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-11.png\" alt=\"Home page with logo\" width=\"800\"\/><p>Great job! You now have a home page! I'll let you go ahead and make your own about me page using the same technique. Remember, you need to create a new <code>Factory+About.swift<\/code> file and add in your returning HTML. Then you need to go back to <code>MyHTMLFactory.swift<\/code> and edit your makeSectionHTML function to handle the case of \"about\".<\/p><h3>Organizing sections easier<\/h3><p>This is a small piece, but what I want to show you is a neat little Swift trick. In programming, you really don't want to repeat yourself. However, you'll see that when you create your sections, you also have to create your list of nav items inside your header. Let's fix that. Go to your SectionID enum and make it conform to CaseIterable. It should look like this.<\/p><pre><code><span class=\"keyword\">enum<\/span> SectionID: <span class=\"type\">String<\/span>, <span class=\"type\">WebsiteSectionID<\/span>, <span class=\"type\">CaseIterable<\/span> {\n    <span class=\"comment\">\/\/ Add the sections that you want your website to contain here:<\/span>\n    <span class=\"keyword\">case<\/span> home\n    <span class=\"keyword\">case<\/span> posts\n    <span class=\"keyword\">case<\/span> about\n}\n<\/code><\/pre><p>Then, go back to your <code>Node+Header.swift<\/code> and let's edit a few things.<\/p><ol><li>We will first delete our list that we created.<\/li><\/ol><ol start=\"2\"><li>Then we will loop over our enum cases by using <code>BlogExample.SectionID.allCases<\/code>.<\/li><\/ol><ol start=\"3\"><li>Then for our text, we will get the raw value of each enum case and call the capitalized method on it so each word has a capital first letter.<\/li><\/ol><p>Here's what it should look like when you finish. Now you can add new sections without having to edit your header file!<\/p><pre><code><span class=\"keyword\">static func<\/span> myHeader&lt;T: <span class=\"type\">Website<\/span>&gt;(for context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">T<\/span>&gt;) -&gt; <span class=\"type\">Node<\/span> {\n    <span class=\"comment\">\/\/ Create a list of navigation items<\/span>\n    \n    <span class=\"keyword\">return<\/span> .<span class=\"call\">header<\/span>(\n        <span class=\"comment\">\/\/ Begin the wrapper class<\/span>\n        .<span class=\"call\">wrapper<\/span>(\n            <span class=\"comment\">\/\/ Create your main title<\/span>\n            .<span class=\"call\">h1<\/span>(<span class=\"string\">\"My Swift Blog\"<\/span>),\n            <span class=\"comment\">\/\/ Create the nav node<\/span>\n            .<span class=\"call\">nav<\/span>(\n                <span class=\"comment\">\/\/ Create and undordered list and loop through your navItems yuou created above<\/span>\n                .<span class=\"call\">ul<\/span>(\n                    .<span class=\"call\">forEach<\/span>(\n                        <span class=\"type\">BlogExample<\/span>.<span class=\"type\">SectionID<\/span>.<span class=\"property\">allCases<\/span>\n                    ) { item <span class=\"keyword\">in<\/span>\n                        .<span class=\"call\">li<\/span>(\n                            <span class=\"comment\">\/\/ Create an anchor tag to make linkes<\/span>\n                            .<span class=\"call\">a<\/span>(\n                                <span class=\"comment\">\/\/ Redirect the user to a new webpage on your site when they click each item<\/span>\n                                .<span class=\"call\">href<\/span>(<span class=\"string\">\"\/<\/span>\\(item.<span class=\"property\">rawValue<\/span>.<span class=\"call\">lowercased<\/span>())<span class=\"string\">\"<\/span>),\n                                .<span class=\"call\">text<\/span>(item.<span class=\"property\">rawValue<\/span>.<span class=\"property\">capitalized<\/span>)\n                            )\n                        )\n                    }\n                )\n            )\n        )\n    )\n}\n<\/code><\/pre><h3>Tags<\/h3><p>We are almost done here, but there's a couple of things left to show you. The next thing on my list is showing you how to add tags to your post. Navigate to one of your markdown files and look towards the top you'll see something like this.<\/p><pre><code>---\ndate: <span class=\"number\">2020<\/span>-<span class=\"number\">07<\/span>-<span class=\"number\">30 21<\/span>:<span class=\"number\">47<\/span>\ndescription: <span class=\"type\">A<\/span> description of my first post.\ntags: first, article\n---\n<\/code><\/pre><p>You can add as many tags as you want, so have fun with it. Let's create a new file called <code>Node+Tags.swift<\/code>. We are going to do a few things here.<\/p><ol><li>Create a function that returns a list of tags<\/li><\/ol><ol start=\"2\"><li>The function accepts two parameters, one is a list of tags while the other is which website you're editing<\/li><\/ol><ol start=\"3\"><li>We will loop over each tag and provide two CSS classes. One class for it being a tag, and another class for it being a <em>specific<\/em> tag so we can edit them differently, such as background color<\/li><\/ol><ol start=\"4\"><li>Create a link that when you click on the tag, only posts that have that tag will show up<\/li><\/ol><p>Add the following code to <code>Node+Tags.swift<\/code>.<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    \n    <span class=\"keyword\">static func<\/span> tagList&lt;T: <span class=\"type\">Website<\/span>&gt;(for tags: [<span class=\"type\">Tag<\/span>], on site: <span class=\"type\">T<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n        <span class=\"keyword\">return<\/span>\n            .<span class=\"call\">div<\/span>(\n                .<span class=\"call\">forEach<\/span>(tags) { tag <span class=\"keyword\">in<\/span>\n                    .<span class=\"call\">a<\/span>(\n                        .<span class=\"call\">class<\/span>(<span class=\"string\">\"post-category post-category-<\/span>\\(tag.<span class=\"property\">string<\/span>.<span class=\"call\">lowercased<\/span>())<span class=\"string\">\"<\/span>),\n                        .<span class=\"call\">href<\/span>(site.<span class=\"call\">path<\/span>(for: tag)),\n                        .<span class=\"call\">text<\/span>(tag.<span class=\"property\">string<\/span>)\n                    )\n                })\n    }\n}\n<\/code><\/pre><p>Then in <code>Node+PostsContent.swift<\/code> we need to actually call this function. Edit your file to include your new function. For your parameter, you can get every tag on each item by calling <code>item.tags<\/code>.<\/p><pre><code>...\n<span class=\"comment\">\/\/ Creates a description  of what our post is about<\/span>\n.<span class=\"call\">tagList<\/span>(for: item.<span class=\"property\">tags<\/span>, on: site),\n.<span class=\"call\">p<\/span>(.<span class=\"call\">text<\/span>(item.<span class=\"property\">description<\/span>)),\n...\n<\/code><\/pre><p>Now before you run it, let's add those CSS classes so they look a bit interesting. Go to your CSS file and add the following code.<\/p><pre><code>.<span class=\"property\">post<\/span>-<span class=\"call\">category<\/span> {\n    margin: 1px;\n    padding: <span class=\"number\">0<\/span>.3em 1em;\n    color: #fff;\n    background: #999;\n    font-size: <span class=\"number\">60<\/span>%;\n    border-radius: 8px;\n    text-decoration: none;\n}\n\n.<span class=\"property\">post<\/span>-category-<span class=\"call\">first<\/span> {\n    background-color: green;\n}\n\n.<span class=\"property\">post<\/span>-category-<span class=\"call\">second<\/span> {\n    background-color: purple;\n}\n\n.<span class=\"property\">post<\/span>-category-<span class=\"call\">article<\/span> {\n    background-color: darkred;\n}\n<\/code><\/pre><p>Run your program, refresh the cache if necessary (cmd + option + e for Safari), and you should see something like this.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-12.png\" alt=\"Posts with tags\" width=\"800\"\/><h3>Adding a tag details page<\/h3><p>Now you'll notice that if you click on the tags it takes you to a new page, but hasn't filtered your posts. But you will notice that it says \"Hello, tag details\". Let's go back to <code>MyHTMLFactory.swift<\/code> and look for this function.<\/p><pre><code><span class=\"keyword\">func<\/span> makeTagDetailsHTML(for page: <span class=\"type\">TagDetailsPage<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n    <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, tag details\"<\/span>))\n}\n<\/code><\/pre><p>Now this next part is your call. Either create a new <code>Factory+TagDetails.swift<\/code> file and move this function in there, or edit it directly in MyHTMLFactory.swift. Either is fine. Whichever you choose, we need to edit this function to show us our tags. We will do the following things.<\/p><ol><li>Create a returning HTML() that returns a head like every other HTML() file we have<\/li><\/ol><ol start=\"2\"><li>Add the header and footer that you created earlier to the body<\/li><\/ol><ol start=\"3\"><li>Add a .postContent node, but with a specific parameter that automatically filters out our tags for us. Note that you do NOT need to add new case statements in your SectionID enum since it will automatically be generated for you with each tag!<\/li><\/ol><p>Edit your function to look like this.<\/p><pre><code><span class=\"keyword\">func<\/span> makeTagDetailsHTML(for page: <span class=\"type\">TagDetailsPage<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n    <span class=\"type\">HTML<\/span>(\n        .<span class=\"call\">head<\/span>(for: context.<span class=\"property\">index<\/span>, on: context.<span class=\"property\">site<\/span>),\n        .<span class=\"call\">body<\/span>(\n            .<span class=\"call\">myHeader<\/span>(for: context),\n            .<span class=\"call\">h1<\/span>(\n                .<span class=\"call\">text<\/span>(<span class=\"string\">\"All posts with the tag<\/span> \\(page.<span class=\"property\">tag<\/span>.<span class=\"property\">string<\/span>)<span class=\"string\">\"<\/span>)\n            ),\n            .<span class=\"call\">postContent<\/span>(for: context.<span class=\"call\">items<\/span>(taggedWith: page.<span class=\"property\">tag<\/span>), on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n        )\n    )\n}\n<\/code><\/pre><p>Run your code, refresh your website, click on the actual tag itself and you should see your posts automatically filter. Woo-hoo!<\/p><h3>Adding post content<\/h3><p>I know it seems weird that we can't actually view our posts yet. I'm sure you've clicked on it only to see \"Hello item\". At this point I suggest you try to figure out how to fix that on your own. You may be able to do it ;).<\/p><p>Still here? I'll show you how this works. You'll notice in <code>MyHTMLFactory.swift<\/code> we have the following function.<\/p><pre><code><span class=\"keyword\">func<\/span> makeItemHTML(for item: <span class=\"type\">Item<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n    <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, item\"<\/span>))\n}\n<\/code><\/pre><p>All we need to do is return the description of our item in order to see the post. Remember how there are markdown files? The great thing about that is if you format it in the markdown file, you don't need to format it here! Edit your makeItemHTML to look like this.<\/p><pre><code><span class=\"keyword\">func<\/span> makeItemHTML(for item: <span class=\"type\">Item<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n    <span class=\"type\">HTML<\/span>(\n        .<span class=\"call\">head<\/span>(for: item, on: context.<span class=\"property\">site<\/span>),\n        .<span class=\"call\">body<\/span>(\n            .<span class=\"call\">myHeader<\/span>(for: context),\n            .<span class=\"call\">wrapper<\/span>(\n                .<span class=\"call\">article<\/span>(\n                    .<span class=\"call\">contentBody<\/span>(item.<span class=\"property\">body<\/span>)\n                )\n            ),\n            .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n        )\n    )\n}\n<\/code><\/pre><p>You should now be able to click and view your posts! And honestly, we are nearly done! There are a couple of things left we need to do before we actually publish our website. The next item we want to look at is adding metadata.<\/p><h3>Adding metadata<\/h3><p>Publish comes with a lot of things to help you organize your website and filter posts, but what if we wanted more? We can actually achieve this using metadata. Head over to <code>main.swift<\/code> and look for the following function.<\/p><pre><code><span class=\"keyword\">struct<\/span> ItemMetadata: <span class=\"type\">WebsiteItemMetadata<\/span> {\n    <span class=\"comment\">\/\/ Add any site-specific metadata that you want to use here.<\/span>\n}\n<\/code><\/pre><p>Let's say you have multiple different authors working on posts for your blog. Add the following variable.<\/p><pre><code><span class=\"keyword\">struct<\/span> ItemMetadata: <span class=\"type\">WebsiteItemMetadata<\/span> {\n    <span class=\"comment\">\/\/ Add any site-specific metadata that you want to use here.<\/span>\n    <span class=\"keyword\">var<\/span> author: <span class=\"type\">String<\/span>?\n}\n<\/code><\/pre><p>Let's add some authors to our blog posts. Edit your markdown files to look like this, but give each post a different author.<\/p><p><strong>Note, my posts include Harry Potter spoilers!<\/strong><\/p><pre><code>---\ndate: <span class=\"number\">2020<\/span>-<span class=\"number\">08<\/span>-<span class=\"number\">02 10<\/span>:<span class=\"number\">57<\/span>\ndescription: <span class=\"type\">Dumbledore<\/span> speaking about <span class=\"type\">Cedric<\/span>'s death.\ntags: first, article\nauthor: <span class=\"type\">Albus Dumbledore<\/span>\n---\n# <span class=\"type\">Dumbledore<\/span> - <span class=\"type\">Speech<\/span> about <span class=\"type\">Cedric Diggory\n\nThe Ministry<\/span> of <span class=\"type\">Magic<\/span> does not wish me to tell you this. <span class=\"type\">It<\/span> <span class=\"keyword\">is<\/span> possible that <span class=\"keyword\">some<\/span> of your parents will be horrified that <span class=\"type\">I<\/span> have done so – either because they will not believe that <span class=\"type\">Lord Voldemort<\/span> has returned, or because they think <span class=\"type\">I<\/span> should not tell you so, young <span class=\"keyword\">as<\/span> you are. <span class=\"type\">It<\/span> <span class=\"keyword\">is<\/span> my belief, however, that the truth <span class=\"keyword\">is<\/span> generally preferable to lies, and that any attempt to pretend that <span class=\"type\">Cedric<\/span> died <span class=\"keyword\">as<\/span> the result of an accident, or <span class=\"keyword\">some<\/span> sort of blunder of his own, is an insult to his memory.\n<\/code><\/pre><pre><code>---\ndate: <span class=\"number\">2020<\/span>-<span class=\"number\">07<\/span>-<span class=\"number\">30 21<\/span>:<span class=\"number\">47<\/span>\ndescription: <span class=\"type\">Hermione<\/span> speaking to <span class=\"type\">Harry<\/span> about <span class=\"type\">Cho<\/span>'s feelings.\ntags: second, article\nauthor: <span class=\"type\">Hermione Granger<\/span>\n---\n# <span class=\"type\">Hermione Granger<\/span> - <span class=\"type\">To Harry<\/span> about <span class=\"type\">Cho Chang\n\nWell<\/span>, obviously, she\\'s feeling very sad, because of <span class=\"type\">Cedric<\/span> dying. <span class=\"type\">Then I<\/span> expect she's feeling confused because she liked <span class=\"type\">Cedric<\/span> and now she likes <span class=\"type\">Harry<\/span>, and she can't work out who she likes best. <span class=\"type\">Then<\/span> she'll be feeling guilty, thinking it's an insult to <span class=\"type\">Cedric<\/span>'s memory to be kissing <span class=\"type\">Harry<\/span> at all, and she'll be worrying about what everyone <span class=\"keyword\">else<\/span> might say about her <span class=\"keyword\">if<\/span> she starts going out with <span class=\"type\">Harry<\/span>. <span class=\"type\">And<\/span> she probably can't work out what her feelings towards <span class=\"type\">Harry<\/span> are anyway, because he was the one who was with <span class=\"type\">Cedric<\/span> when <span class=\"type\">Cedric<\/span> died, so that's all very mixed up and painful. <span class=\"type\">Oh<\/span>, and she's afraid she's going to be thrown off the <span class=\"type\">Ravenclaw Quidditch<\/span> team because she's flying so badly.\n\n<\/code><\/pre><p>Then create a new swift file called <code>Node+Author.swift<\/code> and add in the following code.<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    \n    <span class=\"keyword\">static func<\/span> postsBy(author: <span class=\"type\">String<\/span>, section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;, on site: <span class=\"type\">BlogExample<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n        \n        <span class=\"keyword\">let<\/span> items = section.<span class=\"property\">items<\/span>.<span class=\"call\">filter<\/span> {\n            $0.<span class=\"property\">metadata<\/span>.<span class=\"property\">author<\/span> == author\n        }\n        \n        <span class=\"keyword\">return<\/span>\n            .<span class=\"call\">wrapper<\/span>(\n                .<span class=\"call\">div<\/span>(\n                    .<span class=\"call\">h1<\/span>(<span class=\"string\">\"Posts by<\/span> \\(author)<span class=\"string\">\"<\/span>),\n                    .<span class=\"call\">postContent<\/span>(for: items, on: site)\n                )\n        )\n    }\n    \n}\n<\/code><\/pre><p>This will take in a specific string, filter out all items from a section by matching up the metadata to the string passed in, then return a wrapper that contains the new filtered list while also creating a heading separating the posts. Head back over to <code>Factory.Posts.swift<\/code> and change your function to look like this.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">MyHTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makePostsHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n         <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: context.<span class=\"property\">index<\/span>, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">myHeader<\/span>(for: context),\n                .<span class=\"call\">postsBy<\/span>(author: <span class=\"string\">\"Albus Dumbledore\"<\/span>, section: section, on: context.<span class=\"property\">site<\/span>),\n                .<span class=\"call\">postsBy<\/span>(author: <span class=\"string\">\"Hermione Granger\"<\/span>, section: section, on: context.<span class=\"property\">site<\/span>),\n                .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n}\n<\/code><\/pre><p>You'll see that we no longer call postsContent, because our new postsBy method automatically calls that for us. There is one other issue here. Trying to access this metadata gives us trouble when using generics. Maybe John Sundell knows a better way to handle this, but I've found that removing the generic portion and actually using our website inside MyHTMLFactory can solve this issue. Go back to <code>MyHTMLFactory.swift<\/code> and change every instance of <code>Site<\/code> to <code>BlogExample<\/code> and remove the <code>&lt;T: Website&gt;<\/code>. It should look like this when you are finished.<\/p><pre><code><span class=\"keyword\">struct<\/span> MyHTMLFactory: <span class=\"type\">HTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makeIndexHTML(for index: <span class=\"type\">Index<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, index\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"keyword\">switch<\/span> section.<span class=\"property\">id<\/span>.<span class=\"property\">rawValue<\/span> {\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"posts\"<\/span>:\n            <span class=\"keyword\">return try<\/span> <span class=\"call\">makePostsHTML<\/span>(for: section, context: context)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"home\"<\/span>:\n            <span class=\"keyword\">return try<\/span> <span class=\"call\">makeHomeHTML<\/span>(for: context.<span class=\"property\">index<\/span>, section: section, context: context)\n        <span class=\"keyword\">case<\/span> <span class=\"string\">\"about\"<\/span>:\n            <span class=\"keyword\">return<\/span> <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello about!\"<\/span>))\n        <span class=\"keyword\">default<\/span>:\n            <span class=\"keyword\">return try<\/span> <span class=\"call\">makePostsHTML<\/span>(for: section, context: context)\n        }\n    }\n\n    <span class=\"keyword\">func<\/span> makeItemHTML(for item: <span class=\"type\">Item<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: item, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">myHeader<\/span>(for: context),\n                .<span class=\"call\">wrapper<\/span>(\n                    .<span class=\"call\">article<\/span>(\n                        .<span class=\"call\">contentBody<\/span>(item.<span class=\"property\">body<\/span>)\n                    )\n                ),\n                .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n\n    <span class=\"keyword\">func<\/span> makePageHTML(for page: <span class=\"type\">Page<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, page\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makeTagListHTML(for page: <span class=\"type\">TagListPage<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, tag list\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makeTagDetailsHTML(for page: <span class=\"type\">TagDetailsPage<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: context.<span class=\"property\">index<\/span>, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">myHeader<\/span>(for: context),\n                .<span class=\"call\">h1<\/span>(\n                    .<span class=\"call\">text<\/span>(<span class=\"string\">\"All posts with the tag<\/span> \\(page.<span class=\"property\">tag<\/span>.<span class=\"property\">string<\/span>)<span class=\"string\">\"<\/span>)\n                ),\n                .<span class=\"call\">postContent<\/span>(for: context.<span class=\"call\">items<\/span>(taggedWith: page.<span class=\"property\">tag<\/span>), on: context.<span class=\"property\">site<\/span>),\n                .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n}\n\n<\/code><\/pre><p>Now refresh your webpage and you'll see that your posts are separated by author.<\/p><h3>Redirecting the index<\/h3><p>A website's index page is the initial page that automatically loads when you first go to a website. What we are going to do here is redirect our index page to go to our home page. This way whenever you go to www.yourblog.com it automatically takes you to your home page. To achieve this we need to do a few things.<\/p><ol><li>Create a constant for all sections of the current context<\/li><\/ol><ol start=\"2\"><li>Get the first section from the constant created in step 1 where the enum case equals \"home\"<\/li><\/ol><ol start=\"3\"><li>Call your makeHomeHTML function and pass in the proper parameters<\/li><\/ol><p>Go back to <code>MyHTMLFactory.swift<\/code> and edit your makdeIndexHTML to look like this<\/p><pre><code><span class=\"keyword\">func<\/span> makeIndexHTML(for index: <span class=\"type\">Index<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">BlogExample<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n    <span class=\"keyword\">let<\/span> sections = context.<span class=\"property\">sections<\/span>\n    <span class=\"keyword\">let<\/span> section = sections.<span class=\"call\">first<\/span>(where: { $0.<span class=\"property\">id<\/span>.<span class=\"property\">rawValue<\/span> == <span class=\"string\">\"home\"<\/span> })!\n    \n    <span class=\"keyword\">return try<\/span> <span class=\"call\">makeHomeHTML<\/span>(for: index, section: section, context: context)\n}\n<\/code><\/pre><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-02\" style=\"text-decoration: none\">&larr; Creating your own nodes<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-04\" style=\"text-decoration: none\">SplashPlugin and deployment &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-02<\/guid><title>Build your very own website using Swift - Part 2<\/title><description>Part two of building your own website using Swift. This section focuses on creating custom nodes.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-02<\/link><pubDate>Tue, 21 Jul 2020 22:01:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Build your very own website using Swift - Part 2<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-publish\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/publish\">Publish<\/a>\n        <a class=\"post-category post-category-website\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/website\">Website<\/a>\n        <a class=\"post-category post-category-extensions\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/extensions\">Extensions<\/a>\n        <a class=\"post-category post-category-html\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/html\">Html<\/a>\n        <a class=\"post-category post-category-css\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/css\">CSS<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-03\" style=\"text-decoration: none\">Pages, tags, and metadata &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Creating your first blog page<\/h3><p>This is a tutorial on how to make a blog, right? So let's create our first page that will list all of the blogs you plan to create. Remember, the goal of this tutorial is also to show you a way to keep your code organized. So what I'd recommend doing is creating a new directory under your <code>Sources\/BlogExample<\/code> folder called <code>HtmlPages<\/code>. This is a good place to store the code for each section of your site such as home page, about me page, posts, contact information, or whatever you want really! After creating the directory create a new Swift file named <code>Factory+Posts.Swift<\/code> and write the following code.<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">MyHTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makePostsHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n         <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: context.<span class=\"property\">index<\/span>, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, posts!\"<\/span>)\n            )\n        )\n    }\n}\n<\/code><\/pre><p>Let's talk about what this does. This creates an extension for your custom HTMLFactory that allows you to create as many pages as you want and use in your website. You use an extension because we are adding it in a different Swift file for organization purposes. Technically, you could just add this function inside <code>MyHTMLFactory.swift<\/code> but it can be difficult to organize and find things later. Even though you don't need to write pure HTML, you do need to understand how it works. Publish actually takes your Swift code and then converts it to HTML. In every webpage you have your main HTML, a header that contains all the metadata your webpage holds, and then a body which contains all of your content.<\/p><p>Press <code>cmd + R<\/code> to run your code then navigate over to <code>http:\/\/localhost:8000\/posts\/<\/code> to see your changes! You should now see \"Hello, posts!\" since that's what you typed for the body.<\/p><p>Let me guess, you saw \"Hello, section\" instead? Let's go over this. Navigate back over to to <code>MyHTMLFactory.swift<\/code> and take a look at the following function.<\/p><pre><code><span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n    <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, section\"<\/span>))\n}\n<\/code><\/pre><p>This is the function that is actually being called when you go to <code>http:\/\/localhost:8000\/posts\/<\/code>. So instead of returning that HTML, let's return the one you just created. Change the function to look like this.<\/p><pre><code><span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n    <span class=\"keyword\">try<\/span> <span class=\"call\">makePostsHTML<\/span>(for: section, context: context)\n}\n<\/code><\/pre><p>Note that you need to mark it with a <code>try<\/code> because it can throw. Re-run your app, refresh your page and you should see this. If your page doesn't refresh try refreshing the cache using <code>cmd + option + e<\/code> if using safari, then reloading. This is a good command to remember when you're editing CSS.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-05.png\" alt=\"Hello, posts! page\" width=\"800\"\/><p>We are getting somewhere! But I said the plan was to make a list of your posts. So head back over to <code>Factory+Posts.swift<\/code> and let's edit up the body of our function. Here's what we are going to do.<\/p><ol><li>Create an unordered list for each blog post<\/li><\/ol><ol start=\"2\"><li>Loop over each blog post and create a list item for each one<\/li><\/ol><ol start=\"3\"><li>Create a heading for our blog post and a link that allows us to click it and read the entire blog<\/li><\/ol><ol start=\"4\"><li>Create a p tag (paragraph tag) that lists a description of what the post is about<\/li><\/ol><p>This can get confusing, so I'll leave some comments to help explain for each step. Please, please watch your parentheses here. I highy suggest typing everything yourself and allowing Swift to autocomplete.<\/p><pre><code>...\n.<span class=\"call\">body<\/span>(\n    <span class=\"comment\">\/\/ Create an unordered list<\/span>\n    .<span class=\"call\">ul<\/span>(\n        <span class=\"comment\">\/\/ Loop over each blog post that we have in our code<\/span>\n        .<span class=\"call\">forEach<\/span>(\n            section.<span class=\"property\">items<\/span>\n        ) { item <span class=\"keyword\">in<\/span>\n            <span class=\"comment\">\/\/ Creates a list item for each post<\/span>\n            .<span class=\"dotAccess\">li<\/span> (\n                <span class=\"comment\">\/\/ Creates an article node to display our information<\/span>\n                .<span class=\"call\">article<\/span>(\n                    <span class=\"comment\">\/\/ Creates a heading with our post title<\/span>\n                    .<span class=\"call\">h1<\/span>(\n                        <span class=\"comment\">\/\/ Creates an anchor tag so we can create the link to our post<\/span>\n                        .<span class=\"call\">a<\/span>(\n                            <span class=\"comment\">\/\/ Creates the link to our post so we can click it and read everything<\/span>\n                            .<span class=\"call\">href<\/span>(item.<span class=\"property\">path<\/span>),\n                            .<span class=\"call\">text<\/span>(item.<span class=\"property\">title<\/span>)\n                        )\n                    ),\n                    <span class=\"comment\">\/\/ Creates a description  of what our post is about<\/span>\n                    .<span class=\"call\">p<\/span>(.<span class=\"call\">text<\/span>(item.<span class=\"property\">description<\/span>))\n                )\n            )\n        }\n    )\n)\n...\n<\/code><\/pre><p>Wow, that's a lot. But re-run your app and you should see this! You can even click the link and see a new page!<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-06.png\" alt=\"Xcode running publish\" width=\"800\"\/><p>Now I know what you're thinking. You never wrote that blog post and where did it come from? Navigate over to your Project Navigator and look under <code>Content\/posts\/first-post.md<\/code>. Open that up and take a look. Here's what you should see.<\/p><pre><code>---\ndate: <span class=\"number\">2020<\/span>-<span class=\"number\">07<\/span>-<span class=\"number\">30 21<\/span>:<span class=\"number\">47<\/span>\ndescription: <span class=\"type\">A<\/span> description of my first post.\ntags: first, article\n---\n# <span class=\"type\">My<\/span> first post\n\n<span class=\"type\">My<\/span> first post's text.\n<\/code><\/pre><p>This is a markdown file and this is how you will write all of your blog posts. I won't be doing a markdown tutorial here, but it's easy enough to Google when you want to figure out what to do. The important thing here is how the beginning is organized. You'll notice that you used <code>item.title<\/code> and <code>item.description<\/code> in the above function. The description is on the third line of your markdown file while the title is on the sixth line. We will discuss this in detail later. For now, create a new file in the same <code>posts<\/code> directory and give it some dummy content, or copy mine. Make sure it's the same formatting and don't forget to remove the swift extension.<\/p><pre><code>---\ndate: <span class=\"number\">2020<\/span>-<span class=\"number\">07<\/span>-<span class=\"number\">30 21<\/span>:<span class=\"number\">47<\/span>\ndescription: <span class=\"type\">A<\/span> description of my second post.\ntags: second, article\n---\n# <span class=\"type\">My<\/span> second post\n\n<span class=\"type\">My<\/span> second post's text.\n<\/code><\/pre><p>Re-run your code, refresh your browser and you should now see TWO posts. The cool thing about Publish is once you get your site up and running, you only need to edit your markdown files to add new posts! However, let's make it look a bit better because right now it's not fun to read. This is done with one single line of code since there is a lot of CSS that was already created. Above your <code>.forEach<\/code> loop add a class. Feel free to dig through your CSS code to see what each class does! Your change should look like this.<\/p><pre><code>...\n.<span class=\"call\">ul<\/span>(\n    <span class=\"comment\">\/\/ Loop over each blog post that we have in our code<\/span>\n    .<span class=\"call\">class<\/span>(<span class=\"string\">\"item-list\"<\/span>),\n    .<span class=\"call\">forEach<\/span>(\n        section.<span class=\"property\">items<\/span>\n    ) { item <span class=\"keyword\">in<\/span>\n...\n<\/code><\/pre><p>This should now format your posts to look a bit better. Now we need to add a header and a footer, but as you can see, this is going to get very messy and unorganized with all the parentheses inside your html body. So how can we fix this? Well the way Publish works is by creating nodes for all the HTML elements. We aren't going to dig deep into nodes with Swift, but I want you to understand that each time you create a body, or h1 tag, or p tag, or article, button, or anything else with HTML a node is created. They are highly reusable and easy to break apart and combine together. So what we want to do is create a specific node that is <em>only<\/em> for the post content.<\/p><p>Similar to how we create a new directory for HtmlPages, let's create another new directory called <code>Nodes<\/code> under <code>Sources\/BlogExample<\/code> then create a new swift file called <code>Node+PostsContent<\/code> inside the new directory. I want you to add the following code.<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    <span class=\"keyword\">static func<\/span> postContent&lt;T: <span class=\"type\">Website<\/span>&gt;(for items: [<span class=\"type\">Item<\/span>&lt;<span class=\"type\">T<\/span>&gt;], on site: <span class=\"type\">T<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n    \n    }\n}\n<\/code><\/pre><p>Let's discuss this. Here you create an extension on Node for HTML content inside of your body. The function is set up as a generic (that's what the T is all about) which allows us to pass in data type we want. The function also returns a Node. This is the important part. You can put as much code in here which returns one node, which we can then use in our html pages. Why would we do this? It helps keep everything organized and separated. It's using functional programming for better architecture. So the next part is going back to your <code>Factory+Posts.swift<\/code> file and removing everything from the body and placing it inside this new function. Then you can call your <code>.postContent<\/code> function inside <code>Factory+Posts.swift<\/code> and pass in both your items and site. To get <code>[Item&lt;T&gt;]<\/code> you just call <code>section.items<\/code> and to get <code>site<\/code> you just call <code>context.site<\/code>. Notice that we also made this function static. This allows us to use it anywhere.<\/p><p>There is one more thing I want to add while we are back in postContent. Let's add a way to sort our posts by date and also list the date published on each post. We will do this by:<\/p><ol><li>Creating a date formatter from Swift's foundation library<\/li><\/ol><ol start=\"2\"><li>Call Swift's built-in sorted method to create a new list sorted by date<\/li><\/ol><ol start=\"3\"><li>Loop over the newly created list in our forEach loop instead of the one passed in<\/li><\/ol><ol start=\"4\"><li>Add a paragraph tag displaying the formatted date on each post<\/li><\/ol><p>When you're finished, your two new extensions should look like this. We did have to change <code>section.items<\/code> to <code>items<\/code> in line 20 of <code>postContent<\/code>. This is because our function now uses a parameter of items instead of section so we can just call items directly.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">MyHTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makePostsHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n         <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: context.<span class=\"property\">index<\/span>, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">postContent<\/span>(for: section.<span class=\"property\">items<\/span>, on: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n}\n\n...\n<span class=\"keyword\">import<\/span> Foundation\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    <span class=\"keyword\">static func<\/span> postContent&lt;T: <span class=\"type\">Website<\/span>&gt;(for items: [<span class=\"type\">Item<\/span>&lt;<span class=\"type\">T<\/span>&gt;], on site: <span class=\"type\">T<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n    \n        <span class=\"keyword\">let<\/span> formatter = <span class=\"type\">DateFormatter<\/span>()\n        formatter.<span class=\"property\">dateStyle<\/span> = .<span class=\"dotAccess\">long<\/span>\n        \n        <span class=\"keyword\">let<\/span> sortedItems = items.<span class=\"call\">sorted<\/span> {\n            $0.<span class=\"property\">date<\/span> &lt; $1.<span class=\"property\">date<\/span>\n        }\n        \n        <span class=\"keyword\">return<\/span>\n            <span class=\"comment\">\/\/ Create an unordered list<\/span>\n            .<span class=\"call\">ul<\/span>(\n                <span class=\"comment\">\/\/ Loop over each blog post that we have in our code<\/span>\n                .<span class=\"call\">class<\/span>(<span class=\"string\">\"item-list\"<\/span>),\n                .<span class=\"call\">forEach<\/span>(\n                    sortedItems\n                ) { item <span class=\"keyword\">in<\/span>\n                    <span class=\"comment\">\/\/ Creates a list item for each post<\/span>\n                    .<span class=\"dotAccess\">li<\/span> (\n                        <span class=\"comment\">\/\/ Creates an article node to display our information<\/span>\n                        .<span class=\"call\">article<\/span>(\n                            <span class=\"comment\">\/\/ Creates a heading with our post title<\/span>\n                            \n                            .<span class=\"call\">h1<\/span>(\n                                <span class=\"comment\">\/\/ Creates an anchor tag so we can create the link to our post<\/span>\n                                .<span class=\"call\">a<\/span>(\n                                    <span class=\"comment\">\/\/ Creates the link to our post so we can click it and read everything<\/span>\n                                    .<span class=\"call\">href<\/span>(item.<span class=\"property\">path<\/span>),\n                                    .<span class=\"call\">text<\/span>(item.<span class=\"property\">title<\/span>)\n                                )\n                            ),\n                            <span class=\"comment\">\/\/ Creates a description  of what our post is about<\/span>\n                            .<span class=\"call\">p<\/span>(.<span class=\"call\">text<\/span>(item.<span class=\"property\">description<\/span>)),\n                            .<span class=\"call\">p<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Published:<\/span> \\(formatter.<span class=\"call\">string<\/span>(from: item.<span class=\"property\">lastModified<\/span>))<span class=\"string\">\"<\/span>))\n                        )\n                    )\n                }\n        )\n    }\n}\n<\/code><\/pre><p>Run your code and it should look the same! The rest of this tutorial should go by rather quickly. We have most of the difficult part out of the way. You know how to install and launch your website, create new html pages, and create new nodes. Let's start adding a few things to make it look better and then discuss how to add new pages and tags.<\/p><h3>Adding a wrapper node<\/h3><p>Publish comes with a CSS wrapper class that we can help make our content look better. Let's first create this node so we can use it anywhere in our website. Go ahead and create a new swift file called <code>Node+Wrapper.swift<\/code> and add the following code.<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    <span class=\"keyword\">static func<\/span> wrapper(<span class=\"keyword\">_<\/span> nodes: <span class=\"type\">Node<\/span>...) -&gt; <span class=\"type\">Node<\/span> {\n        .<span class=\"call\">div<\/span>(.<span class=\"call\">class<\/span>(<span class=\"string\">\"wrapper\"<\/span>), .<span class=\"dotAccess\">group<\/span>(nodes))\n    }\n}\n<\/code><\/pre><p>Then wrap everything inside your post content inside the .wrapper(). Your return statement should look like this.<\/p><pre><code><span class=\"keyword\">return<\/span>\n    .<span class=\"call\">wrapper<\/span>(\n        <span class=\"comment\">\/\/ Create an unordered list<\/span>\n        .<span class=\"call\">ul<\/span>(\n            <span class=\"comment\">\/\/ Loop over each blog post that we have in our code<\/span>\n            .<span class=\"call\">class<\/span>(<span class=\"string\">\"item-list\"<\/span>),\n            .<span class=\"call\">forEach<\/span>(\n                sortedItems\n            ) { item <span class=\"keyword\">in<\/span>\n                <span class=\"comment\">\/\/ Creates a list item for each post<\/span>\n                .<span class=\"dotAccess\">li<\/span> (\n                    <span class=\"comment\">\/\/ Creates an article node to display our information<\/span>\n                    .<span class=\"call\">article<\/span>(\n                        <span class=\"comment\">\/\/ Creates a heading with our post title<\/span>\n                        \n                        .<span class=\"call\">h1<\/span>(\n                            <span class=\"comment\">\/\/ Creates an anchor tag so we can create the link to our post<\/span>\n                            .<span class=\"call\">a<\/span>(\n                                <span class=\"comment\">\/\/ Creates the link to our post so we can click it and read everything<\/span>\n                                .<span class=\"call\">href<\/span>(item.<span class=\"property\">path<\/span>),\n                                .<span class=\"call\">text<\/span>(item.<span class=\"property\">title<\/span>)\n                            )\n                        ),\n                        <span class=\"comment\">\/\/ Creates a description  of what our post is about<\/span>\n                        .<span class=\"call\">p<\/span>(.<span class=\"call\">text<\/span>(item.<span class=\"property\">description<\/span>)),\n                        .<span class=\"call\">p<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Published:<\/span> \\(formatter.<span class=\"call\">string<\/span>(from: item.<span class=\"property\">lastModified<\/span>))<span class=\"string\">\"<\/span>))\n                    )\n                )\n            }\n        )\n)\n<\/code><\/pre><p>You should be able to run your code now and see your posts look a bit nicer. Here's an example of what you should see.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-07.png\" alt=\"Wrapper example on posts\" width=\"800\"\/><h3>Adding a header<\/h3><p>Now let's add a header that we can display on every webpage. We will do this by creating a colored banner with a simple title along with some navigation buttons. This next node extension will accomplish the following tasks.<\/p><ol><li>It will create a list of navigation items for the different pages of your website<\/li><\/ol><ol start=\"2\"><li>It will return a header node wrapped around a wrapper node<\/li><\/ol><ol start=\"3\"><li>Inside the wrapper node you'll create a header for your title<\/li><\/ol><ol start=\"4\"><li>Below the title you'll create a .nav node that contains an unordered list of your navigation items<\/li><\/ol><ol start=\"5\"><li>Each navigation item will link you to that specific web page. For example, if you click \"Home\" you will be redirected to <code>http:\/\/localhost:8000\/home<\/code><\/li><\/ol><p>Start by creating a new file called <code>Node+Header.swift<\/code> and add the following code. I've also added comments to help explain what each piece is.<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    \n    <span class=\"keyword\">static func<\/span> myHeader&lt;T: <span class=\"type\">Website<\/span>&gt;(for context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">T<\/span>&gt;) -&gt; <span class=\"type\">Node<\/span> {\n        <span class=\"comment\">\/\/ Create a list of navigation items<\/span>\n        <span class=\"keyword\">let<\/span> navItems = [<span class=\"string\">\"Home\"<\/span>, <span class=\"string\">\"Posts\"<\/span>, <span class=\"string\">\"About\"<\/span>]\n        \n        <span class=\"keyword\">return<\/span> .<span class=\"call\">header<\/span>(\n            <span class=\"comment\">\/\/ Begin the wrapper class<\/span>\n            .<span class=\"call\">wrapper<\/span>(\n                <span class=\"comment\">\/\/ Create your main title<\/span>\n                .<span class=\"call\">h1<\/span>(<span class=\"string\">\"My Swift Blog\"<\/span>),\n                <span class=\"comment\">\/\/ Create the nav node<\/span>\n                .<span class=\"call\">nav<\/span>(\n                    <span class=\"comment\">\/\/ Create and undordered list and loop through your navItems yuou created above<\/span>\n                    .<span class=\"call\">ul<\/span>(\n                        .<span class=\"call\">forEach<\/span>(\n                            navItems\n                        ) { item <span class=\"keyword\">in<\/span>\n                            .<span class=\"call\">li<\/span>(\n                                <span class=\"comment\">\/\/ Create an anchor tag to make linkes<\/span>\n                                .<span class=\"call\">a<\/span>(\n                                    <span class=\"comment\">\/\/ Redirect the user to a new webpage on your site when they click each item<\/span>\n                                    .<span class=\"call\">href<\/span>(<span class=\"string\">\"\/<\/span>\\(item.<span class=\"call\">lowercased<\/span>())<span class=\"string\">\"<\/span>),\n                                    .<span class=\"call\">text<\/span>(item)\n                                )\n                            )\n                        }\n                    )\n                )\n            )\n        )\n    }\n}\n<\/code><\/pre><p>You have now created the node, but you naven't actually used it on one of your pages yet. Go back to <code>Factory+Posts.swift<\/code> and add in your .myHeader function. It should now look like this. You can already see how separating nodes will help keep your html pages oraganized.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">MyHTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makePostsHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n         <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: context.<span class=\"property\">index<\/span>, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">myHeader<\/span>(for: context),\n                .<span class=\"call\">postContent<\/span>(for: section.<span class=\"property\">items<\/span>, on: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n}\n<\/code><\/pre><p>You can run this now and see it in action, but before you do, I suggest we add our own custom color to the banner up top. We will do this by also creating a gradient background instead of just a solid color. There is already a header class in our CSS file, so jump in there and look for<\/p><pre><code><span class=\"call\">header<\/span> {\n    background-color: #eee;\n}\n<\/code><\/pre><p>Change it to look like this<\/p><pre><code><span class=\"call\">header<\/span> {\n    background: linear-<span class=\"call\">gradient<\/span>(90deg, <span class=\"call\">rgba<\/span>(<span class=\"number\">2<\/span>,<span class=\"number\">0<\/span>,<span class=\"number\">36<\/span>,<span class=\"number\">1<\/span>) <span class=\"number\">2<\/span>%, <span class=\"call\">rgba<\/span>(<span class=\"number\">9<\/span>,<span class=\"number\">9<\/span>,<span class=\"number\">121<\/span>,<span class=\"number\">1<\/span>) <span class=\"number\">29<\/span>%, <span class=\"call\">rgba<\/span>(<span class=\"number\">0<\/span>,<span class=\"number\">212<\/span>,<span class=\"number\">255<\/span>,<span class=\"number\">1<\/span>) <span class=\"number\">100<\/span>%);\n}\n<\/code><\/pre><p>Feel free to play with it as you see fit. But if you did the above you should have something that looks like this now.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-08.png\" alt=\"Header example\" width=\"800\"\/><h3>Add a footer<\/h3><p>Go ahead and create a new node called <code>Node+Footer.swift<\/code> and let's do the following.<\/p><ol><li>Create a variable that automatically gets the current year<\/li><\/ol><ol start=\"2\"><li>Create a container that contains the copyright symbol with the year and the name of your site<\/li><\/ol><ol start=\"3\"><li>Create a link to John Sundell's Publish repo to show people how you generated this website<\/li><\/ol><p>Note that we will need to add the Foundation library in order to get our current calendar date. Add in the following code.<\/p><pre><code><span class=\"keyword\">import<\/span> Foundation\n<span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    <span class=\"keyword\">static func<\/span> myFooter&lt;T: <span class=\"type\">Website<\/span>&gt;(for site: <span class=\"type\">T<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n        <span class=\"comment\">\/\/ Creates a variable to get the current year of today<\/span>\n        <span class=\"keyword\">let<\/span> currentYear = <span class=\"type\">Calendar<\/span>.<span class=\"property\">current<\/span>.<span class=\"call\">component<\/span>(.<span class=\"dotAccess\">year<\/span>, from: <span class=\"type\">Date<\/span>())\n        \n        <span class=\"keyword\">return<\/span>\n            <span class=\"comment\">\/\/ Creates a container<\/span>\n            .<span class=\"call\">div<\/span>(\n                <span class=\"comment\">\/\/ Provides a CSS class to this container<\/span>\n                .<span class=\"call\">class<\/span>(<span class=\"string\">\"footer\"<\/span>),\n                <span class=\"comment\">\/\/ Creates another container for copyright information<\/span>\n                .<span class=\"call\">div<\/span>(\n                    .<span class=\"call\">text<\/span>(<span class=\"string\">\"©<\/span> \\(currentYear) \\(site.<span class=\"property\">name<\/span>)<span class=\"string\">\"<\/span>)\n                ),\n                <span class=\"comment\">\/\/ Creates another container for link to John Sundell's publish repo<\/span>\n                .<span class=\"call\">div<\/span>(\n                    .<span class=\"call\">text<\/span>(<span class=\"string\">\"Generated using \"<\/span>),\n                    .<span class=\"call\">a<\/span>(\n                        .<span class=\"call\">text<\/span>(<span class=\"string\">\"Publish\"<\/span>),\n                        .<span class=\"call\">href<\/span>(<span class=\"string\">\"https:\/\/github.com\/johnsundell\/publish\"<\/span>)\n                    ),\n                    .<span class=\"call\">text<\/span>(<span class=\"string\">\". Written in Swift\"<\/span>)\n                )\n        )\n    }\n}\n<\/code><\/pre><p>Add your footer inside <code>Factory+Posts.swift<\/code>, but note that the parameter is different for the footer than it is the header. The parameter used for the header is a <code>context<\/code> while the footer's parameter is <code>Website<\/code>. Feel free to change these as you see fit, but if you wrote it the same way I did, your <code>Factory+Posts<\/code> will now look like this.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">MyHTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makePostsHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n         <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">head<\/span>(for: context.<span class=\"property\">index<\/span>, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">myHeader<\/span>(for: context),\n                .<span class=\"call\">postContent<\/span>(for: section.<span class=\"property\">items<\/span>, on: context.<span class=\"property\">site<\/span>),\n                .<span class=\"call\">myFooter<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n}\n<\/code><\/pre><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-left\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-01\" style=\"text-decoration: none\">&larr; Introduction and setting up<\/a><\/th>\n        <th class=\"th-middle\"><\/th>\n        <th class=\"th-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-03\" style=\"text-decoration: none\">Pages, tags, and metadata &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/home\/intro<\/guid><title>Swift Skill Building<\/title><description>Swift Skill Building<\/description><link>www.thomaskellough\/thomaskellough.github.io\/home\/intro<\/link><pubDate>Sat, 18 Jul 2020 22:12:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Swift Skill Building<\/h1><p>Swift is definitely one of my favorite programming languages. These tutorials will show you how to do certain things using Swift.<\/p>]]><\/content:encoded><\/item><item><guid isPermaLink=\"true\">www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-01<\/guid><title>Build your very own website using Swift - Part 1<\/title><description>Build your very own static website using, you guessed it, Swift! Publish is an open-source static site generator build for Swift Developers.<\/description><link>www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-01<\/link><pubDate>Sat, 18 Jul 2020 22:00:00 -0500<\/pubDate><content:encoded><![CDATA[<h1>Build your very own website using Swift - Part 1<\/h1><div class=\"post-tags\" markdown=\"1\">\n        <a class=\"post-category post-category-feature\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/feature\">Feature<\/a>\n        <a class=\"post-category post-category-publish\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/publish\">Publish<\/a>\n        <a class=\"post-category post-category-website\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/website\">Website<\/a>\n        <a class=\"post-category post-category-protocols\" href=\"www.thomaskellough\/thomaskellough.github.io\/tags\/protocols\">Protocols<\/a>\n<\/div><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-02\" style=\"text-decoration: none\">Creating your own nodes &rarr;<\/a><\/th>\n    <\/tr>\n<\/table><h3>Prerequisites<\/h3><p>Requirements:<\/p><ul><li>Swift 5.2 (or later)<\/li><\/ul><ul><li>macOS Catalina 10.15 (or later)<\/li><\/ul><ul><li>Some experience in Swift<\/li><\/ul><ul><li>Not necessary, but background experience in HTML\/CSS and web design will help<\/li><\/ul><h2>Introduction<\/h2><p>When programmers hear the word \"Swift\" they instantly think of iOS apps and Apple. This is because Swift was developed by Apple for iOS, iPadOS, macOS, watchOS, and tvOS. It was designed to take over Objective-C and so far has been doing an excellent job with it.<\/p><p>However, programming languages are constantly changing and improving and Swift is no exception. <a href=\"https:\/\/www.swiftbysundell.com\/\">John Sundell<\/a> is very popular in the Swift community and last year he released his <a href=\"https:\/\/github.com\/JohnSundell\/Publish\">Publish<\/a> project that allows you to make static websites using Swift code. In fact, this website that you're reading this tutorial on was built using Publish!<\/p><p>All the hard work is done for us, however, the documentation is still being worked on. <a href=\"https:\/\/www.youtube.com\/watch?v=JqdS-oi96Gk\">Kilo Loco<\/a> has a great video to help you get started, but I wanted to create a more in depth guide to help you create your very own website from start to finish. At the end of this tutorial, you will have created <a href=\"https:\/\/swiftblogexample.github.io\">this<\/a> website as well as have a decent idea of how to organize your code.<\/p><p>Now this tutorial doesn't go into a whole lot of detail with CSS and HTML because well frankly, it's not my strong point. However, I will show you enough to get you started. Note that even though Publish is written in Swift, we don't do a <em>whole lot<\/em> of normal Swift code that you normally see and there may be some advanced topics that we will quickly go over without digging in too deep.<\/p><p>With that being said, let's get started. I highly suggest taking a moment to look over the <a href=\"https:\/\/github.com\/JohnSundell\/Publish\">publish repo<\/a> and getting a bit familiar with what we are dealing with. When you are ready, go ahead and clone the repo. To do that, open terminal, navigate to a directory of your choosing and type in <code><\/code><code>git clone https:\/\/github.com\/JohnSundell\/Publish.git<\/code><code><\/code> When finished, navigate to the newly created 'Publish' directory that you just cloned then run the terminal command <code><\/code><code>make<\/code><code><\/code>. This tutorial is split into four different sections, so feel free to take breaks as needed.<\/p><p><em>Tip: to change directories using terminal commands just type <code><\/code><code>cd \/directory\/of\/your\/choosing\/<\/code><code><\/code> <\/em><\/p><p>The <code><\/code><code>make<\/code><code><\/code> command runs the make file that's included in the Publish repo. If you get a <strong>permission denied<\/strong> when trying to run this, use the sudo command <code><\/code><code>sudo make<\/code><code><\/code> and use admin privldeges (assuming you have them). At this point, I'd recommend creating a separate directory to store your own own website. After navigating to your new directory inside your terminal, run the command <code><\/code><code>publish new<\/code><code><\/code>. This generates a handful of files that is now your new website.<\/p><h2>Launching your website<\/h2><p>Great! You now have your very first website using Publish! Let's take a look at it, shall we? The first step is to open your website by running <code><\/code><code>open package.swift<\/code><code><\/code>. Give Xcode some time to install all the dependencies needed. When it's finished, make sure your scheme is selected for your Mac, hit run, and ensure you have a success message. Here's what you should be seeing.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-01.png\" alt=\"Xcode running publish\" width=\"800\"\/><p>Let's launch your website! Now for those of you new to making websites, you don't just build it live on the web. First, you edit it and launch it locally on your computer where only you can see it. How do we do that? Go back to your terminal and run the command <code><\/code><code>publish run<\/code><code><\/code>. You'll see your terminal do a bunch of things, but the end is what we want. You should see a \"Successfully published (your website)\" and then a line under it stating \"Starting web server at http:\/\/localhoste:8000\". You can type this inside of a web browser of your choosing or just <code>cmd + click<\/code> it directly from the terminal. Viola! You have your first website that should look something like this.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-02.png\" alt=\"Initial website launch\" width=\"800\"\/><p><em>Note: depending on the settings of your mac you may have a white background. Publish already adapts to light\/dark theme based on the settings of your mac.<\/em><\/p><h2>Personalizing your website<\/h2><p>Now I promise we will get to adding content, but bear with me. I want to show you everything I can from start to finish so you understand most of the components in this package. The first step is personalizing this website to your liking.<\/p><h3>Creating your own CSS file<\/h3><p>Even though there are a lot of CSS styles built in, you're going to want to have full control over your CSS in your own website. Let's start by creating our own CSS file. Look over in your Project Navigator (that's the sidebar to the left that shows you all of your folders and files) and create a new folder in your <code>Resources<\/code> folder named <code>MyTheme<\/code>. Inside <code>MyTheme<\/code>, create a new file. You can either right click it and select <code>New File<\/code> or <code>cmd + n<\/code> after highlighting the folder. Name this file <code>styles.css<\/code> (yes, that means removing the Swift extension!). Now you can write all your CSS from Scratch, OR you can take what's already done for us and add then edit it as needed. To do the latter look in your project navigator under \"Swift Package Dependencies\" and navigate to \"Publish&gt;Resources&gt;FoundationTheme&gt;styles.css\" and copy all of the CSS from there into the new CSS file you created. Here is an image to show you where you should be at right now.<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-03.png\" alt=\"Xcode showing style.css file\" width=\"800\"\/><h3>Creating your own theme<\/h3><p>I'm about to show you how to create your own theme, but let's first take a look at the default theme that comes with Publish called <code>Foundation<\/code>. In your Swift Package Dependencies section of your project navigator, navigate to \"Publish &gt; Sources &gt; Publish &gt; API &gt; Theme+Foundation.swift\". You should see a file that looks like this.<\/p><pre><code><span class=\"comment\">\/**\n*  Publish\n*  Copyright (c) John Sundell 2019\n*  MIT license, see LICENSE file for details\n*\/<\/span>\n\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">public extension<\/span> <span class=\"type\">Theme<\/span> {\n    <span class=\"comment\">\/\/\/ The default \"Foundation\" theme that Publish ships with, a very\n    \/\/\/ basic theme mostly implemented for demonstration purposes.<\/span>\n    <span class=\"keyword\">static var<\/span> foundation: <span class=\"type\">Self<\/span> {\n        <span class=\"type\">Theme<\/span>(\n            htmlFactory: <span class=\"type\">FoundationHTMLFactory<\/span>(),\n            resourcePaths: [<span class=\"string\">\"Resources\/FoundationTheme\/styles.css\"<\/span>]\n        )\n    }\n}\n\n<span class=\"keyword\">private struct<\/span> FoundationHTMLFactory&lt;Site: <span class=\"type\">Website<\/span>&gt;: <span class=\"type\">HTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makeIndexHTML(for index: <span class=\"type\">Index<\/span>,\n                       context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">lang<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">language<\/span>),\n            .<span class=\"call\">head<\/span>(for: index, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">header<\/span>(for: context, selectedSection: <span class=\"keyword\">nil<\/span>),\n                .<span class=\"call\">wrapper<\/span>(\n                    .<span class=\"call\">h1<\/span>(.<span class=\"call\">text<\/span>(index.<span class=\"property\">title<\/span>)),\n                    .<span class=\"call\">p<\/span>(\n                        .<span class=\"call\">class<\/span>(<span class=\"string\">\"description\"<\/span>),\n                        .<span class=\"call\">text<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">description<\/span>)\n                    ),\n                    .<span class=\"call\">h2<\/span>(<span class=\"string\">\"Latest content\"<\/span>),\n                    .<span class=\"call\">itemList<\/span>(\n                        for: context.<span class=\"call\">allItems<\/span>(\n                            sortedBy: \\.<span class=\"property\">date<\/span>,\n                            order: .<span class=\"dotAccess\">descending<\/span>\n                        ),\n                        on: context.<span class=\"property\">site<\/span>\n                    )\n                ),\n                .<span class=\"call\">footer<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n\n    <span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;,\n                         context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">lang<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">language<\/span>),\n            .<span class=\"call\">head<\/span>(for: section, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">header<\/span>(for: context, selectedSection: section.<span class=\"property\">id<\/span>),\n                .<span class=\"call\">wrapper<\/span>(\n                    .<span class=\"call\">h1<\/span>(.<span class=\"call\">text<\/span>(section.<span class=\"property\">title<\/span>)),\n                    .<span class=\"call\">itemList<\/span>(for: section.<span class=\"property\">items<\/span>, on: context.<span class=\"property\">site<\/span>)\n                ),\n                .<span class=\"call\">footer<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n\n    <span class=\"keyword\">func<\/span> makeItemHTML(for item: <span class=\"type\">Item<\/span>&lt;<span class=\"type\">Site<\/span>&gt;,\n                      context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">lang<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">language<\/span>),\n            .<span class=\"call\">head<\/span>(for: item, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">class<\/span>(<span class=\"string\">\"item-page\"<\/span>),\n                .<span class=\"call\">header<\/span>(for: context, selectedSection: item.<span class=\"property\">sectionID<\/span>),\n                .<span class=\"call\">wrapper<\/span>(\n                    .<span class=\"call\">article<\/span>(\n                        .<span class=\"call\">div<\/span>(\n                            .<span class=\"call\">class<\/span>(<span class=\"string\">\"content\"<\/span>),\n                            .<span class=\"call\">contentBody<\/span>(item.<span class=\"property\">body<\/span>)\n                        ),\n                        .<span class=\"call\">span<\/span>(<span class=\"string\">\"Tagged with: \"<\/span>),\n                        .<span class=\"call\">tagList<\/span>(for: item, on: context.<span class=\"property\">site<\/span>)\n                    )\n                ),\n                .<span class=\"call\">footer<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n\n    <span class=\"keyword\">func<\/span> makePageHTML(for page: <span class=\"type\">Page<\/span>,\n                      context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">lang<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">language<\/span>),\n            .<span class=\"call\">head<\/span>(for: page, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">header<\/span>(for: context, selectedSection: <span class=\"keyword\">nil<\/span>),\n                .<span class=\"call\">wrapper<\/span>(.<span class=\"call\">contentBody<\/span>(page.<span class=\"property\">body<\/span>)),\n                .<span class=\"call\">footer<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n\n    <span class=\"keyword\">func<\/span> makeTagListHTML(for page: <span class=\"type\">TagListPage<\/span>,\n                         context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">lang<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">language<\/span>),\n            .<span class=\"call\">head<\/span>(for: page, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">header<\/span>(for: context, selectedSection: <span class=\"keyword\">nil<\/span>),\n                .<span class=\"call\">wrapper<\/span>(\n                    .<span class=\"call\">h1<\/span>(<span class=\"string\">\"Browse all tags\"<\/span>),\n                    .<span class=\"call\">ul<\/span>(\n                        .<span class=\"call\">class<\/span>(<span class=\"string\">\"all-tags\"<\/span>),\n                        .<span class=\"call\">forEach<\/span>(page.<span class=\"property\">tags<\/span>.<span class=\"call\">sorted<\/span>()) { tag <span class=\"keyword\">in<\/span>\n                            .<span class=\"call\">li<\/span>(\n                                .<span class=\"call\">class<\/span>(<span class=\"string\">\"tag\"<\/span>),\n                                .<span class=\"call\">a<\/span>(\n                                    .<span class=\"call\">href<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"call\">path<\/span>(for: tag)),\n                                    .<span class=\"call\">text<\/span>(tag.<span class=\"property\">string<\/span>)\n                                )\n                            )\n                        }\n                    )\n                ),\n                .<span class=\"call\">footer<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n\n    <span class=\"keyword\">func<\/span> makeTagDetailsHTML(for page: <span class=\"type\">TagDetailsPage<\/span>,\n                            context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n        <span class=\"type\">HTML<\/span>(\n            .<span class=\"call\">lang<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">language<\/span>),\n            .<span class=\"call\">head<\/span>(for: page, on: context.<span class=\"property\">site<\/span>),\n            .<span class=\"call\">body<\/span>(\n                .<span class=\"call\">header<\/span>(for: context, selectedSection: <span class=\"keyword\">nil<\/span>),\n                .<span class=\"call\">wrapper<\/span>(\n                    .<span class=\"call\">h1<\/span>(\n                        <span class=\"string\">\"Tagged with \"<\/span>,\n                        .<span class=\"call\">span<\/span>(.<span class=\"call\">class<\/span>(<span class=\"string\">\"tag\"<\/span>), .<span class=\"dotAccess\">text<\/span>(page.<span class=\"property\">tag<\/span>.<span class=\"property\">string<\/span>))\n                    ),\n                    .<span class=\"call\">a<\/span>(\n                        .<span class=\"call\">class<\/span>(<span class=\"string\">\"browse-all\"<\/span>),\n                        .<span class=\"call\">text<\/span>(<span class=\"string\">\"Browse all tags\"<\/span>),\n                        .<span class=\"call\">href<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">tagListPath<\/span>)\n                    ),\n                    .<span class=\"call\">itemList<\/span>(\n                        for: context.<span class=\"call\">items<\/span>(\n                            taggedWith: page.<span class=\"property\">tag<\/span>,\n                            sortedBy: \\.<span class=\"property\">date<\/span>,\n                            order: .<span class=\"dotAccess\">descending<\/span>\n                        ),\n                        on: context.<span class=\"property\">site<\/span>\n                    )\n                ),\n                .<span class=\"call\">footer<\/span>(for: context.<span class=\"property\">site<\/span>)\n            )\n        )\n    }\n}\n\n<span class=\"keyword\">private extension<\/span> <span class=\"type\">Node<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Context<\/span> == <span class=\"type\">HTML<\/span>.<span class=\"type\">BodyContext<\/span> {\n    <span class=\"keyword\">static func<\/span> wrapper(<span class=\"keyword\">_<\/span> nodes: <span class=\"type\">Node<\/span>...) -&gt; <span class=\"type\">Node<\/span> {\n        .<span class=\"call\">div<\/span>(.<span class=\"call\">class<\/span>(<span class=\"string\">\"wrapper\"<\/span>), .<span class=\"dotAccess\">group<\/span>(nodes))\n    }\n\n    <span class=\"keyword\">static func<\/span> header&lt;T: <span class=\"type\">Website<\/span>&gt;(\n        for context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">T<\/span>&gt;,\n        selectedSection: <span class=\"type\">T<\/span>.<span class=\"type\">SectionID<\/span>?\n    ) -&gt; <span class=\"type\">Node<\/span> {\n        <span class=\"keyword\">let<\/span> sectionIDs = <span class=\"type\">T<\/span>.<span class=\"type\">SectionID<\/span>.<span class=\"property\">allCases<\/span>\n\n        <span class=\"keyword\">return<\/span> .<span class=\"call\">header<\/span>(\n            .<span class=\"call\">wrapper<\/span>(\n                .<span class=\"call\">a<\/span>(.<span class=\"call\">class<\/span>(<span class=\"string\">\"site-name\"<\/span>), .<span class=\"dotAccess\">href<\/span>(<span class=\"string\">\"\/\"<\/span>), .<span class=\"dotAccess\">text<\/span>(context.<span class=\"property\">site<\/span>.<span class=\"property\">name<\/span>)),\n                .<span class=\"call\">if<\/span>(sectionIDs.<span class=\"property\">count<\/span> &gt; <span class=\"number\">1<\/span>,\n                    .<span class=\"call\">nav<\/span>(\n                        .<span class=\"call\">ul<\/span>(.<span class=\"call\">forEach<\/span>(sectionIDs) { section <span class=\"keyword\">in<\/span>\n                            .<span class=\"call\">li<\/span>(.<span class=\"call\">a<\/span>(\n                                .<span class=\"call\">class<\/span>(section == selectedSection ? <span class=\"string\">\"selected\"<\/span> : <span class=\"string\">\"\"<\/span>),\n                                .<span class=\"call\">href<\/span>(context.<span class=\"property\">sections<\/span>[section].path),\n                                .<span class=\"call\">text<\/span>(context.<span class=\"property\">sections<\/span>[section].title)\n                            ))\n                        })\n                    )\n                )\n            )\n        )\n    }\n\n    <span class=\"keyword\">static func<\/span> itemList&lt;T: <span class=\"type\">Website<\/span>&gt;(for items: [<span class=\"type\">Item<\/span>&lt;<span class=\"type\">T<\/span>&gt;], on site: <span class=\"type\">T<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n        <span class=\"keyword\">return<\/span> .<span class=\"call\">ul<\/span>(\n            .<span class=\"call\">class<\/span>(<span class=\"string\">\"item-list\"<\/span>),\n            .<span class=\"call\">forEach<\/span>(items) { item <span class=\"keyword\">in<\/span>\n                .<span class=\"call\">li<\/span>(.<span class=\"call\">article<\/span>(\n                    .<span class=\"call\">h1<\/span>(.<span class=\"call\">a<\/span>(\n                        .<span class=\"call\">href<\/span>(item.<span class=\"property\">path<\/span>),\n                        .<span class=\"call\">text<\/span>(item.<span class=\"property\">title<\/span>)\n                    )),\n                    .<span class=\"call\">tagList<\/span>(for: item, on: site),\n                    .<span class=\"call\">p<\/span>(.<span class=\"call\">text<\/span>(item.<span class=\"property\">description<\/span>))\n                ))\n            }\n        )\n    }\n\n    <span class=\"keyword\">static func<\/span> tagList&lt;T: <span class=\"type\">Website<\/span>&gt;(for item: <span class=\"type\">Item<\/span>&lt;<span class=\"type\">T<\/span>&gt;, on site: <span class=\"type\">T<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n        <span class=\"keyword\">return<\/span> .<span class=\"call\">ul<\/span>(.<span class=\"call\">class<\/span>(<span class=\"string\">\"tag-list\"<\/span>), .<span class=\"dotAccess\">forEach<\/span>(item.<span class=\"property\">tags<\/span>) { tag <span class=\"keyword\">in<\/span>\n            .<span class=\"call\">li<\/span>(.<span class=\"call\">a<\/span>(\n                .<span class=\"call\">href<\/span>(site.<span class=\"call\">path<\/span>(for: tag)),\n                .<span class=\"call\">text<\/span>(tag.<span class=\"property\">string<\/span>)\n            ))\n        })\n    }\n\n    <span class=\"keyword\">static func<\/span> footer&lt;T: <span class=\"type\">Website<\/span>&gt;(for site: <span class=\"type\">T<\/span>) -&gt; <span class=\"type\">Node<\/span> {\n        <span class=\"keyword\">return<\/span> .<span class=\"call\">footer<\/span>(\n            .<span class=\"call\">p<\/span>(\n                .<span class=\"call\">text<\/span>(<span class=\"string\">\"Generated using \"<\/span>),\n                .<span class=\"call\">a<\/span>(\n                    .<span class=\"call\">text<\/span>(<span class=\"string\">\"Publish\"<\/span>),\n                    .<span class=\"call\">href<\/span>(<span class=\"string\">\"https:\/\/github.com\/johnsundell\/publish\"<\/span>)\n                )\n            ),\n            .<span class=\"call\">p<\/span>(.<span class=\"call\">a<\/span>(\n                .<span class=\"call\">text<\/span>(<span class=\"string\">\"RSS feed\"<\/span>),\n                .<span class=\"call\">href<\/span>(<span class=\"string\">\"\/feed.rss\"<\/span>)\n            ))\n        )\n    }\n}\n\n<\/code><\/pre><p>We are going to break this apart with our own custom theme to make it easier to understand and more organized. The first piece I want you to look at is the public extension on Theme.<\/p><pre><code><span class=\"keyword\">public extension<\/span> <span class=\"type\">Theme<\/span> {\n    <span class=\"comment\">\/\/\/ The default \"Foundation\" theme that Publish ships with, a very\n    \/\/\/ basic theme mostly implemented for demonstration purposes.<\/span>\n    <span class=\"keyword\">static var<\/span> foundation: <span class=\"type\">Self<\/span> {\n        <span class=\"type\">Theme<\/span>(\n            htmlFactory: <span class=\"type\">FoundationHTMLFactory<\/span>(),\n            resourcePaths: [<span class=\"string\">\"Resources\/FoundationTheme\/styles.css\"<\/span>]\n        )\n    }\n}\n<\/code><\/pre><p>This creates a theme with a couple of arguments. The first being the <code>HTMLFactory()<\/code> and the second being a path to your CSS. Let's begin by creating our own theme that we can customize easily. Head to your project navigator and create a new Swift file called <code>MyHTMLFactory.swift<\/code> inside of <code>Sources &gt; BlogExample (or whatever your blog is named!)<\/code>. Now what we want to do is take all of these functions and separate them into their own files. I'll give you the bones of it here, but feel free to take them from <code>Theme+Foundation<\/code> and edit them as you see fit.<\/p><p>Inside <code>MyHTMLFactory.swift<\/code> add the following. (Note that I changed the struct name!)<\/p><pre><code><span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"keyword\">struct<\/span> MyHTMLFactory&lt;Site: <span class=\"type\">Website<\/span>&gt;: <span class=\"type\">HTMLFactory<\/span> {\n\n}\n<\/code><\/pre><p>When you press <code><\/code><code>cmd + b<\/code><code><\/code> to build your app you should see an error. <code><\/code><code>Type 'MyHTMLFactory&lt;Site&gt;' does not conform to protocol 'HTMLFactor'<\/code><code><\/code>What's this? Well, MyHTMLFactory is actually a protocol that needs specific functions. If you're unfamiliar with protocols, they define a blueprint or methods and properties that you can allow other classes and structs to adopt. Here is what the protocol of MyHTMLFactory looks like.<\/p><pre><code><span class=\"keyword\">import<\/span> Plot\n\n<span class=\"comment\">\/\/\/ Protocol used to implement a website theme's underlying factory,\n\/\/\/ that creates HTML for a site's various locations using the Plot DSL.<\/span>\n<span class=\"keyword\">public protocol<\/span> HTMLFactory {\n    <span class=\"comment\">\/\/\/ The website that the factory is for. Generic constraints may be\n    \/\/\/ applied to this type to require that a website fulfills certain\n    \/\/\/ requirements in order to use this factory.<\/span>\n    <span class=\"keyword\">associatedtype<\/span> Site: <span class=\"type\">Website<\/span>\n\n    <span class=\"comment\">\/\/\/ Create the HTML to use for the website's main index page.\n    \/\/\/ - parameter index: The index page to generate HTML for.\n    \/\/\/ - parameter context: The current publishing context.<\/span>\n    <span class=\"keyword\">func<\/span> makeIndexHTML(for index: <span class=\"type\">Index<\/span>,\n                       context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>\n\n    <span class=\"comment\">\/\/\/ Create the HTML to use for the index page of a section.\n    \/\/\/ - parameter section: The section to generate HTML for.\n    \/\/\/ - parameter context: The current publishing context.<\/span>\n    <span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;,\n                         context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>\n\n    <span class=\"comment\">\/\/\/ Create the HTML to use for an item.\n    \/\/\/ - parameter item: The item to generate HTML for.\n    \/\/\/ - parameter context: The current publishing context.<\/span>\n    <span class=\"keyword\">func<\/span> makeItemHTML(for item: <span class=\"type\">Item<\/span>&lt;<span class=\"type\">Site<\/span>&gt;,\n                      context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>\n\n    <span class=\"comment\">\/\/\/ Create the HTML to use for a page.\n    \/\/\/ - parameter page: The page to generate HTML for.\n    \/\/\/ - parameter context: The current publishing context.<\/span>\n    <span class=\"keyword\">func<\/span> makePageHTML(for page: <span class=\"type\">Page<\/span>,\n                      context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>\n\n    <span class=\"comment\">\/\/\/ Create the HTML to use for the website's list of tags, if supported.\n    \/\/\/ Return `nil` if the theme that this factory is for doesn't support tags.\n    \/\/\/ - parameter page: The tag list page to generate HTML for.\n    \/\/\/ - parameter context: The current publishing context.<\/span>\n    <span class=\"keyword\">func<\/span> makeTagListHTML(for page: <span class=\"type\">TagListPage<\/span>,\n                         context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>?\n\n    <span class=\"comment\">\/\/\/ Create the HTML to use for a tag details page, used to represent a single\n    \/\/\/ tag. Return `nil` if the theme that this factory is for doesn't support tags.\n    \/\/\/ - parameter page: The tag details page to generate HTML for.\n    \/\/\/ - parameter context: The current publishing context.<\/span>\n    <span class=\"keyword\">func<\/span> makeTagDetailsHTML(for page: <span class=\"type\">TagDetailsPage<\/span>,\n                            context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>?\n}\n<\/code><\/pre><p>So we need to add these stubs. The great thing about Xcode, is it can automatically do it for us. Remember that error that popped up? Go ahead and click the red circle on the left side of the error and click \"Fix\".<\/p><img class=\"post-image\" src=\"www.thomaskellough\/thomaskellough.github.io\/Images\/Posts\/01\/01-04.png\" alt=\"Xcode running publish\" width=\"800\"\/><p>This should add the following protocol stubs, but with no return values. Go ahead and fill the stubs with a simple return HTML to get started. Here's an example.<\/p><pre><code><span class=\"keyword\">struct<\/span> MyHTMLFactory&lt;Site: <span class=\"type\">Website<\/span>&gt;: <span class=\"type\">HTMLFactory<\/span> {\n    <span class=\"keyword\">func<\/span> makeIndexHTML(for index: <span class=\"type\">Index<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, index\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makeSectionHTML(for section: <span class=\"type\">Section<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, section\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makeItemHTML(for item: <span class=\"type\">Item<\/span>&lt;<span class=\"type\">Site<\/span>&gt;, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, item\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makePageHTML(for page: <span class=\"type\">Page<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span> {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, page\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makeTagListHTML(for page: <span class=\"type\">TagListPage<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, tag list\"<\/span>))\n    }\n\n    <span class=\"keyword\">func<\/span> makeTagDetailsHTML(for page: <span class=\"type\">TagDetailsPage<\/span>, context: <span class=\"type\">PublishingContext<\/span>&lt;<span class=\"type\">Site<\/span>&gt;) <span class=\"keyword\">throws<\/span> -&gt; <span class=\"type\">HTML<\/span>? {\n        <span class=\"type\">HTML<\/span>(.<span class=\"call\">text<\/span>(<span class=\"string\">\"Hello, tag details\"<\/span>))\n    }\n}\n<\/code><\/pre><p>Let's now navigate to our <code>main.swift<\/code> file (should be in Sources\/BlogExample) and change it up a bit. The first change I want you to do is to add this extension. You may have to change <code>BlogExample<\/code> to whatever your blog is named. In fact, expect to do that from now on because I won't be reminding you again. We are also adding the CSS file that we created earlier to our resourcePaths.<\/p><pre><code><span class=\"keyword\">extension<\/span> <span class=\"type\">Theme<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Site<\/span> == <span class=\"type\">BlogExample<\/span> {\n    <span class=\"keyword\">static var<\/span> myTheme: <span class=\"type\">Theme<\/span> {\n        <span class=\"type\">Theme<\/span>(htmlFactory: <span class=\"type\">MyHTMLFactory<\/span>(), resourcePaths: [<span class=\"string\">\"Resources\/MyTheme\/styles.css\"<\/span>])\n    }\n}\n<\/code><\/pre><p>The next change is editing the last line to use your theme. It should look like this.<\/p><pre><code><span class=\"keyword\">try<\/span> <span class=\"type\">BlogExample<\/span>().<span class=\"call\">publish<\/span>(withTheme: .<span class=\"dotAccess\">myTheme<\/span>)\n<\/code><\/pre><p>Note that if you can't automatically see <code>.myTheme<\/code> after adding the extension then buidling your website can allow it to autopopulate. Your final <code>main.swift<\/code> file should look like this. Feel free to run your website, but all you will see is \"Hello, Index\".<\/p><pre><code><span class=\"keyword\">import<\/span> Foundation\n<span class=\"keyword\">import<\/span> Publish\n<span class=\"keyword\">import<\/span> Plot\n\n<span class=\"comment\">\/\/ This type acts as the configuration for your website.<\/span>\n<span class=\"keyword\">struct<\/span> BlogExample: <span class=\"type\">Website<\/span> {\n    <span class=\"keyword\">enum<\/span> SectionID: <span class=\"type\">String<\/span>, <span class=\"type\">WebsiteSectionID<\/span> {\n        <span class=\"comment\">\/\/ Add the sections that you want your website to contain here:<\/span>\n        <span class=\"keyword\">case<\/span> posts\n    }\n\n    <span class=\"keyword\">struct<\/span> ItemMetadata: <span class=\"type\">WebsiteItemMetadata<\/span> {\n        <span class=\"comment\">\/\/ Add any site-specific metadata that you want to use here.<\/span>\n    }\n\n    <span class=\"comment\">\/\/ Update these properties to configure your website:<\/span>\n    <span class=\"keyword\">var<\/span> url = <span class=\"type\">URL<\/span>(string: <span class=\"string\">\"https:\/\/your-website-url.com\"<\/span>)!\n    <span class=\"keyword\">var<\/span> name = <span class=\"string\">\"BlogExample\"<\/span>\n    <span class=\"keyword\">var<\/span> description = <span class=\"string\">\"A description of BlogExample\"<\/span>\n    <span class=\"keyword\">var<\/span> language: <span class=\"type\">Language<\/span> { .<span class=\"dotAccess\">english<\/span> }\n    <span class=\"keyword\">var<\/span> imagePath: <span class=\"type\">Path<\/span>? { <span class=\"keyword\">nil<\/span> }\n}\n\n<span class=\"keyword\">extension<\/span> <span class=\"type\">Theme<\/span> <span class=\"keyword\">where<\/span> <span class=\"type\">Site<\/span> == <span class=\"type\">BlogExample<\/span> {\n    <span class=\"keyword\">static var<\/span> myTheme: <span class=\"type\">Theme<\/span> {\n        <span class=\"type\">Theme<\/span>(htmlFactory: <span class=\"type\">MyHTMLFactory<\/span>(), resourcePaths: [<span class=\"string\">\"Resources\/MyTheme\/styles.css\"<\/span>])\n    }\n}\n\n<span class=\"comment\">\/\/ This will generate your website using the built-in Foundation theme:<\/span>\n<span class=\"keyword\">try<\/span> <span class=\"type\">BlogExample<\/span>().<span class=\"call\">publish<\/span>(withTheme: .<span class=\"dotAccess\">myTheme<\/span>)\n\n<\/code><\/pre><table class=\"posts-table\">\n    <tr>\n        <th class=\"th-single-right\"><a href=\"www.thomaskellough\/thomaskellough.github.io\/posts\/01-build-a-website-with-publish-part-02\" style=\"text-decoration: none\">Creating your own nodes &rarr;<\/a><\/th>\n    <\/tr>\n<\/table>]]><\/content:encoded><\/item><\/channel><\/rss>"}